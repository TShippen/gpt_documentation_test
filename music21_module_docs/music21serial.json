[
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.serial",
        "type": "ListItem"
    },
    {
        "text": "Previous topic",
        "type": "Title"
    },
    {
        "text": "music21.search.serial",
        "type": "Title"
    },
    {
        "text": "Next topic",
        "type": "Title"
    },
    {
        "text": "music21.sieve",
        "type": "Title"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "music21.serial\nToneRow\nToneRow\nToneRow.findOriginalCenteredTransformations()\nToneRow.findZeroCenteredTransformations()\nToneRow.getIntervalsAsString()\nToneRow.isSameRow()\nToneRow.isTwelveToneRow()\nToneRow.makeTwelveToneRow()\nToneRow.noteNames()\nToneRow.originalCenteredTransformation()\nToneRow.pitchClasses()\nToneRow.zeroCenteredTransformation()\nToneRow.row\n\n\n\n\nTwelveToneRow\nTwelveToneRow\nTwelveToneRow.areCombinatorial()\nTwelveToneRow.findHistorical()\nTwelveToneRow.findTransformedHistorical()\nTwelveToneRow.getLinkClassification()\nTwelveToneRow.isAllInterval()\nTwelveToneRow.isLinkChord()\nTwelveToneRow.matrix()\n\n\n\n\nHistoricalTwelveToneRow\nHistoricalTwelveToneRow\nHistoricalTwelveToneRow.mergeAttributes()\nHistoricalTwelveToneRow.composer\nHistoricalTwelveToneRow.opus\nHistoricalTwelveToneRow.title\n\n\n\n\nTwelveToneMatrix\nTwelveToneMatrix\n\n\nFunctions\npcToToneRow()\nrowToMatrix()\ngetHistoricalRowByName()",
        "type": "ListItem"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "About music21",
        "type": "ListItem"
    },
    {
        "text": "User's Guide",
        "type": "ListItem"
    },
    {
        "text": "Module Reference",
        "type": "ListItem"
    },
    {
        "text": "Installation",
        "type": "ListItem"
    },
    {
        "text": "Developer Reference",
        "type": "ListItem"
    },
    {
        "text": "Documentation and tests in progress",
        "type": "ListItem"
    },
    {
        "text": "Quick search",
        "type": "Title"
    },
    {
        "text": "This Page",
        "type": "Title"
    },
    {
        "text": "Show Source",
        "type": "ListItem"
    },
    {
        "text": "music21.serial\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "This module defines objects for defining and manipulating structures\ncommon to serial and/or twelve-tone music,\nincluding ToneRow subclasses.",
        "type": "NarrativeText"
    },
    {
        "text": "Serial searching methods that were previously here have been moved to\nserial.",
        "type": "NarrativeText"
    },
    {
        "text": "ToneRow\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.serial.",
        "type": "Title"
    },
    {
        "text": "ToneRow",
        "type": "Title"
    },
    {
        "text": "row",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A Stream representation of a tone row, or an ordered sequence of pitches;\ncan most importantly be used to deal with\nserial transformations.\nUnlike a normal Stream, the first argument is assumed to be a ToneRow:\n>>> toneRow = serial.ToneRow([10, 9, 4, 5, 6, 3, 2, 8, 7, 11, 0, 1])\n\n\nThe representation of a ToneRow will be the contents:\n>>> toneRow\n<music21.serial.ToneRow A94563287B01>\n\n\nUnless (like a Stream), the id is set:\n>>> toneRow.id = 'retrograde_jungfrau'\n>>> toneRow\n<music21.serial.ToneRow retrograde_jungfrau>\n\n\nA ToneRow does not need to have twelve pitches, like this ten-tone row\nfrom Ruth Crawford Seeger's String Quartet 1931\n>>> rcsRow = serial.ToneRow([2, 4, 5, 3, 6, 9, 8, 7, 1, 0])\n>>> rcsRow\n<music21.serial.ToneRow 2453698710>\n>>> len(rcsRow)\n10",
        "type": "ListItem"
    },
    {
        "text": "ToneRow bases",
        "type": "Title"
    },
    {
        "text": "Stream",
        "type": "ListItem"
    },
    {
        "text": "StreamCore",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "ToneRow read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Stream:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength flat highestOffset highestTime isGapless lowestOffset notes notesAndRests pitches secondsMap spanners voices",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from StreamCore:",
        "type": "NarrativeText"
    },
    {
        "text": "spannerBundle",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "ToneRow read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Stream:",
        "type": "NarrativeText"
    },
    {
        "text": "atSoundingPitch clef duration elements finalBarline keySignature metadata seconds staffLines timeSignature",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation editorial id offset priority quarterLength style",
        "type": "Table"
    },
    {
        "text": "ToneRow methods",
        "type": "Title"
    },
    {
        "text": "ToneRow.",
        "type": "Title"
    },
    {
        "text": "findOriginalCenteredTransformations",
        "type": "Title"
    },
    {
        "text": "otherRow",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Gives the list of original-centered serial transformations taking one\nToneRow\nto another, the second specified in the argument. Each transformation is given as a tuple\nof the transformation type and index.\nSee originalCenteredTransformation() for an\nexplanation of this convention.\n>>> chromatic = serial.pcToToneRow(       [2, 3, 4, 5, 6, 7, 8, 9, 'A', 'B',   0, 1])\n>>> reverseChromatic = serial.pcToToneRow([8, 7, 6, 5, 4, 3, 2, 1, 0,   'B', 'A', 9])\n>>> chromatic.findOriginalCenteredTransformations(reverseChromatic)\n[('I', 6), ('R', 7)]\n>>> schoenberg25 = serial.getHistoricalRowByName('SchoenbergOp25')\n>>> schoenberg26 = serial.getHistoricalRowByName('SchoenbergOp26')\n>>> schoenberg25.findOriginalCenteredTransformations(schoenberg26)\n[]\n>>> schoenberg26.findOriginalCenteredTransformations(\n...     schoenberg26.originalCenteredTransformation('RI',8))\n[('RI', 8)]",
        "type": "ListItem"
    },
    {
        "text": "ToneRow.",
        "type": "Title"
    },
    {
        "text": "findZeroCenteredTransformations",
        "type": "Title"
    },
    {
        "text": "otherRow",
        "type": "Title"
    },
    {
        "text": "\u2192 bool | list[Any]",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Gives the list of zero-centered serial transformations\ntaking one ToneRow\nto another, the second specified in the argument. Each transformation is given as a\ntuple of the transformation type and index.\nSee zeroCenteredTransformation() for\nan explanation of this convention.\n>>> chromatic = serial.pcToToneRow([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1])\n>>> reverseChromatic = serial.pcToToneRow([8, 7, 6, 5, 4, 3, 2, 1, 0, 11, 10, 9])\n>>> chromatic.findZeroCenteredTransformations(reverseChromatic)\n[('I', 8), ('R', 9)]\n>>> schoenberg25 = serial.getHistoricalRowByName('SchoenbergOp25')\n>>> schoenberg26 = serial.pcToToneRow(serial.getHistoricalRowByName(\n...                                        'SchoenbergOp26').row)\n>>> schoenberg25.findZeroCenteredTransformations(schoenberg26)\n[]\n>>> schoenberg26.findZeroCenteredTransformations(\n...     schoenberg26.zeroCenteredTransformation('RI', 8))\n[('RI', 8)]",
        "type": "ListItem"
    },
    {
        "text": "ToneRow.",
        "type": "Title"
    },
    {
        "text": "getIntervalsAsString",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns the string of intervals between consecutive pitch classes of\na ToneRow.\n\u0098T' = 10, \u0098E' = 11.\n>>> cRow = serial.pcToToneRow([0])\n>>> cRow.getIntervalsAsString()\n''\n>>> reverseChromatic = serial.pcToToneRow([11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0])\n>>> reverseChromatic.getIntervalsAsString()\n'EEEEEEEEEEE'",
        "type": "ListItem"
    },
    {
        "text": "ToneRow.",
        "type": "Title"
    },
    {
        "text": "isSameRow",
        "type": "Title"
    },
    {
        "text": "row",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Convenience function describing if two rows are the same.\n>>> row1 = serial.pcToToneRow([6, 7, 8])\n>>> row2 = serial.pcToToneRow([-6, 19, 128])\n>>> row3 = serial.pcToToneRow([6, 7, -8])\n>>> row1.isSameRow(row2)\nTrue\n>>> row2.isSameRow(row1)\nTrue\n>>> row1.isSameRow(row3)\nFalse",
        "type": "ListItem"
    },
    {
        "text": "ToneRow.",
        "type": "Title"
    },
    {
        "text": "isTwelveToneRow",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Describes whether a ToneRow constitutes\na twelve-tone row. Note that a\nTwelveToneRow object might not be a twelve-tone row.\n>>> serial.ToneRow([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]).isTwelveToneRow()\nTrue\n>>> serial.ToneRow([0, 4, 8]).isTwelveToneRow()\nFalse\n>>> serial.ToneRow([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]).isTwelveToneRow()\nFalse",
        "type": "ListItem"
    },
    {
        "text": "ToneRow.",
        "type": "Title"
    },
    {
        "text": "makeTwelveToneRow",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Convenience function returning a TwelveToneRow with the\nsame pitches.\nNote that a ToneRow may be created without being a\ntrue twelve tone row.\n>>> r1 = serial.pcToToneRow(range(11))\n>>> type(r1)\n<class 'music21.serial.ToneRow'>\n>>> n = note.Note()\n>>> n.pitch.pitchClass = 11\n>>> r1.append(n)\n>>> r2 = r1.makeTwelveToneRow()\n>>> type(r2)\n<class 'music21.serial.TwelveToneRow'>",
        "type": "ListItem"
    },
    {
        "text": "ToneRow.",
        "type": "Title"
    },
    {
        "text": "noteNames",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Convenience function showing the note names of a\nToneRow as a list.\n>>> chromatic = serial.TwelveToneRow(range(12))\n>>> chromatic.noteNames()\n['C', 'C#', 'D', 'E-', 'E', 'F', 'F#', 'G', 'G#', 'A', 'B-', 'B']\n\n\n>>> halfStep = serial.ToneRow([0, 1])\n>>> halfStep.noteNames()\n['C', 'C#']",
        "type": "ListItem"
    },
    {
        "text": "ToneRow.",
        "type": "Title"
    },
    {
        "text": "originalCenteredTransformation",
        "type": "Title"
    },
    {
        "text": "transformationType",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "Title"
    },
    {
        "text": "int",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns a ToneRow giving a transformation of a tone row.\nAdmissible transformations are \u0098T' (transposition), \u0098I' (inversion),\n\u0098R' (retrograde), and \u0098RI' (retrograde inversion).\nIn the \u009coriginal-centered\u009d convention,\nwhich is less common than the \u009czero-centered\u009d convention, the original row is not initially\ntransposed to start on the pitch class 0. Thus, the transformation Tn transposes\nthe original row up by n semitones, and the transformations In, Rn, and RIn first\ntransform the row appropriately (without transposition), then transpose the resulting\nrow by n semitones.\n>>> chromatic = serial.pcToToneRow(range(12))\n>>> chromatic.pitchClasses()\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n>>> chromaticP3 = chromatic.originalCenteredTransformation('T',3)\n>>> chromaticP3.pitchClasses()\n[3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2]\n>>> chromaticI6 = chromatic.originalCenteredTransformation('I',6)\n>>> chromaticI6.pitchClasses()\n[6, 5, 4, 3, 2, 1, 0, 11, 10, 9, 8, 7]\n>>> schoenberg = serial.getHistoricalRowByName('SchoenbergOp26')\n>>> schoenberg.pitchClasses()\n[3, 7, 9, 11, 1, 0, 10, 2, 4, 6, 8, 5]\n>>> schoenbergR8 = schoenberg.originalCenteredTransformation('R',8)\n>>> schoenbergR8.pitchClasses()\n[1, 4, 2, 0, 10, 6, 8, 9, 7, 5, 3, 11]\n>>> schoenbergRI9 = schoenberg.originalCenteredTransformation('RI',9)\n>>> schoenbergRI9.noteNames()\n['B-', 'G', 'A', 'B', 'C#', 'F', 'E-', 'D', 'E', 'F#', 'G#', 'C']",
        "type": "ListItem"
    },
    {
        "text": "ToneRow.",
        "type": "Title"
    },
    {
        "text": "pitchClasses",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Convenience function showing the pitch classes of a\nToneRow as a list.\n>>> fiveFold = [5 * i for i in range(12)]\n>>> fiveFold\n[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55]\n\n\n>>> quintupleRow = serial.pcToToneRow(fiveFold)\n>>> quintupleRow\n<music21.serial.TwelveToneRow 05A3816B4927>\n>>> quintupleRow.pitchClasses()\n[0, 5, 10, 3, 8, 1, 6, 11, 4, 9, 2, 7]\n\n\n>>> halfStep = serial.pcToToneRow([0, 1])\n>>> halfStep.pitchClasses()\n[0, 1]",
        "type": "ListItem"
    },
    {
        "text": "ToneRow.",
        "type": "Title"
    },
    {
        "text": "zeroCenteredTransformation",
        "type": "Title"
    },
    {
        "text": "transformationType",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns a ToneRow giving a transformation of a tone row.\nAdmissible transformationTypes are \u0098P' (prime), \u0098I' (inversion),\n\u0098R' (retrograde), and \u0098RI' (retrograde inversion).\nIn the \u009czero-centered\u009d convention,\nthe transformations Pn and In start on the pitch class n, and the transformations\nRn and RIn end on the pitch class n.\n>>> chromatic = serial.pcToToneRow(range(12))\n>>> chromatic.pitchClasses()\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n>>> chromaticP3 = chromatic.zeroCenteredTransformation('P',3)\n>>> chromaticP3.pitchClasses()\n[3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2]\n>>> chromaticI6 = chromatic.zeroCenteredTransformation('I',6)\n>>> chromaticI6.pitchClasses()\n[6, 5, 4, 3, 2, 1, 0, 11, 10, 9, 8, 7]\n>>> schoenberg = serial.getHistoricalRowByName('SchoenbergOp26')\n>>> schoenberg.pitchClasses()\n[3, 7, 9, 11, 1, 0, 10, 2, 4, 6, 8, 5]\n>>> schoenbergR8 = schoenberg.zeroCenteredTransformation('R',8)\n>>> schoenbergR8.pitchClasses()\n[10, 1, 11, 9, 7, 3, 5, 6, 4, 2, 0, 8]\n>>> schoenbergRI9 = schoenberg.zeroCenteredTransformation('RI',9)\n>>> schoenbergRI9.noteNames()\n['G', 'E', 'F#', 'G#', 'B-', 'D', 'C', 'B', 'C#', 'E-', 'F', 'A']",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from Stream:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() __getitem__() activateVariants() addGroupForElements() allPlayingWhileSounding() analyze() append() attachIntervalsBetweenStreams() attachMelodicIntervals() augmentOrDiminish() beatAndMeasureFromOffset() chordify() clear() cloneEmpty() containerInHierarchy() elementOffset() expandRepeats() explode() extendDuration() extendTies() extractContext() findConsecutiveNotes() findGaps() first() flatten() flattenUnnecessaryVoices() getElementAfterElement() getElementAtOrBefore() getElementBeforeOffset() getElementById() getElementsByClass() getElementsByGroup() getElementsByOffset() getElementsNotOfClass() getInstrument() getInstruments() getOverlaps() getTimeSignatures() hasElement() hasElementOfClass() hasMeasures() hasPartLikeStreams() hasVoices() haveAccidentalsBeenMade() index() insert() insertAndShift() insertIntoNoteOrChord() invertDiatonic() isSequence() isTwelveTone() isWellFormedNotation() iter() last() lyrics() makeAccidentals() makeBeams() makeImmutable() makeMeasures() makeMutable() makeNotation() makeRests() makeTies() makeVoices() measure() measureOffsetMap() measures() melodicIntervals() mergeAttributes() mergeElements() metronomeMarkBoundaries() offsetMap() playingWhenAttacked() plot() pop() quantize() recurse() recurseRepr() remove() removeByClass() removeByNotOfClass() repeatAppend() repeatInsert() replace() scaleDurations() scaleOffsets() setDerivationMethod() setElementOffset() shiftElements() show() showVariantAsOssialikePart() simultaneousAttacks() sliceAtOffsets() sliceByBeat() sliceByGreatestDivisor() sliceByQuarterLengths() sort() sorted() splitAtDurations() splitAtQuarterLength() splitByClass() storeAtEnd() stripTies() template() toSoundingPitch() toWrittenPitch() transferOffsetToElements() transpose() voicesToParts() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from StreamCore:",
        "type": "NarrativeText"
    },
    {
        "text": "asTimespans() asTree() coreAppend() coreCopyAsDerivation() coreElementsChanged() coreGatherMissingSpanners() coreGetElementByMemoryLocation() coreGuardBeforeAddElement() coreHasElementByMemoryLocation() coreInsert() coreSelfActiveSite() coreSetElementOffset() coreStoreAtEnd()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "ToneRow instance variables",
        "type": "Title"
    },
    {
        "text": "ToneRow.",
        "type": "Title"
    },
    {
        "text": "row",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A list representing the pitch class values of the row.",
        "type": "ListItem"
    },
    {
        "text": "Instance variables inherited from Stream:",
        "type": "NarrativeText"
    },
    {
        "text": "autoSort definesExplicitPageBreaks definesExplicitSystemBreaks isFlat isSorted recursionType",
        "type": "Table"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "TwelveToneRow\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.serial.",
        "type": "Title"
    },
    {
        "text": "TwelveToneRow",
        "type": "Title"
    },
    {
        "text": "row",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A Stream representation of a twelve-tone row, capable of producing a 12-tone matrix.",
        "type": "ListItem"
    },
    {
        "text": "TwelveToneRow bases",
        "type": "Title"
    },
    {
        "text": "ToneRow",
        "type": "ListItem"
    },
    {
        "text": "Stream",
        "type": "ListItem"
    },
    {
        "text": "StreamCore",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "TwelveToneRow read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Stream:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength flat highestOffset highestTime isGapless lowestOffset notes notesAndRests pitches secondsMap spanners voices",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from StreamCore:",
        "type": "NarrativeText"
    },
    {
        "text": "spannerBundle",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "TwelveToneRow read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Stream:",
        "type": "NarrativeText"
    },
    {
        "text": "atSoundingPitch clef duration elements finalBarline keySignature metadata seconds staffLines timeSignature",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation editorial id offset priority quarterLength style",
        "type": "Table"
    },
    {
        "text": "TwelveToneRow methods",
        "type": "Title"
    },
    {
        "text": "TwelveToneRow.",
        "type": "Title"
    },
    {
        "text": "areCombinatorial",
        "type": "Title"
    },
    {
        "text": "transType1",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "index1",
        "type": "Title"
    },
    {
        "text": "int",
        "type": "Title"
    },
    {
        "text": "transType2",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "index2",
        "type": "Title"
    },
    {
        "text": "int",
        "type": "Title"
    },
    {
        "text": "\u2192 bool",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Describes whether two transformations of a twelve-tone row are combinatorial.\nThe first and second arguments describe one transformation, while the third and fourth\ndescribe another.\nFirst, let's take a row we know to have a combinatoriality pair:\n>>> moses = serial.getHistoricalRowByName('SchoenbergMosesAron')\n>>> moses.pitchClasses()\n[9, 10, 4, 2, 3, 1, 7, 5, 6, 8, 11, 0]\n\n\nCombinatoriality holds here between P0 and I3\n>>> moses.areCombinatorial('P', 0, 'I', 3)\nTrue\n\n\nAnd a combinatorial pair like this between P0 and I3 will also hold\nif you modify both rows in the same way, e.g.\nif you transpose both by the same amount\n>>> moses.areCombinatorial('P', 1, 'I', 4)\nTrue\n\n\nor if you retrograde both\n>>> moses.areCombinatorial('R', 1, 'RI', 4)\nTrue\n\n\nAny modification made to one row form and not the other means all bets are off\n>>> moses.areCombinatorial('R', 6, 'RI', 4)\nFalse\n\n\n\nChanged in v7: convention is no longer necessary and no longer used.\nRenamed to unused_convention and defaults None; to be removed in v8.",
        "type": "ListItem"
    },
    {
        "text": "TwelveToneRow.",
        "type": "Title"
    },
    {
        "text": "findHistorical",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Checks if a given music21.serial.TwelveToneRow is the same as\nany of the historical\ntwelve-tone rows stored by music21: see music21.serial.getHistoricalRowByName().\nReturns a list of names of historical rows to which the input row is identical.\n>>> row = serial.pcToToneRow([2, 3, 9, 1, 11, 5, 8, 7, 4, 0, 10, 6])\n>>> row.findHistorical()\n['SchoenbergOp32']\n>>> chromatic = serial.pcToToneRow(range(12))\n>>> chromatic.findHistorical()\n[]",
        "type": "ListItem"
    },
    {
        "text": "TwelveToneRow.",
        "type": "Title"
    },
    {
        "text": "findTransformedHistorical",
        "type": "Title"
    },
    {
        "text": "convention",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Checks if a given music21.serial.TwelveToneRow is a transformation of\nany historical\ntwelve-tone row stored by music21 (see music21.serial.getHistoricalRowByName()).\nReturns a list\nof tuples, the tuple consisting of the name of a historical row, and a\nlist of transformations relating\nthe input row to the historical row.\nThe convention for serial transformations must also be specified as \u0098zero' or\n\u0098original', as explained\nin findZeroCenteredTransformations() and\nfindOriginalCenteredTransformations().\n>>> row = serial.pcToToneRow([5, 9, 11, 3, 6, 7, 4, 10, 0, 8, 2, 1])\n>>> row.findTransformedHistorical('original')\n[('SchoenbergOp32', [('R', 11)])]",
        "type": "ListItem"
    },
    {
        "text": "TwelveToneRow.",
        "type": "Title"
    },
    {
        "text": "getLinkClassification",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Gives the classification number of a Link Chord\n(as given in http://www.johnlinkmusic.com/LinkChords.pdf),\nthat is, is an all-interval twelve-tone row containing a voicing of the\nall-trichord hexachord: [0, 1, 2, 4, 7, 8].\nIn addition, gives a list of sets of five contiguous intervals\nwithin the row representing a voicing\nof the all-trichord hexachord. Note that the interval sets may be transformed.\nNamed for John Link who discovered them.\n>>> bergLyric = serial.getHistoricalRowByName('BergLyricSuite')\n>>> bergLyric.pitchClasses()\n[5, 4, 0, 9, 7, 2, 8, 1, 3, 6, 10, 11]\n>>> bergLyric.isAllInterval()\nTrue\n>>> bergLyric.getLinkClassification()\n(None, [])\n>>> link = serial.pcToToneRow([0, 3, 8, 2, 10, 11, 9, 4, 1, 5, 7, 6])\n>>> link.getLinkClassification()\n(62, ['8352E'])\n>>> doubleLink = serial.pcToToneRow([0, 1, 8, 5, 7, 10, 4, 3, 11, 9, 2, 6])\n>>> doubleLink.getLinkClassification()\n(33, ['236E8', '36E8T'])",
        "type": "ListItem"
    },
    {
        "text": "TwelveToneRow.",
        "type": "Title"
    },
    {
        "text": "isAllInterval",
        "type": "Title"
    },
    {
        "text": "\u2192 bool",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Describes whether a TwelveToneRow is an all-interval row.\n>>> chromatic = serial.pcToToneRow(range(12))\n>>> chromatic.pitchClasses()\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n>>> chromatic.isAllInterval()\nFalse\n>>> bergLyric = serial.getHistoricalRowByName('BergLyricSuite')\n>>> bergLyric.pitchClasses()\n[5, 4, 0, 9, 7, 2, 8, 1, 3, 6, 10, 11]\n>>> bergLyric.isAllInterval()\nTrue",
        "type": "ListItem"
    },
    {
        "text": "TwelveToneRow.",
        "type": "Title"
    },
    {
        "text": "isLinkChord",
        "type": "Title"
    },
    {
        "text": "\u2192 bool",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Describes whether a TwelveToneRow is a Link Chord.\n>>> bergLyric = serial.getHistoricalRowByName('BergLyricSuite')\n>>> bergLyric.pitchClasses()\n[5, 4, 0, 9, 7, 2, 8, 1, 3, 6, 10, 11]\n>>> bergLyric.isAllInterval()\nTrue\n>>> bergLyric.isLinkChord()\nFalse\n>>> link = serial.pcToToneRow([0, 3, 8, 2, 10, 11, 9, 4, 1, 5, 7, 6])\n>>> link.isLinkChord()\nTrue\n>>> doubleLink = serial.pcToToneRow([0, 1, 8, 5, 7, 10, 4, 3, 11, 9, 2, 6])\n>>> doubleLink.isLinkChord()\nTrue",
        "type": "ListItem"
    },
    {
        "text": "TwelveToneRow.",
        "type": "Title"
    },
    {
        "text": "matrix",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns a TwelveToneMatrix object for the row.\nThat object can just be printed (or displayed via .show())\n>>> src = serial.getHistoricalRowByName('SchoenbergOp37')\n>>> [p.name for p in src]\n['D', 'C#', 'A', 'B-', 'F', 'E-', 'E', 'C', 'G#', 'G', 'F#', 'B']\n>>> len(src)\n12\n>>> s37 = serial.getHistoricalRowByName('SchoenbergOp37').matrix()\n>>> print(s37)\n  0  B  7  8  3  1  2  A  6  5  4  9\n  1  0  8  9  4  2  3  B  7  6  5  A\n  5  4  0  1  8  6  7  3  B  A  9  2\n  4  3  B  0  7  5  6  2  A  9  8  1\n...\n>>> [str(e.pitch) for e in s37[0]]\n['C', 'B', 'G', 'G#', 'E-', 'C#', 'D', 'B-', 'F#', 'F', 'E', 'A']",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from ToneRow:",
        "type": "NarrativeText"
    },
    {
        "text": "findOriginalCenteredTransformations() findZeroCenteredTransformations() getIntervalsAsString() isSameRow() isTwelveToneRow() makeTwelveToneRow() noteNames() originalCenteredTransformation() pitchClasses() zeroCenteredTransformation()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Stream:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() __getitem__() activateVariants() addGroupForElements() allPlayingWhileSounding() analyze() append() attachIntervalsBetweenStreams() attachMelodicIntervals() augmentOrDiminish() beatAndMeasureFromOffset() chordify() clear() cloneEmpty() containerInHierarchy() elementOffset() expandRepeats() explode() extendDuration() extendTies() extractContext() findConsecutiveNotes() findGaps() first() flatten() flattenUnnecessaryVoices() getElementAfterElement() getElementAtOrBefore() getElementBeforeOffset() getElementById() getElementsByClass() getElementsByGroup() getElementsByOffset() getElementsNotOfClass() getInstrument() getInstruments() getOverlaps() getTimeSignatures() hasElement() hasElementOfClass() hasMeasures() hasPartLikeStreams() hasVoices() haveAccidentalsBeenMade() index() insert() insertAndShift() insertIntoNoteOrChord() invertDiatonic() isSequence() isTwelveTone() isWellFormedNotation() iter() last() lyrics() makeAccidentals() makeBeams() makeImmutable() makeMeasures() makeMutable() makeNotation() makeRests() makeTies() makeVoices() measure() measureOffsetMap() measures() melodicIntervals() mergeAttributes() mergeElements() metronomeMarkBoundaries() offsetMap() playingWhenAttacked() plot() pop() quantize() recurse() recurseRepr() remove() removeByClass() removeByNotOfClass() repeatAppend() repeatInsert() replace() scaleDurations() scaleOffsets() setDerivationMethod() setElementOffset() shiftElements() show() showVariantAsOssialikePart() simultaneousAttacks() sliceAtOffsets() sliceByBeat() sliceByGreatestDivisor() sliceByQuarterLengths() sort() sorted() splitAtDurations() splitAtQuarterLength() splitByClass() storeAtEnd() stripTies() template() toSoundingPitch() toWrittenPitch() transferOffsetToElements() transpose() voicesToParts() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from StreamCore:",
        "type": "NarrativeText"
    },
    {
        "text": "asTimespans() asTree() coreAppend() coreCopyAsDerivation() coreElementsChanged() coreGatherMissingSpanners() coreGetElementByMemoryLocation() coreGuardBeforeAddElement() coreHasElementByMemoryLocation() coreInsert() coreSelfActiveSite() coreSetElementOffset() coreStoreAtEnd()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "TwelveToneRow instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from ToneRow:",
        "type": "NarrativeText"
    },
    {
        "text": "row",
        "type": "Table"
    },
    {
        "text": "Instance variables inherited from Stream:",
        "type": "NarrativeText"
    },
    {
        "text": "autoSort definesExplicitPageBreaks definesExplicitSystemBreaks isFlat isSorted recursionType",
        "type": "Table"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "HistoricalTwelveToneRow\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.serial.",
        "type": "Title"
    },
    {
        "text": "HistoricalTwelveToneRow",
        "type": "Title"
    },
    {
        "text": "composer",
        "type": "Title"
    },
    {
        "text": "None | str",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "opus",
        "type": "Title"
    },
    {
        "text": "None | str",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "title",
        "type": "Title"
    },
    {
        "text": "None | str",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "row",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Subclass of TwelveToneRow storing additional attributes of a\ntwelve-tone row used in the historical literature.",
        "type": "ListItem"
    },
    {
        "text": "HistoricalTwelveToneRow bases",
        "type": "Title"
    },
    {
        "text": "TwelveToneRow",
        "type": "ListItem"
    },
    {
        "text": "ToneRow",
        "type": "ListItem"
    },
    {
        "text": "Stream",
        "type": "ListItem"
    },
    {
        "text": "StreamCore",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "HistoricalTwelveToneRow read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Stream:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength flat highestOffset highestTime isGapless lowestOffset notes notesAndRests pitches secondsMap spanners voices",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from StreamCore:",
        "type": "NarrativeText"
    },
    {
        "text": "spannerBundle",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "HistoricalTwelveToneRow read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Stream:",
        "type": "NarrativeText"
    },
    {
        "text": "atSoundingPitch clef duration elements finalBarline keySignature metadata seconds staffLines timeSignature",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation editorial id offset priority quarterLength style",
        "type": "Table"
    },
    {
        "text": "HistoricalTwelveToneRow methods",
        "type": "Title"
    },
    {
        "text": "HistoricalTwelveToneRow.",
        "type": "Title"
    },
    {
        "text": "mergeAttributes",
        "type": "Title"
    },
    {
        "text": "other",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Merge relevant attributes from the Other stream into this one.\n>>> s = stream.Stream()\n>>> s.append(note.Note())\n>>> s.autoSort = False\n>>> s.id = 'hi'\n>>> s2 = stream.Stream()\n>>> s2.mergeAttributes(s)\n>>> s2.autoSort\nFalse\n>>> s2\n<music21.stream.Stream hi>\n>>> len(s2)\n0",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from TwelveToneRow:",
        "type": "NarrativeText"
    },
    {
        "text": "areCombinatorial() findHistorical() findTransformedHistorical() getLinkClassification() isAllInterval() isLinkChord() matrix()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ToneRow:",
        "type": "NarrativeText"
    },
    {
        "text": "findOriginalCenteredTransformations() findZeroCenteredTransformations() getIntervalsAsString() isSameRow() isTwelveToneRow() makeTwelveToneRow() noteNames() originalCenteredTransformation() pitchClasses() zeroCenteredTransformation()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Stream:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() __getitem__() activateVariants() addGroupForElements() allPlayingWhileSounding() analyze() append() attachIntervalsBetweenStreams() attachMelodicIntervals() augmentOrDiminish() beatAndMeasureFromOffset() chordify() clear() cloneEmpty() containerInHierarchy() elementOffset() expandRepeats() explode() extendDuration() extendTies() extractContext() findConsecutiveNotes() findGaps() first() flatten() flattenUnnecessaryVoices() getElementAfterElement() getElementAtOrBefore() getElementBeforeOffset() getElementById() getElementsByClass() getElementsByGroup() getElementsByOffset() getElementsNotOfClass() getInstrument() getInstruments() getOverlaps() getTimeSignatures() hasElement() hasElementOfClass() hasMeasures() hasPartLikeStreams() hasVoices() haveAccidentalsBeenMade() index() insert() insertAndShift() insertIntoNoteOrChord() invertDiatonic() isSequence() isTwelveTone() isWellFormedNotation() iter() last() lyrics() makeAccidentals() makeBeams() makeImmutable() makeMeasures() makeMutable() makeNotation() makeRests() makeTies() makeVoices() measure() measureOffsetMap() measures() melodicIntervals() mergeElements() metronomeMarkBoundaries() offsetMap() playingWhenAttacked() plot() pop() quantize() recurse() recurseRepr() remove() removeByClass() removeByNotOfClass() repeatAppend() repeatInsert() replace() scaleDurations() scaleOffsets() setDerivationMethod() setElementOffset() shiftElements() show() showVariantAsOssialikePart() simultaneousAttacks() sliceAtOffsets() sliceByBeat() sliceByGreatestDivisor() sliceByQuarterLengths() sort() sorted() splitAtDurations() splitAtQuarterLength() splitByClass() storeAtEnd() stripTies() template() toSoundingPitch() toWrittenPitch() transferOffsetToElements() transpose() voicesToParts() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from StreamCore:",
        "type": "NarrativeText"
    },
    {
        "text": "asTimespans() asTree() coreAppend() coreCopyAsDerivation() coreElementsChanged() coreGatherMissingSpanners() coreGetElementByMemoryLocation() coreGuardBeforeAddElement() coreHasElementByMemoryLocation() coreInsert() coreSelfActiveSite() coreSetElementOffset() coreStoreAtEnd()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "HistoricalTwelveToneRow instance variables",
        "type": "Title"
    },
    {
        "text": "HistoricalTwelveToneRow.",
        "type": "Title"
    },
    {
        "text": "composer",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The name of the composer, or None.  (String)",
        "type": "ListItem"
    },
    {
        "text": "HistoricalTwelveToneRow.",
        "type": "Title"
    },
    {
        "text": "opus",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The opus of the work, or None.  (String)",
        "type": "ListItem"
    },
    {
        "text": "HistoricalTwelveToneRow.",
        "type": "Title"
    },
    {
        "text": "title",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The title of the work, or None.  (String)",
        "type": "ListItem"
    },
    {
        "text": "Instance variables inherited from ToneRow:",
        "type": "NarrativeText"
    },
    {
        "text": "row",
        "type": "Table"
    },
    {
        "text": "Instance variables inherited from Stream:",
        "type": "NarrativeText"
    },
    {
        "text": "autoSort definesExplicitPageBreaks definesExplicitSystemBreaks isFlat isSorted recursionType",
        "type": "Table"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "TwelveToneMatrix\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.serial.",
        "type": "Title"
    },
    {
        "text": "TwelveToneMatrix",
        "type": "Title"
    },
    {
        "text": "givenElements",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "Music21Object",
        "type": "Title"
    },
    {
        "text": "Sequence",
        "type": "Title"
    },
    {
        "text": "Music21Object",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "givenElementsBehavior",
        "type": "Title"
    },
    {
        "text": "GivenElementsBehavior",
        "type": "Title"
    },
    {
        "text": "GivenElementsBehavior.OFFSETS",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An object representation of a 2-dimensional array of 12 pitches.\nInternal representation is as a Stream,\nwhich stores 12 Streams, each Stream a horizontal row of pitches\nin the matrix.\nThis object is commonly used by calling the\nmatrix() method of\nTwelveToneRow (or a subclass).\n>>> ttr = serial.TwelveToneRow([0, 2, 11, 7, 8, 3, 9, 1, 4, 10, 6, 5])\n>>> aMatrix = ttr.matrix()\n>>> print(aMatrix)\n  0  2  B  7  8  3  9  1  4  A  6  5\n  A  0  9  5  6  1  7  B  2  8  4  3\n  1  3  0  8  9  4  A  2  5  B  7  6\n  5  7  4  0  1  8  2  6  9  3  B  A\n  4  6  3  B  0  7  1  5  8  2  A  9\n  9  B  8  4  5  0  6  A  1  7  3  2\n  3  5  2  A  B  6  0  4  7  1  9  8\n  B  1  A  6  7  2  8  0  3  9  5  4\n  8  A  7  3  4  B  5  9  0  6  2  1\n  2  4  1  9  A  5  B  3  6  0  8  7\n  6  8  5  1  2  9  3  7  A  4  0  B\n  7  9  6  2  3  A  4  8  B  5  1  0\n\n\n>>> repr(aMatrix)\n'<music21.serial.TwelveToneMatrix for [<music21.serial.TwelveToneRow row-1>]>'\n\n\n>>> fourthQuartetMatrix = serial.getHistoricalRowByName('SchoenbergOp37').matrix()\n>>> repr(fourthQuartetMatrix)\n'<music21.serial.TwelveToneMatrix for\n     [<music21.serial.HistoricalTwelveToneRow Schoenberg Op. 37 Fourth String Quartet>]>'",
        "type": "ListItem"
    },
    {
        "text": "TwelveToneMatrix bases",
        "type": "Title"
    },
    {
        "text": "Stream",
        "type": "ListItem"
    },
    {
        "text": "StreamCore",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "TwelveToneMatrix read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Stream:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength flat highestOffset highestTime isGapless lowestOffset notes notesAndRests pitches secondsMap spanners voices",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from StreamCore:",
        "type": "NarrativeText"
    },
    {
        "text": "spannerBundle",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "TwelveToneMatrix read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Stream:",
        "type": "NarrativeText"
    },
    {
        "text": "atSoundingPitch clef duration elements finalBarline keySignature metadata seconds staffLines timeSignature",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation editorial id offset priority quarterLength style",
        "type": "Table"
    },
    {
        "text": "TwelveToneMatrix methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from Stream:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() __getitem__() activateVariants() addGroupForElements() allPlayingWhileSounding() analyze() append() attachIntervalsBetweenStreams() attachMelodicIntervals() augmentOrDiminish() beatAndMeasureFromOffset() chordify() clear() cloneEmpty() containerInHierarchy() elementOffset() expandRepeats() explode() extendDuration() extendTies() extractContext() findConsecutiveNotes() findGaps() first() flatten() flattenUnnecessaryVoices() getElementAfterElement() getElementAtOrBefore() getElementBeforeOffset() getElementById() getElementsByClass() getElementsByGroup() getElementsByOffset() getElementsNotOfClass() getInstrument() getInstruments() getOverlaps() getTimeSignatures() hasElement() hasElementOfClass() hasMeasures() hasPartLikeStreams() hasVoices() haveAccidentalsBeenMade() index() insert() insertAndShift() insertIntoNoteOrChord() invertDiatonic() isSequence() isTwelveTone() isWellFormedNotation() iter() last() lyrics() makeAccidentals() makeBeams() makeImmutable() makeMeasures() makeMutable() makeNotation() makeRests() makeTies() makeVoices() measure() measureOffsetMap() measures() melodicIntervals() mergeAttributes() mergeElements() metronomeMarkBoundaries() offsetMap() playingWhenAttacked() plot() pop() quantize() recurse() recurseRepr() remove() removeByClass() removeByNotOfClass() repeatAppend() repeatInsert() replace() scaleDurations() scaleOffsets() setDerivationMethod() setElementOffset() shiftElements() show() showVariantAsOssialikePart() simultaneousAttacks() sliceAtOffsets() sliceByBeat() sliceByGreatestDivisor() sliceByQuarterLengths() sort() sorted() splitAtDurations() splitAtQuarterLength() splitByClass() storeAtEnd() stripTies() template() toSoundingPitch() toWrittenPitch() transferOffsetToElements() transpose() voicesToParts() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from StreamCore:",
        "type": "NarrativeText"
    },
    {
        "text": "asTimespans() asTree() coreAppend() coreCopyAsDerivation() coreElementsChanged() coreGatherMissingSpanners() coreGetElementByMemoryLocation() coreGuardBeforeAddElement() coreHasElementByMemoryLocation() coreInsert() coreSelfActiveSite() coreSetElementOffset() coreStoreAtEnd()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "TwelveToneMatrix instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Stream:",
        "type": "NarrativeText"
    },
    {
        "text": "autoSort definesExplicitPageBreaks definesExplicitSystemBreaks isFlat isSorted recursionType",
        "type": "Table"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "Functions\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "music21.serial.",
        "type": "Title"
    },
    {
        "text": "pcToToneRow",
        "type": "Title"
    },
    {
        "text": "pcSet",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A convenience function that, given a list of pitch classes represented as integers\nand turns it in to a ToneRow object.\n>>> chromaticRow = serial.pcToToneRow([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n>>> chromaticRow.show('text')\n{0.0} <music21.note.Note C>\n{1.0} <music21.note.Note C#>\n{2.0} <music21.note.Note D>\n{3.0} <music21.note.Note E->\n{4.0} <music21.note.Note E>\n{5.0} <music21.note.Note F>\n{6.0} <music21.note.Note F#>\n{7.0} <music21.note.Note G>\n{8.0} <music21.note.Note G#>\n{9.0} <music21.note.Note A>\n{10.0} <music21.note.Note B->\n{11.0} <music21.note.Note B>\n>>> matrixObj = chromaticRow.matrix()\n>>> print(matrixObj)\n  0  1  2  3  4  5  6  7  8  9  A  B\n  B  0  1  2  3  4  5  6  7  8  9  A\n...\n\n\n>>> fancyRow = serial.pcToToneRow([4, 5, 0, 6, 7, 2, 'a', 8, 9, 1, 'b', 3])\n>>> matrixObj = fancyRow.matrix()\n>>> print(matrixObj)\n  0  1  8  2  3  A  6  4  5  9  7  B\n  B  0  7  1  2  9  5  3  4  8  6  A\n...\n\n\nNote that the Row does not have to be a valid row to exist:\n>>> multiSetRow = serial.pcToToneRow([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n>>> multiSetRow.pitchClasses()\n[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\nOr even have 12 notes:\n>>> shortRow = serial.pcToToneRow([3, 4])\n>>> shortRow.pitchClasses()\n[3, 4]\n\n\nIf the row does have twelve notes (whether unique or not) the object returned\nis a TwelveToneRow:\n>>> multiSetRow\n<music21.serial.TwelveToneRow 111111111111>\n\n\nOtherwise, it is simply a ToneRow:\n>>> shortRow\n<music21.serial.ToneRow 34>",
        "type": "ListItem"
    },
    {
        "text": "music21.serial.",
        "type": "Title"
    },
    {
        "text": "rowToMatrix",
        "type": "Title"
    },
    {
        "text": "list[int]",
        "type": "NarrativeText"
    },
    {
        "text": "\u2192 str",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Takes a list of numbers of converts it to a string representation of a\n12-tone matrix.\n>>> aMatrix = serial.rowToMatrix([0, 2, 11, 7, 8, 3, 9, 1, 4, 10, 6, 5])\n>>> print(aMatrix)\n  0  2 11  7  8  3  9  1  4 10  6  5\n 10  0  9  5  6  1  7 11  2  8  4  3\n  1  3  0  8  9  4 10  2  5 11  7  6\n  5  7  4  0  1  8  2  6  9  3 11 10\n  4  6  3 11  0  7  1  5  8  2 10  9\n  9 11  8  4  5  0  6 10  1  7  3  2\n  3  5  2 10 11  6  0  4  7  1  9  8\n 11  1 10  6  7  2  8  0  3  9  5  4\n  8 10  7  3  4 11  5  9  0  6  2  1\n  2  4  1  9 10  5 11  3  6  0  8  7\n  6  8  5  1  2  9  3  7 10  4  0 11\n  7  9  6  2  3 10  4  8 11  5  1  0\n\n\nThis function survives today (2020) because it's been\nan example function for music21 since the very first demonstrations\nof predecessors from around 2000 onwards.  Nowadays, better to create\na TwelveToneRow() object and then get a matrix from that:\n>>> ttr = serial.TwelveToneRow([0, 2, 11, 7, 8, 3, 9, 1, 4, 10, 6, 5])\n>>> matrix = ttr.matrix()\n>>> print(matrix)\n  0  2  B  7  8  3  9  1  4  A  6  5\n  A  0  9  5  6  1  7  B  2  8  4  3\n  1  3  0  8  9  4  A  2  5  B  7  6\n  5  7  4  0  1  8  2  6  9  3  B  A\n  4  6  3  B  0  7  1  5  8  2  A  9\n  9  B  8  4  5  0  6  A  1  7  3  2\n  3  5  2  A  B  6  0  4  7  1  9  8\n  B  1  A  6  7  2  8  0  3  9  5  4\n  8  A  7  3  4  B  5  9  0  6  2  1\n  2  4  1  9  A  5  B  3  6  0  8  7\n  6  8  5  1  2  9  3  7  A  4  0  B\n  7  9  6  2  3  A  4  8  B  5  1  0",
        "type": "ListItem"
    },
    {
        "text": "music21.serial.",
        "type": "Title"
    },
    {
        "text": "getHistoricalRowByName",
        "type": "Title"
    },
    {
        "text": "rowName",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given the name referring to a twelve-tone row used in the historical literature,\nreturns a HistoricalTwelveToneRow object with attributes\ndescribing the row.\nThe names of the rows with stored attributes are below (each must be passed as a string,\nin single quotes).\n>>> for r in sorted(list(serial.historicalDict)):\n...     print(r)\nBergChamberConcerto\nBergDerWein\nBergLulu\nBergLuluActIIScene1\nBergLuluActIScene20\nBergLyricSuite\nBergLyricSuitePerm\nBergViolinConcerto\nBergWozzeckPassacaglia\nSchoenbergFragOrganSonata\nSchoenbergFragPiano\nSchoenbergFragPianoPhantasia\nSchoenbergIsraelExists\nSchoenbergJakobsleiter\nSchoenbergMosesAron\nSchoenbergOp23No5\nSchoenbergOp24Mvmt4\nSchoenbergOp24Mvmt5\nSchoenbergOp25\nSchoenbergOp26\nSchoenbergOp27No1\nSchoenbergOp27No2\nSchoenbergOp27No3\nSchoenbergOp27No4\nSchoenbergOp28No1\nSchoenbergOp28No3\nSchoenbergOp29\nSchoenbergOp30\nSchoenbergOp31\nSchoenbergOp32\nSchoenbergOp33A\nSchoenbergOp33B\nSchoenbergOp34\nSchoenbergOp35No1\nSchoenbergOp35No2\nSchoenbergOp35No3\nSchoenbergOp35No5\nSchoenbergOp36\nSchoenbergOp37\nSchoenbergOp41\nSchoenbergOp42\nSchoenbergOp44\nSchoenbergOp45\nSchoenbergOp46\nSchoenbergOp47\nSchoenbergOp48No1\nSchoenbergOp48No2\nSchoenbergOp48No3\nSchoenbergOp50A\nSchoenbergOp50B\nSchoenbergOp50C\nWebernOp17No2\nWebernOp17No3\nWebernOp18No1\nWebernOp18No2\nWebernOp18No3\nWebernOp19No1\nWebernOp19No2\nWebernOp20\nWebernOp21\nWebernOp22\nWebernOp23\nWebernOp24\nWebernOp25\nWebernOp26\nWebernOp27\nWebernOp28\nWebernOp29\nWebernOp30\nWebernOp31\nWebernOpNo17No1\n\n\n>>> web = serial.getHistoricalRowByName('WebernOp29')\n>>> web.row\n[3, 11, 2, 1, 5, 4, 7, 6, 10, 9, 0, 8]\n>>> web.composer\n'Webern'\n>>> web.opus\n'Op. 29'\n>>> web.title\n'Cantata I'\n>>> web.isLinkChord()\nFalse\n\n\nNOTE: before v6, these rows had \u0098Row' in front of them,\nlike \u0098RowWebernOp29' instead of \u0098WebernOp29'.  They can still be accessed\nby the old name.\n>>> rowWeb = serial.getHistoricalRowByName('RowWebernOp29')\n>>> rowWeb.row == web.row\nTrue",
        "type": "ListItem"
    },
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.serial",
        "type": "ListItem"
    },
    {
        "text": "\u00a9 Copyright 2006-2023 Michael Scott Asato Cuthbert.\n      Last updated on Jun 12, 2023.",
        "type": "NarrativeText"
    }
]