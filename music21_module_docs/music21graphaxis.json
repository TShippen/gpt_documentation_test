[
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.graph.axis",
        "type": "ListItem"
    },
    {
        "text": "Previous topic",
        "type": "Title"
    },
    {
        "text": "music21.graph",
        "type": "Title"
    },
    {
        "text": "Next topic",
        "type": "Title"
    },
    {
        "text": "music21.graph.findPlot",
        "type": "Title"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "music21.graph.axis\nAxis\nAxis\nAxis.stream\nAxis.client\nAxis.label\nAxis.extractOneElement()\nAxis.postProcessData()\nAxis.setBoundariesFromData()\nAxis.ticks()\nAxis.axisDataMap\nAxis.axisName\nAxis.maxValue\nAxis.minValue\nAxis.quantities\n\n\n\n\nCountingAxis\nCountingAxis\nCountingAxis.postProcessData()\nCountingAxis.countAxes\n\n\n\n\nDynamicsAxis\nDynamicsAxis\nDynamicsAxis.setBoundariesFromData()\nDynamicsAxis.ticks()\n\n\n\n\nOffsetAxis\nOffsetAxis\nOffsetAxis.label\nOffsetAxis.extractOneElement()\nOffsetAxis.getOffsetMap()\nOffsetAxis.setBoundariesFromData()\nOffsetAxis.setUseMeasuresFromOffsetMap()\nOffsetAxis.ticks()\nOffsetAxis.maxValue\nOffsetAxis.minMaxMeasureOnly\nOffsetAxis.minValue\nOffsetAxis.mostMeasureTicksToShow\nOffsetAxis.offsetStepSize\nOffsetAxis.useMeasures\n\n\n\n\nOffsetEndAxis\nOffsetEndAxis\nOffsetEndAxis.extractOneElement()\nOffsetEndAxis.noteSpacing\n\n\n\n\nPitchAxis\nPitchAxis\nPitchAxis.makePitchLabelsUnicode()\nPitchAxis.blankLabelUnused\nPitchAxis.hideUnused\nPitchAxis.showEnharmonic\nPitchAxis.showOctaves\n\n\n\n\nPitchClassAxis\nPitchClassAxis\nPitchClassAxis.extractOneElement()\nPitchClassAxis.ticks()\n\n\n\n\nPitchSpaceAxis\nPitchSpaceAxis\nPitchSpaceAxis.extractOneElement()\nPitchSpaceAxis.ticks()\n\n\n\n\nPitchSpaceOctaveAxis\nPitchSpaceOctaveAxis\nPitchSpaceOctaveAxis.ticks()\n\n\n\n\nPositionAxis\nPositionAxis\nPositionAxis.graceNoteQL\n\n\n\n\nQuarterLengthAxis\nQuarterLengthAxis\nQuarterLengthAxis.label\nQuarterLengthAxis.dataFromQL()\nQuarterLengthAxis.extractOneElement()\nQuarterLengthAxis.labelLogTag()\nQuarterLengthAxis.remapQuarterLength()\nQuarterLengthAxis.ticks()\nQuarterLengthAxis.useDurationNames\nQuarterLengthAxis.useLogScale",
        "type": "ListItem"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "About music21",
        "type": "ListItem"
    },
    {
        "text": "User's Guide",
        "type": "ListItem"
    },
    {
        "text": "Module Reference",
        "type": "ListItem"
    },
    {
        "text": "Installation",
        "type": "ListItem"
    },
    {
        "text": "Developer Reference",
        "type": "ListItem"
    },
    {
        "text": "Documentation and tests in progress",
        "type": "ListItem"
    },
    {
        "text": "Quick search",
        "type": "Title"
    },
    {
        "text": "This Page",
        "type": "Title"
    },
    {
        "text": "Show Source",
        "type": "ListItem"
    },
    {
        "text": "music21.graph.axis\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "Definitions for extracting data from a Stream to place on one axis of a\nPlotStream or similar object.",
        "type": "NarrativeText"
    },
    {
        "text": "Axis\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.graph.axis.",
        "type": "Title"
    },
    {
        "text": "Axis",
        "type": "Title"
    },
    {
        "text": "client",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "axisName",
        "type": "Title"
    },
    {
        "text": "'x'",
        "type": "UncategorizedText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An Axis is an easier way of specifying what to plot on any given axis.\nClient should be a .plot.PlotStream or None.  Eventually a Stream may be allowed,\nbut not yet.",
        "type": "ListItem"
    },
    {
        "text": "Axis bases",
        "type": "Title"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "Axis read-only properties",
        "type": "Title"
    },
    {
        "text": "Axis.",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns a reference to the client's .streamObj  (or None if client is None)\nIf the client is itself a stream, return it.\nRead-only",
        "type": "ListItem"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "Axis read/write properties",
        "type": "Title"
    },
    {
        "text": "Axis.",
        "type": "Title"
    },
    {
        "text": "client",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The client stores a reference to the Plot that\nmakes reference to this axis.\n(Like all music21 clients, It is normally stored internally as a weakref,\nso no need for garbage collecting)",
        "type": "ListItem"
    },
    {
        "text": "Axis.",
        "type": "Title"
    },
    {
        "text": "label",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns self.label or class.labelDefault if not set:\n>>> ax = graph.axis.Axis(axisName='y')\n>>> ax.label\n'an axis'\n>>> ax.label = 'velocity'\n>>> ax.label\n'velocity'",
        "type": "ListItem"
    },
    {
        "text": "Axis methods",
        "type": "Title"
    },
    {
        "text": "Axis.",
        "type": "Title"
    },
    {
        "text": "extractOneElement",
        "type": "Title"
    },
    {
        "text": "formatDict",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Override in subclasses\u2026",
        "type": "ListItem"
    },
    {
        "text": "Axis.",
        "type": "Title"
    },
    {
        "text": "postProcessData",
        "type": "Title"
    },
    {
        "text": "dataList",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Routine to be called after data has been extracted to\ndo any cleanup, etc.  Defaults to doing nothing, but\nsee CountingAxis for an example of how this works.",
        "type": "ListItem"
    },
    {
        "text": "Axis.",
        "type": "Title"
    },
    {
        "text": "setBoundariesFromData",
        "type": "Title"
    },
    {
        "text": "values",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "If self.minValue is not set,\nthen set self.minValue to be the minimum of these values.\nSame with maxValue\n>>> ax = graph.axis.Axis()\n>>> print(ax.minValue)\nNone\n\n\n>>> values = [10, 0, 3, 5]\n>>> ax.setBoundariesFromData(values)\n>>> ax.minValue\n0\n>>> ax.maxValue\n10\n\n\nIf a boundary is given or .setXXXFromData is False then no changes are made\n>>> ax = graph.axis.Axis()\n>>> ax.minValue = -1\n>>> ax.setBoundariesFromData(values)\n>>> ax.minValue\n-1\n>>> ax.maxValue\n10",
        "type": "ListItem"
    },
    {
        "text": "Axis.",
        "type": "Title"
    },
    {
        "text": "ticks",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get a set of ticks for this data.  Used by several numeric axes\nto make a reasonable number of ticks.\n>>> cax = graph.axis.Axis()\n>>> cax.minValue = 1\n>>> cax.maxValue = 9\n>>> cax.ticks()\n[(0, '0'), (1, '1'), (2, '2'), (3, '3'), (4, '4'),\n (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10')]\n\n\nFor larger data, the ticks are farther apart.\n>>> cax.minValue = 7\n>>> cax.maxValue = 80\n>>> cax.ticks()\n[(0, '0'), (10, '10'), (20, '20'), (30, '30'), (40, '40'),\n (50, '50'), (60, '60'), (70, '70'), (80, '80'), (90, '90')]\n\n\n>>> cax.minValue = 712\n>>> cax.maxValue = 2213\n>>> cax.ticks()\n[(600, '600'), (700, '700'), (800, '800'), (900, '900'), (1000, '1000'),\n ...\n (2100, '2100'), (2200, '2200'), (2300, '2300')]",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "Axis instance variables",
        "type": "Title"
    },
    {
        "text": "Axis.",
        "type": "Title"
    },
    {
        "text": "axisDataMap",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "a dict of {\u0098x': 0, \u0098y': 1, \u0098z': 2} mapping where an axis's data can\nbe found in self.client.data after extract data is run:\n>>> b = corpus.parse('bwv66.6')\n>>> plot = graph.plot.ScatterPitchClassOffset(b)\n>>> pcAxis = plot.axisY\n>>> pcAxis.axisName\n'y'\n>>> pcAxisDataIndex = pcAxis.axisDataMap[pcAxis.axisName]\n>>> pcAxisDataIndex\n1\n>>> plot.extractData()\n>>> pcValues = [dataTuple[pcAxisDataIndex] for dataTuple in plot.data]\n>>> pcValues[0:2]\n[1, 11]",
        "type": "ListItem"
    },
    {
        "text": "Axis.",
        "type": "Title"
    },
    {
        "text": "axisName",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "the name of the axis.  One of \u009cx\u009d or \u009cy\u009d or for 3D Plots, \u009cz\u009d",
        "type": "ListItem"
    },
    {
        "text": "Axis.",
        "type": "Title"
    },
    {
        "text": "maxValue",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "None or number representing the axis maximum.  Default None.",
        "type": "ListItem"
    },
    {
        "text": "Axis.",
        "type": "Title"
    },
    {
        "text": "minValue",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "None or number representing the axis minimum.  Default None.",
        "type": "ListItem"
    },
    {
        "text": "Axis.",
        "type": "Title"
    },
    {
        "text": "quantities",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "a tuple of strings representing the quantities the axis can plot.\nThe first element of the tuple is the authoritative name.\n>>> ax = graph.axis.DynamicsAxis()\n>>> ax.quantities\n('dynamic', 'dynamics', 'volume')",
        "type": "ListItem"
    },
    {
        "text": "CountingAxis\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.graph.axis.",
        "type": "Title"
    },
    {
        "text": "CountingAxis",
        "type": "Title"
    },
    {
        "text": "client",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "axisName",
        "type": "Title"
    },
    {
        "text": "'y'",
        "type": "UncategorizedText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Axis subclass for counting data in another Axis.\nUsed for histograms, weighted scatter, etc.\n>>> bach = corpus.parse('bwv66.6')\n>>> plotS = graph.plot.PlotStream(bach)\n>>> plotS.axisX = graph.axis.PitchSpaceAxis(plotS, 'x')\n>>> plotS.axisY = graph.axis.CountingAxis(plotS)\n>>> plotS.doneAction = None\n>>> plotS.run()\n>>> plotS.data\n[(42.0, 1, {}), (45.0, 1, {}), (46.0, 1, {}), (47.0, 5, {}), (49.0, 6, {}), ...]",
        "type": "ListItem"
    },
    {
        "text": "CountingAxis bases",
        "type": "Title"
    },
    {
        "text": "Axis",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "CountingAxis read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "stream",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "CountingAxis read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "client label",
        "type": "Table"
    },
    {
        "text": "CountingAxis methods",
        "type": "Title"
    },
    {
        "text": "CountingAxis.",
        "type": "Title"
    },
    {
        "text": "postProcessData",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Replace client.data with a list that only includes each key once.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "extractOneElement() setBoundariesFromData() ticks()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "CountingAxis instance variables",
        "type": "Title"
    },
    {
        "text": "CountingAxis.",
        "type": "Title"
    },
    {
        "text": "countAxes",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "a string or tuple of strings representing an axis or axes to use in counting",
        "type": "ListItem"
    },
    {
        "text": "Instance variables inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "axisDataMap axisName maxValue minValue quantities",
        "type": "Table"
    },
    {
        "text": "DynamicsAxis\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.graph.axis.",
        "type": "Title"
    },
    {
        "text": "DynamicsAxis",
        "type": "Title"
    },
    {
        "text": "client",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "axisName",
        "type": "Title"
    },
    {
        "text": "'x'",
        "type": "UncategorizedText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Axis subclass for dealing with Dynamics",
        "type": "ListItem"
    },
    {
        "text": "DynamicsAxis bases",
        "type": "Title"
    },
    {
        "text": "Axis",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "DynamicsAxis read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "stream",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "DynamicsAxis read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "client label",
        "type": "Table"
    },
    {
        "text": "DynamicsAxis methods",
        "type": "Title"
    },
    {
        "text": "DynamicsAxis.",
        "type": "Title"
    },
    {
        "text": "setBoundariesFromData",
        "type": "Title"
    },
    {
        "text": "values",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "If self.minValue is not set,\nthen set self.minValue to be the minimum of these values.\nSame with maxValue\n>>> ax = graph.axis.Axis()\n>>> print(ax.minValue)\nNone\n\n\n>>> values = [10, 0, 3, 5]\n>>> ax.setBoundariesFromData(values)\n>>> ax.minValue\n0\n>>> ax.maxValue\n10\n\n\nIf a boundary is given or .setXXXFromData is False then no changes are made\n>>> ax = graph.axis.Axis()\n>>> ax.minValue = -1\n>>> ax.setBoundariesFromData(values)\n>>> ax.minValue\n-1\n>>> ax.maxValue\n10",
        "type": "ListItem"
    },
    {
        "text": "DynamicsAxis.",
        "type": "Title"
    },
    {
        "text": "ticks",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Utility method to get ticks in dynamic values:\n>>> ax = graph.axis.DynamicsAxis()\n>>> ax.ticks()\n[(0, '$pppppp$'), (1, '$ppppp$'), (2, '$pppp$'), (3, '$ppp$'), (4, '$pp$'),\n (5, '$p$'), (6, '$mp$'), (7, '$mf$'), (8, '$f$'), (9, '$fp$'), (10, '$sf$'),\n (11, '$ff$'), (12, '$fff$'), (13, '$ffff$'), (14, '$fffff$'), (15, '$ffffff$')]\n\n\nA minimum and maximum dynamic index can be specified as minValue and maxValue\n>>> ax.minValue = 3\n>>> ax.maxValue = 6\n>>> ax.ticks()\n[(3, '$ppp$'), (4, '$pp$'), (5, '$p$'), (6, '$mp$')]",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "extractOneElement() postProcessData()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "DynamicsAxis instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "axisDataMap axisName maxValue minValue quantities",
        "type": "Table"
    },
    {
        "text": "OffsetAxis\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.graph.axis.",
        "type": "Title"
    },
    {
        "text": "OffsetAxis",
        "type": "Title"
    },
    {
        "text": "client",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "axisName",
        "type": "Title"
    },
    {
        "text": "'x'",
        "type": "UncategorizedText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Axis subclass for dealing with Offsets",
        "type": "ListItem"
    },
    {
        "text": "OffsetAxis bases",
        "type": "Title"
    },
    {
        "text": "PositionAxis",
        "type": "ListItem"
    },
    {
        "text": "Axis",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "OffsetAxis read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "stream",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "OffsetAxis read/write properties",
        "type": "Title"
    },
    {
        "text": "OffsetAxis.",
        "type": "Title"
    },
    {
        "text": "label",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return an axis label for measure or offset, depending on if measures are available.\n>>> a = graph.axis.OffsetAxis()\n>>> a.label\n'Offset'\n>>> a.useMeasures = True\n>>> a.label\n'Measure Number'",
        "type": "ListItem"
    },
    {
        "text": "Read/write properties inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "client",
        "type": "Table"
    },
    {
        "text": "OffsetAxis methods",
        "type": "Title"
    },
    {
        "text": "OffsetAxis.",
        "type": "Title"
    },
    {
        "text": "extractOneElement",
        "type": "Title"
    },
    {
        "text": "formatDict",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Override in subclasses\u2026",
        "type": "ListItem"
    },
    {
        "text": "OffsetAxis.",
        "type": "Title"
    },
    {
        "text": "getOffsetMap",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Find the first partlike object and get the measureOffsetMap from it, or an\nempty-dict if not.\n>>> b = corpus.parse('bwv66.6')\n>>> p = graph.plot.PlotStream(b)\n>>> ax = graph.axis.OffsetAxis(p, 'x')\n>>> om = ax.getOffsetMap()\n>>> om\nOrderedDict([(0.0, [<music21.stream.Measure 0 offset=0.0>]),\n             (1.0, [<music21.stream.Measure 1 offset=1.0>]),\n             (5.0, [<music21.stream.Measure 2 offset=5.0>]),\n             ...])\n\n\nSame if called on a single part:\n>>> p = graph.plot.PlotStream(b.parts[0])\n>>> ax = graph.axis.OffsetAxis(p, 'x')\n>>> om2 = ax.getOffsetMap()\n>>> om2\nOrderedDict([(0.0, [<music21.stream.Measure 0 offset=0.0>]),\n             (1.0, [<music21.stream.Measure 1 offset=1.0>]),\n             (5.0, [<music21.stream.Measure 2 offset=5.0>]),\n             ...])\n\n\nBut empty if called on a single Measure \u2026\n>>> p = graph.plot.PlotStream(b.parts[0].getElementsByClass(stream.Measure)[2])\n>>> ax = graph.axis.OffsetAxis(p, 'x')\n>>> om3 = ax.getOffsetMap()\n>>> om3\n{}",
        "type": "ListItem"
    },
    {
        "text": "OffsetAxis.",
        "type": "Title"
    },
    {
        "text": "setBoundariesFromData",
        "type": "Title"
    },
    {
        "text": "values",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "If self.minValue is not set,\nthen set self.minValue to be the minimum of these values.\nSame with maxValue\n>>> ax = graph.axis.Axis()\n>>> print(ax.minValue)\nNone\n\n\n>>> values = [10, 0, 3, 5]\n>>> ax.setBoundariesFromData(values)\n>>> ax.minValue\n0\n>>> ax.maxValue\n10\n\n\nIf a boundary is given or .setXXXFromData is False then no changes are made\n>>> ax = graph.axis.Axis()\n>>> ax.minValue = -1\n>>> ax.setBoundariesFromData(values)\n>>> ax.minValue\n-1\n>>> ax.maxValue\n10",
        "type": "ListItem"
    },
    {
        "text": "OffsetAxis.",
        "type": "Title"
    },
    {
        "text": "setUseMeasuresFromOffsetMap",
        "type": "Title"
    },
    {
        "text": "offsetMap",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given an offsetMap and .useMeasures=None return\nTrue or False based on whether the offsetMap or self.getOffsetMap() is\nnon-empty.\n>>> b = corpus.parse('bwv66.6')\n>>> p = graph.plot.PlotStream(b)\n>>> ax = graph.axis.OffsetAxis(p, 'x')\n>>> print(ax.useMeasures)\nNone\n>>> ax.setUseMeasuresFromOffsetMap()\nTrue\n\n\nSets .useMeasures as a side effect:\n>>> ax.useMeasures\nTrue\n\n\nsame as:\n>>> ax = graph.axis.OffsetAxis(p, 'x')\n>>> om = ax.getOffsetMap()\n>>> ax.setUseMeasuresFromOffsetMap(om)\nTrue\n\n\nIf .useMeasures is set explicitly, then\nwe return that\n>>> ax.useMeasures = False\n>>> ax.setUseMeasuresFromOffsetMap()\nFalse\n\n\nReturns False if the offsetMap is empty\n>>> p = graph.plot.PlotStream(b.parts[0].getElementsByClass(stream.Measure)[2])\n>>> axMeasure = graph.axis.OffsetAxis(p, 'x')\n>>> axMeasure.setUseMeasuresFromOffsetMap()\nFalse\n>>> axMeasure.useMeasures\nFalse",
        "type": "ListItem"
    },
    {
        "text": "OffsetAxis.",
        "type": "Title"
    },
    {
        "text": "ticks",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get offset or measure ticks\n>>> bach = corpus.parse('bach/bwv281.xml')\n>>> plotS = graph.plot.PlotStream(bach)\n>>> ax = graph.axis.OffsetAxis(plotS)\n>>> ax.setBoundariesFromData()\n>>> ax.ticks()  # on whole score, showing anacrusis spacing\n[(0.0, '0'), (1.0, '1'), (5.0, '2'), (9.0, '3'), (13.0, '4'), (17.0, '5'),\n (21.0, '6'), (25.0, '7'), (29.0, '8')]\n\n\nWe can reduce the number of ticks shown:\n>>> ax.mostMeasureTicksToShow = 4\n>>> ax.ticks()\n[(0.0, '0'), (9.0, '3'), (21.0, '6'), (29.0, '8')]\n\n\nWe can also plot on a part:\n>>> soprano = bach.parts.first()\n>>> plotSoprano = graph.plot.PlotStream(soprano)\n>>> ax = graph.axis.OffsetAxis(plotSoprano)\n>>> ax.setBoundariesFromData()\n>>> ax.ticks()  # on whole score, showing anacrusis spacing\n[(0.0, '0'), (1.0, '1'), (5.0, '2'), (9.0, '3'), (13.0, '4'), (17.0, '5'),\n (21.0, '6'), (25.0, '7'), (29.0, '8')]\n\n\nNow we will show just the first and last measure:\n>>> ax.minMaxMeasureOnly = True\n>>> ax.ticks()\n[(0.0, '0'), (29.0, '8')]\n\n\nOnly show ticks between minValue and maxValue (in offsets):\n>>> ax.minMaxMeasureOnly = False\n>>> ax.minValue = 8\n>>> ax.maxValue = 12\n>>> ax.ticks()\n[(9.0, '3')]\n\n\nDouble bars and other heavy bars always show up.\n(Let's get a new axis object to see.)\n>>> ax = graph.axis.OffsetAxis(plotSoprano)\n>>> ax.setBoundariesFromData()\n>>> ax.mostMeasureTicksToShow = 4\n>>> ax.ticks()\n[(0.0, '0'), (9.0, '3'), (21.0, '6'), (29.0, '8')]\n>>> m5 = soprano.getElementsByClass(stream.Measure)[5]\n>>> m5.number\n5\n>>> m5.rightBarline = bar.Barline('double')\n>>> ax.ticks()\n[(0.0, '0'), (13.0, '4'), (17.0, '5'), (29.0, '8')]\n\n\nFuture improvements might make the spacing around the double bars\na bit better.  It'd be nice to see measure 2 or 3 ticked rather\nthan measure 4.\nOn a raw collection of notes with no measures, offsets are used:\n>>> n = note.Note('a')\n>>> s = stream.Stream()\n>>> s.repeatAppend(n, 20)\n>>> plotS = graph.plot.PlotStream(s)\n>>> ax = graph.axis.OffsetAxis(plotS)\n>>> ax.setBoundariesFromData()\n>>> ax.ticks()\n[(0, '0'), (10, '10'), (20, '20')]\n\n\nThe space between offsets is configured by .offsetStepSize.  At\npresent mostMeasureTicksToShow to does affect streams without measures.\n>>> ax.offsetStepSize = 5\n>>> ax.ticks()\n[(0, '0'), (5, '5'), (10, '10'), (15, '15'), (20, '20')]",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "postProcessData()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "OffsetAxis instance variables",
        "type": "Title"
    },
    {
        "text": "OffsetAxis.",
        "type": "Title"
    },
    {
        "text": "maxValue",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The highest ending position (as an offset).  Will be set automatically.",
        "type": "ListItem"
    },
    {
        "text": "OffsetAxis.",
        "type": "Title"
    },
    {
        "text": "minMaxMeasureOnly",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "If True then only the first and last values will be used to\ncreate ticks for measures.  Default False.",
        "type": "ListItem"
    },
    {
        "text": "OffsetAxis.",
        "type": "Title"
    },
    {
        "text": "minValue",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The lowest starting position (as an offset).  Will be set automatically.",
        "type": "ListItem"
    },
    {
        "text": "OffsetAxis.",
        "type": "Title"
    },
    {
        "text": "mostMeasureTicksToShow",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "When plotting measures, will limit the number of ticks given to at most\nthis number.  Note that since all double/final/heavy bars are show, this number\nmay be exceeded if there are more that this number of double bars.  Default: 20.",
        "type": "ListItem"
    },
    {
        "text": "OffsetAxis.",
        "type": "Title"
    },
    {
        "text": "offsetStepSize",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "If measures are not used then this number is used to create the number\nof steps between an axis tick.  Currently the default is 10, but it\nmight become a function of the length of the stream eventually.",
        "type": "ListItem"
    },
    {
        "text": "OffsetAxis.",
        "type": "Title"
    },
    {
        "text": "useMeasures",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "bool or None for whether offsets (False) or measure numbers (True) should be used\nin the case of an offset access.  Default, None, meaning to check whether\nthe stream has measures first.",
        "type": "ListItem"
    },
    {
        "text": "Instance variables inherited from PositionAxis:",
        "type": "NarrativeText"
    },
    {
        "text": "graceNoteQL",
        "type": "Table"
    },
    {
        "text": "Instance variables inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "axisDataMap axisName maxValue minValue quantities",
        "type": "Table"
    },
    {
        "text": "OffsetEndAxis\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.graph.axis.",
        "type": "Title"
    },
    {
        "text": "OffsetEndAxis",
        "type": "Title"
    },
    {
        "text": "client",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "axisName",
        "type": "Title"
    },
    {
        "text": "'x'",
        "type": "UncategorizedText"
    },
    {
        "text": "noteSpacing",
        "type": "NarrativeText"
    },
    {
        "text": "1",
        "type": "ListItem"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An Axis that gives beginning and ending values for each element",
        "type": "ListItem"
    },
    {
        "text": "OffsetEndAxis bases",
        "type": "Title"
    },
    {
        "text": "OffsetAxis",
        "type": "ListItem"
    },
    {
        "text": "PositionAxis",
        "type": "ListItem"
    },
    {
        "text": "Axis",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "OffsetEndAxis read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "stream",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "OffsetEndAxis read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from OffsetAxis:",
        "type": "NarrativeText"
    },
    {
        "text": "label",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "client",
        "type": "Table"
    },
    {
        "text": "OffsetEndAxis methods",
        "type": "Title"
    },
    {
        "text": "OffsetEndAxis.",
        "type": "Title"
    },
    {
        "text": "extractOneElement",
        "type": "Title"
    },
    {
        "text": "formatDict",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Override in subclasses\u2026",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from OffsetAxis:",
        "type": "NarrativeText"
    },
    {
        "text": "getOffsetMap() setBoundariesFromData() setUseMeasuresFromOffsetMap() ticks()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "postProcessData()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "OffsetEndAxis instance variables",
        "type": "Title"
    },
    {
        "text": "OffsetEndAxis.",
        "type": "Title"
    },
    {
        "text": "noteSpacing",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "amount in QL to leave blank between untied notes.\n(default = self.graceNoteQL)",
        "type": "ListItem"
    },
    {
        "text": "Instance variables inherited from OffsetAxis:",
        "type": "NarrativeText"
    },
    {
        "text": "maxValue minMaxMeasureOnly minValue mostMeasureTicksToShow offsetStepSize useMeasures",
        "type": "Table"
    },
    {
        "text": "Instance variables inherited from PositionAxis:",
        "type": "NarrativeText"
    },
    {
        "text": "graceNoteQL",
        "type": "Table"
    },
    {
        "text": "Instance variables inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "axisDataMap axisName maxValue minValue quantities",
        "type": "Table"
    },
    {
        "text": "PitchAxis\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.graph.axis.",
        "type": "Title"
    },
    {
        "text": "PitchAxis",
        "type": "Title"
    },
    {
        "text": "client",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "axisName",
        "type": "Title"
    },
    {
        "text": "'x'",
        "type": "UncategorizedText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Axis subclass for dealing with Pitches",
        "type": "ListItem"
    },
    {
        "text": "PitchAxis bases",
        "type": "Title"
    },
    {
        "text": "Axis",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "PitchAxis read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "stream",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "PitchAxis read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "client label",
        "type": "Table"
    },
    {
        "text": "PitchAxis methods",
        "type": "Title"
    },
    {
        "text": "static",
        "type": "Title"
    },
    {
        "text": "PitchAxis.",
        "type": "Title"
    },
    {
        "text": "makePitchLabelsUnicode",
        "type": "Title"
    },
    {
        "text": "ticks",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given a list of ticks, replace all labels with alternative/unicode symbols where necessary.\n>>> ticks = [(60, 'C4'), (61, 'C#4'), (62, 'D4'), (63, 'E-4')]\n>>> t2 = graph.axis.PitchAxis.makePitchLabelsUnicode(ticks)\n>>> len(t2)\n4\n>>> [num for num, label in t2]\n[60, 61, 62, 63]\n>>> t2[0]\n(60, 'C4')\n>>> for num, label in t2:\n...     label\n'C4'\n'C\u00e2\u0099\u00af4'\n'D4'\n'E\u00e2\u0099\u00ad4'",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "extractOneElement() postProcessData() setBoundariesFromData() ticks()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "PitchAxis instance variables",
        "type": "Title"
    },
    {
        "text": "PitchAxis.",
        "type": "Title"
    },
    {
        "text": "blankLabelUnused",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "bool on whether to hide labels for unused pitches, default True.",
        "type": "ListItem"
    },
    {
        "text": "PitchAxis.",
        "type": "Title"
    },
    {
        "text": "hideUnused",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "bool on whether not to even show a tick when a pitch doesn't exist.\ndefault True.",
        "type": "ListItem"
    },
    {
        "text": "PitchAxis.",
        "type": "Title"
    },
    {
        "text": "showEnharmonic",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "bool on whether to show both common enharmonics in labels, default True",
        "type": "ListItem"
    },
    {
        "text": "PitchAxis.",
        "type": "Title"
    },
    {
        "text": "showOctaves",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "bool or \u0098few' about whether to show octave numbers.  If \u0098few' then\nonly the first pitch in each octave is shown.  Default \u0098few'",
        "type": "ListItem"
    },
    {
        "text": "Instance variables inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "axisDataMap axisName maxValue minValue quantities",
        "type": "Table"
    },
    {
        "text": "PitchClassAxis\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.graph.axis.",
        "type": "Title"
    },
    {
        "text": "PitchClassAxis",
        "type": "Title"
    },
    {
        "text": "client",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "axisName",
        "type": "Title"
    },
    {
        "text": "'x'",
        "type": "UncategorizedText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Axis subclass for dealing with PitchClasses\nBy default, axis is not set from data, but set to 0, 11",
        "type": "ListItem"
    },
    {
        "text": "PitchClassAxis bases",
        "type": "Title"
    },
    {
        "text": "PitchAxis",
        "type": "ListItem"
    },
    {
        "text": "Axis",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "PitchClassAxis read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "stream",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "PitchClassAxis read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "client label",
        "type": "Table"
    },
    {
        "text": "PitchClassAxis methods",
        "type": "Title"
    },
    {
        "text": "PitchClassAxis.",
        "type": "Title"
    },
    {
        "text": "extractOneElement",
        "type": "Title"
    },
    {
        "text": "formatDict",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Override in subclasses\u2026",
        "type": "ListItem"
    },
    {
        "text": "PitchClassAxis.",
        "type": "Title"
    },
    {
        "text": "ticks",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get ticks and labels for pitch classes.\nIf showEnharmonic is True (default) then\nwhen choosing whether to display as sharp or flat use\nthe most commonly used enharmonic.\n>>> s = corpus.parse('bach/bwv324.xml')\n>>> s.analyze('key')\n<music21.key.Key of G major>\n\n\n>>> plotS = graph.plot.PlotStream(s)\n>>> ax = graph.axis.PitchClassAxis(plotS)\n>>> ax.hideUnused = True\n\n\nTicks returns a list of two-element tuples:\n>>> ax.ticks()\n[(0, 'C'), (2, 'D'), ..., (11, 'B')]\n\n\n>>> for position, noteName in ax.ticks():\n...            print(str(position) + ' ' + noteName)\n0 C\n2 D\n3 D\u00e2\u0099\u00af\n4 E\n6 F\u00e2\u0099\u00af\n7 G\n9 A\n11 B\n\n\n>>> s = corpus.parse('bach/bwv281.xml')\n>>> plotS = graph.plot.PlotStream(s)\n>>> ax = graph.axis.PitchClassAxis(plotS)\n>>> ax.hideUnused = True\n>>> ax.showEnharmonic = True\n\n\n>>> for position, noteName in ax.ticks():\n...            print(str(position) + ' ' + noteName)\n0 C\n2 D\n3 E\u00e2\u0099\u00ad\n4 E\n5 F\n7 G\n9 A\n10 B\u00e2\u0099\u00ad\n11 B\n\n\n>>> ax.blankLabelUnused = True\n>>> ax.hideUnused = False\n>>> for position, noteName in ax.ticks():\n...            print(str(position) + ' ' + noteName)\n0 C\n1\n2 D\n3 E\u00e2\u0099\u00ad\n4 E\n5 F\n6\n7 G\n8\n9 A\n10 B\u00e2\u0099\u00ad\n11 B\n\n\n.showEnharmonic will change here\u2026\n>>> s.append(note.Note('A#4'))\n>>> s.append(note.Note('G#4'))\n>>> s.append(note.Note('A-4'))\n>>> s.append(note.Note('A-4'))\n>>> for position, noteName in ax.ticks():\n...            print(str(position) + ' ' + noteName)\n0 C\n1\n2 D\n3 E\u00e2\u0099\u00ad\n4 E\n5 F\n6\n7 G\n8 G\u00e2\u0099\u00af/A\u00e2\u0099\u00ad\n9 A\n10 A\u00e2\u0099\u00af/B\u00e2\u0099\u00ad\n11 B\n\n\nMake sure that Ab shows since there are two of them and only one G#\n>>> ax.showEnharmonic = False\n>>> for position, noteName in ax.ticks():\n...            print(str(position) + ' ' + noteName)\n0 C\n1\n2 D\n3 E\u00e2\u0099\u00ad\n4 E\n5 F\n6\n7 G\n8 A\u00e2\u0099\u00ad\n9 A\n10 B\u00e2\u0099\u00ad\n11 B",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from PitchAxis:",
        "type": "NarrativeText"
    },
    {
        "text": "makePitchLabelsUnicode()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "postProcessData() setBoundariesFromData()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "PitchClassAxis instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from PitchAxis:",
        "type": "NarrativeText"
    },
    {
        "text": "blankLabelUnused hideUnused showEnharmonic showOctaves",
        "type": "Table"
    },
    {
        "text": "Instance variables inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "axisDataMap axisName maxValue minValue quantities",
        "type": "Table"
    },
    {
        "text": "PitchSpaceAxis\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.graph.axis.",
        "type": "Title"
    },
    {
        "text": "PitchSpaceAxis",
        "type": "Title"
    },
    {
        "text": "client",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "axisName",
        "type": "Title"
    },
    {
        "text": "'x'",
        "type": "UncategorizedText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Axis subclass for dealing with PitchSpace (MIDI numbers\u2026)",
        "type": "ListItem"
    },
    {
        "text": "PitchSpaceAxis bases",
        "type": "Title"
    },
    {
        "text": "PitchAxis",
        "type": "ListItem"
    },
    {
        "text": "Axis",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "PitchSpaceAxis read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "stream",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "PitchSpaceAxis read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "client label",
        "type": "Table"
    },
    {
        "text": "PitchSpaceAxis methods",
        "type": "Title"
    },
    {
        "text": "PitchSpaceAxis.",
        "type": "Title"
    },
    {
        "text": "extractOneElement",
        "type": "Title"
    },
    {
        "text": "formatDict",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Override in subclasses\u2026",
        "type": "ListItem"
    },
    {
        "text": "PitchSpaceAxis.",
        "type": "Title"
    },
    {
        "text": "ticks",
        "type": "Title"
    },
    {
        "text": "dataMin",
        "type": "Title"
    },
    {
        "text": "36",
        "type": "UncategorizedText"
    },
    {
        "text": "dataMax",
        "type": "Title"
    },
    {
        "text": "100",
        "type": "UncategorizedText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": ">>> ax = graph.axis.PitchSpaceAxis()\n>>> ax.hideUnused = False\n>>> ax.blankLabelUnused = False\n>>> ax.minValue = 20\n>>> ax.maxValue = 24\n>>> for ps, label in ax.ticks():\n...     print(str(ps) + ' ' + label)\n20 G\u00e2\u0099\u00af0\n21 A\n22 B\u00e2\u0099\u00ad\n23 B\n24 C1\n\n\n>>> ax.showOctaves = False\n>>> for ps, label in ax.ticks():\n...     print(str(ps) + ' ' + label)\n20 G\u00e2\u0099\u00af\n21 A\n22 B\u00e2\u0099\u00ad\n23 B\n24 C\n\n\n>>> ax.showOctaves = True\n>>> for ps, label in ax.ticks():\n...     print(str(ps) + ' ' + label)\n20 G\u00e2\u0099\u00af0\n21 A0\n22 B\u00e2\u0099\u00ad0\n23 B0\n24 C1\n\n\n>>> ax.minValue = 60\n>>> ax.maxValue = 72\n>>> [x for x, y in ax.ticks()]\n[60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72]\n\n\n>>> bach = corpus.parse('bwv66.6')\n>>> plotS = graph.plot.PlotStream(bach.parts[-1])\n>>> ax = graph.axis.PitchSpaceAxis(plotS)\n>>> ax.hideUnused = False\n>>> ax.minValue = 36\n>>> ax.maxValue = 100\n>>> ticks = ax.ticks()\n>>> ticks[0]  # blank because no note 36 in data\n(36, '')\n>>> ticks[21]\n(57, 'A')",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from PitchAxis:",
        "type": "NarrativeText"
    },
    {
        "text": "makePitchLabelsUnicode()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "postProcessData() setBoundariesFromData()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "PitchSpaceAxis instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from PitchAxis:",
        "type": "NarrativeText"
    },
    {
        "text": "blankLabelUnused hideUnused showEnharmonic showOctaves",
        "type": "Table"
    },
    {
        "text": "Instance variables inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "axisDataMap axisName maxValue minValue quantities",
        "type": "Table"
    },
    {
        "text": "PitchSpaceOctaveAxis\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.graph.axis.",
        "type": "Title"
    },
    {
        "text": "PitchSpaceOctaveAxis",
        "type": "Title"
    },
    {
        "text": "client",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "axisName",
        "type": "Title"
    },
    {
        "text": "'x'",
        "type": "UncategorizedText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An axis similar to pitch classes, but just shows the octaves",
        "type": "ListItem"
    },
    {
        "text": "PitchSpaceOctaveAxis bases",
        "type": "Title"
    },
    {
        "text": "PitchSpaceAxis",
        "type": "ListItem"
    },
    {
        "text": "PitchAxis",
        "type": "ListItem"
    },
    {
        "text": "Axis",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "PitchSpaceOctaveAxis read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "stream",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "PitchSpaceOctaveAxis read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "client label",
        "type": "Table"
    },
    {
        "text": "PitchSpaceOctaveAxis methods",
        "type": "Title"
    },
    {
        "text": "PitchSpaceOctaveAxis.",
        "type": "Title"
    },
    {
        "text": "ticks",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "This class does not currently take into account whether the octaves themselves\nare found in the Stream.\n>>> ax = graph.axis.PitchSpaceOctaveAxis()\n>>> ax.minValue = 36\n>>> ax.maxValue = 100\n>>> ax.ticks()\n[(36, 'C2'), (48, 'C3'), (60, 'C4'), (72, 'C5'), (84, 'C6'), (96, 'C7')]\n\n\n>>> ax.startNameWithOctave = 'A2'\n>>> ax.ticks()\n[(45, 'A2'), (57, 'A3'), (69, 'A4'), (81, 'A5'), (93, 'A6')]",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from PitchSpaceAxis:",
        "type": "NarrativeText"
    },
    {
        "text": "extractOneElement()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from PitchAxis:",
        "type": "NarrativeText"
    },
    {
        "text": "makePitchLabelsUnicode()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "postProcessData() setBoundariesFromData()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "PitchSpaceOctaveAxis instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from PitchAxis:",
        "type": "NarrativeText"
    },
    {
        "text": "blankLabelUnused hideUnused showEnharmonic showOctaves",
        "type": "Table"
    },
    {
        "text": "Instance variables inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "axisDataMap axisName maxValue minValue quantities",
        "type": "Table"
    },
    {
        "text": "PositionAxis\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.graph.axis.",
        "type": "Title"
    },
    {
        "text": "PositionAxis",
        "type": "Title"
    },
    {
        "text": "client",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "axisName",
        "type": "Title"
    },
    {
        "text": "'x'",
        "type": "UncategorizedText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Axis subclass for dealing with Positions",
        "type": "ListItem"
    },
    {
        "text": "PositionAxis bases",
        "type": "Title"
    },
    {
        "text": "Axis",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "PositionAxis read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "stream",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "PositionAxis read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "client label",
        "type": "Table"
    },
    {
        "text": "PositionAxis methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "extractOneElement() postProcessData() setBoundariesFromData() ticks()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "PositionAxis instance variables",
        "type": "Title"
    },
    {
        "text": "PositionAxis.",
        "type": "Title"
    },
    {
        "text": "graceNoteQL",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "length to substitute a grace note or other Zero-length element for.\nDefault is the length of a 64th note (1/16 of a QL)",
        "type": "ListItem"
    },
    {
        "text": "Instance variables inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "axisDataMap axisName maxValue minValue quantities",
        "type": "Table"
    },
    {
        "text": "QuarterLengthAxis\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.graph.axis.",
        "type": "Title"
    },
    {
        "text": "QuarterLengthAxis",
        "type": "Title"
    },
    {
        "text": "client",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "axisName",
        "type": "Title"
    },
    {
        "text": "'x'",
        "type": "UncategorizedText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Axis subclass for dealing with QuarterLengths",
        "type": "ListItem"
    },
    {
        "text": "QuarterLengthAxis bases",
        "type": "Title"
    },
    {
        "text": "PositionAxis",
        "type": "ListItem"
    },
    {
        "text": "Axis",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "QuarterLengthAxis read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "stream",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "QuarterLengthAxis read/write properties",
        "type": "Title"
    },
    {
        "text": "QuarterLengthAxis.",
        "type": "Title"
    },
    {
        "text": "label",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Read/write properties inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "client",
        "type": "Table"
    },
    {
        "text": "QuarterLengthAxis methods",
        "type": "Title"
    },
    {
        "text": "QuarterLengthAxis.",
        "type": "Title"
    },
    {
        "text": "dataFromQL",
        "type": "Title"
    },
    {
        "text": "ql",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "QuarterLengthAxis.",
        "type": "Title"
    },
    {
        "text": "extractOneElement",
        "type": "Title"
    },
    {
        "text": "formatDict",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Override in subclasses\u2026",
        "type": "ListItem"
    },
    {
        "text": "QuarterLengthAxis.",
        "type": "Title"
    },
    {
        "text": "labelLogTag",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns a TeX formatted tag to the axis label depending on whether\nthe scale is logarithmic or not.  Checks .useLogScale\n>>> a = graph.axis.QuarterLengthAxis()\n>>> a.useLogScale\nTrue\n>>> a.labelLogTag()\n' ($log_2$)'\n\n\n>>> a.useLogScale = False\n>>> a.labelLogTag()\n''\n\n\n>>> a.useLogScale = 10\n>>> a.labelLogTag()\n' ($log_10$)'",
        "type": "ListItem"
    },
    {
        "text": "QuarterLengthAxis.",
        "type": "Title"
    },
    {
        "text": "remapQuarterLength",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Remap a quarter length as its log2.  Essentially it's\njust math.log2(x), but x=0 is replaced with self.graceNoteQL.",
        "type": "ListItem"
    },
    {
        "text": "QuarterLengthAxis.",
        "type": "Title"
    },
    {
        "text": "ticks",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get ticks for quarterLength.\nIf remap is True (the default), the remapQuarterLength()\nmethod will be used to scale displayed quarter lengths\nby log base 2.\nNote that mix and max do nothing, but must be included\nin order to set the tick style.\n>>> s = stream.Stream()\n>>> for t in ['32nd', '16th', 'eighth', 'quarter', 'half']:\n...     n = note.Note()\n...     n.duration.type = t\n...     s.append(n)\n\n\n>>> plotS = graph.plot.PlotStream(s)\n>>> ax = graph.axis.QuarterLengthAxis(plotS)\n>>> ax.ticks()\n[(-3.0, '0.12'), (-2.0, '0.25'), (-1.0, '0.5'), (0.0, '1.0'), (1.0, '2.0')]\n\n\n>>> ax.useLogScale = False\n>>> ax.ticks()\n[(0.125, '0.12'), (0.25, '0.25'), (0.5, '0.5'), (1.0, '1.0'), (2.0, '2.0')]\n>>> ax.useDurationNames = True\n>>> ax.ticks()\n[(0.125, '32nd'), (0.25, '16th'), (0.5, 'Eighth'), (1.0, 'Quarter'), (2.0, 'Half')]\n\n\n>>> nGrace = note.Note()\n>>> nGrace.getGrace(inPlace=True)\n>>> s.append(nGrace)\n>>> plotS = graph.plot.PlotStream(s)\n>>> ax = graph.axis.QuarterLengthAxis(plotS)\n>>> ax.ticks()[0]\n(-4.0, '0.0')\n\n\n>>> ax.useLogScale = False\n>>> ax.ticks()[0]\n(0.0625, '0.0')",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "postProcessData() setBoundariesFromData()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "QuarterLengthAxis instance variables",
        "type": "Title"
    },
    {
        "text": "QuarterLengthAxis.",
        "type": "Title"
    },
    {
        "text": "useDurationNames",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "If used then duration names replace numbers for ticks.\nIf set, probably will want to change tickFontSize in the graph object",
        "type": "ListItem"
    },
    {
        "text": "QuarterLengthAxis.",
        "type": "Title"
    },
    {
        "text": "useLogScale",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "bool or int for whether to scale numbers logarithmically.  Adds (log2) to the\naxis label if used.  If True (default) then log2 is assumed.  If an int, then\nlog the int (say, 10) is used. instead.",
        "type": "ListItem"
    },
    {
        "text": "Instance variables inherited from PositionAxis:",
        "type": "NarrativeText"
    },
    {
        "text": "graceNoteQL",
        "type": "Table"
    },
    {
        "text": "Instance variables inherited from Axis:",
        "type": "NarrativeText"
    },
    {
        "text": "axisDataMap axisName maxValue minValue quantities",
        "type": "Table"
    },
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.graph.axis",
        "type": "ListItem"
    },
    {
        "text": "\u00a9 Copyright 2006-2023 Michael Scott Asato Cuthbert.\n      Last updated on Jun 12, 2023.",
        "type": "NarrativeText"
    }
]