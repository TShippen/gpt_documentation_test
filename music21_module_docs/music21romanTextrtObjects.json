[
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.romanText.rtObjects",
        "type": "ListItem"
    },
    {
        "text": "Previous topic",
        "type": "Title"
    },
    {
        "text": "music21.romanText.clercqTemperley",
        "type": "Title"
    },
    {
        "text": "Next topic",
        "type": "Title"
    },
    {
        "text": "music21.romanText.translate",
        "type": "Title"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "music21.romanText.rtObjects\nRTAnalyticKey\nRTAnalyticKey\n\n\nRTAtom\nRTAtom\nRTAtom.isAtom()\n\n\n\n\nRTBeat\nRTBeat\nRTBeat.getBeatFloatOrFrac()\nRTBeat.getOffset()\n\n\n\n\nRTChord\nRTChord\n\n\nRTCloseParens\nRTCloseParens\n\n\nRTEllisonStart\nRTEllisonStart\n\n\nRTEllisonStop\nRTEllisonStop\n\n\nRTFile\nRTFile\nRTFile.close()\nRTFile.open()\nRTFile.openFileLike()\nRTFile.read()\nRTFile.readstr()\n\n\n\n\nRTHandler\nRTHandler\nRTHandler.tokens\nRTHandler.definesMovement()\nRTHandler.definesMovements()\nRTHandler.process()\nRTHandler.splitAtHeader()\nRTHandler.splitByMovement()\nRTHandler.tokenize()\nRTHandler.tokenizeAtoms()\nRTHandler.tokenizeBody()\nRTHandler.tokenizeHeader()\n\n\n\n\nRTKey\nRTKey\n\n\nRTKeySignature\nRTKeySignature\nRTKeySignature.getKeySignature()\n\n\n\n\nRTKeyTypeAtom\nRTKeyTypeAtom\nRTKeyTypeAtom.getKey()\nRTKeyTypeAtom.getKeySignature()\n\n\n\n\nRTMeasure\nRTMeasure\nRTMeasure.getCopyTarget()\nRTMeasure.isMeasure()\n\n\n\n\nRTNoChord\nRTNoChord\n\n\nRTOpenParens\nRTOpenParens\n\n\nRTOptionalKeyClose\nRTOptionalKeyClose\nRTOptionalKeyClose.getKey()\n\n\n\n\nRTOptionalKeyOpen\nRTOptionalKeyOpen\nRTOptionalKeyOpen.getKey()\n\n\n\n\nRTPhraseBoundary\nRTPhraseBoundary\n\n\nRTPhraseMarker\nRTPhraseMarker\n\n\nRTRepeat\nRTRepeat\n\n\nRTRepeatStart\nRTRepeatStart\n\n\nRTRepeatStop\nRTRepeatStop\n\n\nRTTagged\nRTTagged\nRTTagged.isAnalyst()\nRTTagged.isComposer()\nRTTagged.isForm()\nRTTagged.isKeySignature()\nRTTagged.isMovement()\nRTTagged.isNote()\nRTTagged.isPedal()\nRTTagged.isPiece()\nRTTagged.isProofreader()\nRTTagged.isSeventhMinor()\nRTTagged.isSixthMinor()\nRTTagged.isTimeSignature()\nRTTagged.isTitle()\nRTTagged.isVersion()\nRTTagged.isWork()\n\n\n\n\nRTToken\nRTToken\nRTToken.isAnalyst()\nRTToken.isAtom()\nRTToken.isComposer()\nRTToken.isForm()\nRTToken.isKeySignature()\nRTToken.isMeasure()\nRTToken.isMovement()\nRTToken.isNote()\nRTToken.isPedal()\nRTToken.isPiece()\nRTToken.isProofreader()\nRTToken.isTimeSignature()\nRTToken.isTitle()\nRTToken.isVersion()\nRTToken.isWork()",
        "type": "ListItem"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "About music21",
        "type": "ListItem"
    },
    {
        "text": "User's Guide",
        "type": "ListItem"
    },
    {
        "text": "Module Reference",
        "type": "ListItem"
    },
    {
        "text": "Installation",
        "type": "ListItem"
    },
    {
        "text": "Developer Reference",
        "type": "ListItem"
    },
    {
        "text": "Documentation and tests in progress",
        "type": "ListItem"
    },
    {
        "text": "Quick search",
        "type": "Title"
    },
    {
        "text": "This Page",
        "type": "Title"
    },
    {
        "text": "Show Source",
        "type": "ListItem"
    },
    {
        "text": "music21.romanText.rtObjects\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "Translation routines for roman numeral analysis text files, as defined\nand demonstrated by Dmitri Tymoczko, Mark Gotham, Michael Scott Cuthbert,\nand Christopher Ariza in ISMIR 2019.",
        "type": "NarrativeText"
    },
    {
        "text": "RTAnalyticKey\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.romanText.rtObjects.",
        "type": "Title"
    },
    {
        "text": "RTAnalyticKey",
        "type": "Title"
    },
    {
        "text": "src",
        "type": "Title"
    },
    {
        "text": "''",
        "type": "UncategorizedText"
    },
    {
        "text": "container",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An RTAnalyticKey(RTKeyTypeAtom) only defines a change in the key\nbeing analyzed.  It does not in itself create a Key\nobject.\n>>> gMinor = romanText.rtObjects.RTAnalyticKey('g:')\n>>> gMinor\n<music21.romanText.rtObjects.RTAnalyticKey 'g:'>\n>>> gMinor.getKey()\n<music21.key.Key of g minor>\n\n\n>>> bMinor = romanText.rtObjects.RTAnalyticKey('bb:')\n>>> bMinor\n<music21.romanText.rtObjects.RTAnalyticKey 'bb:'>\n>>> bMinor.getKey()\n<music21.key.Key of b- minor>",
        "type": "ListItem"
    },
    {
        "text": "RTAnalyticKey bases",
        "type": "Title"
    },
    {
        "text": "RTKeyTypeAtom",
        "type": "ListItem"
    },
    {
        "text": "RTAtom",
        "type": "ListItem"
    },
    {
        "text": "RTToken",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "RTAnalyticKey read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "RTAnalyticKey methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from RTKeyTypeAtom:",
        "type": "NarrativeText"
    },
    {
        "text": "getKey() getKeySignature()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from RTAtom:",
        "type": "NarrativeText"
    },
    {
        "text": "isAtom()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from RTToken:",
        "type": "NarrativeText"
    },
    {
        "text": "isAnalyst() isComposer() isForm() isKeySignature() isMeasure() isMovement() isNote() isPedal() isPiece() isProofreader() isTimeSignature() isTitle() isVersion() isWork()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "RTAtom\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.romanText.rtObjects.",
        "type": "Title"
    },
    {
        "text": "RTAtom",
        "type": "Title"
    },
    {
        "text": "src",
        "type": "Title"
    },
    {
        "text": "''",
        "type": "UncategorizedText"
    },
    {
        "text": "container",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "In RomanText, definitions of chords, phrases boundaries, open/close\nparenthesis, beat indicators, etc. appear within measures (RTMeasure\nobjects). These individual elements will be called Atoms, as they are data\nthat is not tagged.\nEach atom store a reference to its container (normally an RTMeasure).\n>>> chordIV = romanText.rtObjects.RTAtom('IV')\n>>> beat4 = romanText.rtObjects.RTAtom('b4')\n>>> beat4\n<music21.romanText.rtObjects.RTAtom 'b4'>\n>>> beat4.isAtom()\nTrue\n\n\nHowever, see RTChord, RTBeat, etc. which are subclasses of RTAtom\nspecifically for storing chords, beats, etc.",
        "type": "ListItem"
    },
    {
        "text": "RTAtom bases",
        "type": "Title"
    },
    {
        "text": "RTToken",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "RTAtom read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "RTAtom methods",
        "type": "Title"
    },
    {
        "text": "RTAtom.",
        "type": "Title"
    },
    {
        "text": "isAtom",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Atoms are any untagged data; generally only found inside a\nmeasure definition.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from RTToken:",
        "type": "NarrativeText"
    },
    {
        "text": "isAnalyst() isComposer() isForm() isKeySignature() isMeasure() isMovement() isNote() isPedal() isPiece() isProofreader() isTimeSignature() isTitle() isVersion() isWork()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "RTBeat\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.romanText.rtObjects.",
        "type": "Title"
    },
    {
        "text": "RTBeat",
        "type": "Title"
    },
    {
        "text": "src",
        "type": "Title"
    },
    {
        "text": "''",
        "type": "UncategorizedText"
    },
    {
        "text": "container",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An RTAtom subclass that defines a beat definition.  Also contains a\nreference to the container.\n>>> beatFour = romanText.rtObjects.RTBeat('b4')\n>>> beatFour\n<music21.romanText.rtObjects.RTBeat 'b4'>",
        "type": "ListItem"
    },
    {
        "text": "RTBeat bases",
        "type": "Title"
    },
    {
        "text": "RTAtom",
        "type": "ListItem"
    },
    {
        "text": "RTToken",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "RTBeat read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "RTBeat methods",
        "type": "Title"
    },
    {
        "text": "RTBeat.",
        "type": "Title"
    },
    {
        "text": "getBeatFloatOrFrac",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Gets the beat number as a float or fraction. Time signature independent\n>>> RTB = romanText.rtObjects.RTBeat\n\n\nSimple ones:\n>>> RTB('b1').getBeatFloatOrFrac()\n1.0\n>>> RTB('b2').getBeatFloatOrFrac()\n2.0\n\n\netc.\nwith easy float:\n>>> RTB('b1.5').getBeatFloatOrFrac()\n1.5\n>>> RTB('b1.25').getBeatFloatOrFrac()\n1.25\n\n\nwith harder:\n>>> RTB('b1.33').getBeatFloatOrFrac()\nFraction(4, 3)\n\n\n>>> RTB('b2.66').getBeatFloatOrFrac()\nFraction(8, 3)\n\n\n>>> RTB('b1.2').getBeatFloatOrFrac()\nFraction(6, 5)\n\n\nA third digit of 0.5 adds 1/2 of 1/DENOM of before.  Here DENOM is 3 (in 5/3) so\nwe add 1/6 to 5/3 to get 11/6:\n>>> RTB('b1.66').getBeatFloatOrFrac()\nFraction(5, 3)\n\n\n>>> RTB('b1.66.5').getBeatFloatOrFrac()\nFraction(11, 6)\n\n\nSimilarly 0.25 adds 1/4 of 1/DENOM\u2026 to get 21/12 or 7/4 or 1.75\n>>> RTB('b1.66.25').getBeatFloatOrFrac()\n1.75\n\n\nAnd 0.75 adds 3/4 of 1/DENOM to get 23/12\n>>> RTB('b1.66.75').getBeatFloatOrFrac()\nFraction(23, 12)\n\n\nA weird way of writing \u0098b1.5'\n>>> RTB('b1.33.5').getBeatFloatOrFrac()\n1.5",
        "type": "ListItem"
    },
    {
        "text": "RTBeat.",
        "type": "Title"
    },
    {
        "text": "getOffset",
        "type": "Title"
    },
    {
        "text": "timeSignature",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given a time signature, return the offset position specified by this\nbeat.\n>>> rtb = romanText.rtObjects.RTBeat('b1.5')\n>>> rtb.getOffset(meter.TimeSignature('3/4'))\n0.5\n>>> rtb.getOffset(meter.TimeSignature('6/8'))\n0.75\n>>> rtb.getOffset(meter.TimeSignature('2/2'))\n1.0\n\n\n>>> rtb = romanText.rtObjects.RTBeat('b2')\n>>> rtb.getOffset(meter.TimeSignature('3/4'))\n1.0\n>>> rtb.getOffset(meter.TimeSignature('6/8'))\n1.5\n\n\n>>> rtb = romanText.rtObjects.RTBeat('b1.66')\n>>> rtb.getOffset(meter.TimeSignature('6/8'))\n1.0\n>>> rtc = romanText.rtObjects.RTBeat('b1.66.5')\n>>> rtc.getOffset(meter.TimeSignature('6/8'))\n1.25",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from RTAtom:",
        "type": "NarrativeText"
    },
    {
        "text": "isAtom()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from RTToken:",
        "type": "NarrativeText"
    },
    {
        "text": "isAnalyst() isComposer() isForm() isKeySignature() isMeasure() isMovement() isNote() isPedal() isPiece() isProofreader() isTimeSignature() isTitle() isVersion() isWork()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "RTChord\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.romanText.rtObjects.",
        "type": "Title"
    },
    {
        "text": "RTChord",
        "type": "Title"
    },
    {
        "text": "src",
        "type": "Title"
    },
    {
        "text": "''",
        "type": "UncategorizedText"
    },
    {
        "text": "container",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An RTAtom subclass that defines a chord.  Also contains a reference to\nthe container.\n>>> chordIV = romanText.rtObjects.RTChord('IV')\n>>> chordIV\n<music21.romanText.rtObjects.RTChord 'IV'>",
        "type": "ListItem"
    },
    {
        "text": "RTChord bases",
        "type": "Title"
    },
    {
        "text": "RTAtom",
        "type": "ListItem"
    },
    {
        "text": "RTToken",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "RTChord read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "RTChord methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from RTAtom:",
        "type": "NarrativeText"
    },
    {
        "text": "isAtom()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from RTToken:",
        "type": "NarrativeText"
    },
    {
        "text": "isAnalyst() isComposer() isForm() isKeySignature() isMeasure() isMovement() isNote() isPedal() isPiece() isProofreader() isTimeSignature() isTitle() isVersion() isWork()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "RTCloseParens\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.romanText.rtObjects.",
        "type": "Title"
    },
    {
        "text": "RTCloseParens",
        "type": "Title"
    },
    {
        "text": "src",
        "type": "Title"
    },
    {
        "text": "')'",
        "type": "UncategorizedText"
    },
    {
        "text": "container",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A simple close parenthesis Atom with a sensible default\n>>> romanText.rtObjects.RTCloseParens(')')\n<music21.romanText.rtObjects.RTCloseParens ')'>",
        "type": "ListItem"
    },
    {
        "text": "RTCloseParens bases",
        "type": "Title"
    },
    {
        "text": "RTAtom",
        "type": "ListItem"
    },
    {
        "text": "RTToken",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "RTCloseParens read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "RTCloseParens methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from RTAtom:",
        "type": "NarrativeText"
    },
    {
        "text": "isAtom()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from RTToken:",
        "type": "NarrativeText"
    },
    {
        "text": "isAnalyst() isComposer() isForm() isKeySignature() isMeasure() isMovement() isNote() isPedal() isPiece() isProofreader() isTimeSignature() isTitle() isVersion() isWork()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "RTEllisonStart\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.romanText.rtObjects.",
        "type": "Title"
    },
    {
        "text": "RTEllisonStart",
        "type": "Title"
    },
    {
        "text": "src",
        "type": "Title"
    },
    {
        "text": "'|*'",
        "type": "UncategorizedText"
    },
    {
        "text": "container",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": ">>> phrase = romanText.rtObjects.RTEllisonStart('|*')\n>>> phrase\n<music21.romanText.rtObjects.RTEllisonStart '|*'>",
        "type": "ListItem"
    },
    {
        "text": "RTEllisonStart bases",
        "type": "Title"
    },
    {
        "text": "RTPhraseMarker",
        "type": "ListItem"
    },
    {
        "text": "RTAtom",
        "type": "ListItem"
    },
    {
        "text": "RTToken",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "RTEllisonStart read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "RTEllisonStart methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from RTAtom:",
        "type": "NarrativeText"
    },
    {
        "text": "isAtom()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from RTToken:",
        "type": "NarrativeText"
    },
    {
        "text": "isAnalyst() isComposer() isForm() isKeySignature() isMeasure() isMovement() isNote() isPedal() isPiece() isProofreader() isTimeSignature() isTitle() isVersion() isWork()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "RTEllisonStop\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.romanText.rtObjects.",
        "type": "Title"
    },
    {
        "text": "RTEllisonStop",
        "type": "NarrativeText"
    },
    {
        "text": "src",
        "type": "Title"
    },
    {
        "text": "'*|'",
        "type": "UncategorizedText"
    },
    {
        "text": "container",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": ">>> phrase = romanText.rtObjects.RTEllisonStop('*|')\n>>> phrase\n<music21.romanText.rtObjects.RTEllisonStop '*|'>",
        "type": "ListItem"
    },
    {
        "text": "RTEllisonStop bases",
        "type": "Title"
    },
    {
        "text": "RTPhraseMarker",
        "type": "ListItem"
    },
    {
        "text": "RTAtom",
        "type": "ListItem"
    },
    {
        "text": "RTToken",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "RTEllisonStop read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "RTEllisonStop methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from RTAtom:",
        "type": "NarrativeText"
    },
    {
        "text": "isAtom()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from RTToken:",
        "type": "NarrativeText"
    },
    {
        "text": "isAnalyst() isComposer() isForm() isKeySignature() isMeasure() isMovement() isNote() isPedal() isPiece() isProofreader() isTimeSignature() isTitle() isVersion() isWork()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "RTFile\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.romanText.rtObjects.",
        "type": "Title"
    },
    {
        "text": "RTFile",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Roman Text File access.",
        "type": "ListItem"
    },
    {
        "text": "RTFile bases",
        "type": "Title"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "RTFile read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "RTFile methods",
        "type": "Title"
    },
    {
        "text": "RTFile.",
        "type": "Title"
    },
    {
        "text": "close",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "RTFile.",
        "type": "Title"
    },
    {
        "text": "open",
        "type": "Title"
    },
    {
        "text": "filename",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Open a file for reading, trying a variety of encodings and then\ntrying them again with an \u009cignore\u009d flag if it is not possible.",
        "type": "ListItem"
    },
    {
        "text": "RTFile.",
        "type": "Title"
    },
    {
        "text": "openFileLike",
        "type": "Title"
    },
    {
        "text": "fileLike",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Assign a file-like object, such as those provided by StringIO, as an\nopen file object.",
        "type": "ListItem"
    },
    {
        "text": "RTFile.",
        "type": "Title"
    },
    {
        "text": "read",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Read a file. Note that this calls readstr, which processes all tokens.\nIf number is given, a work number will be extracted if possible.",
        "type": "ListItem"
    },
    {
        "text": "RTFile.",
        "type": "Title"
    },
    {
        "text": "readstr",
        "type": "Title"
    },
    {
        "text": "strSrc",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Read a string and process all Tokens. Returns a ABCHandler instance.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "RTHandler\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.romanText.rtObjects.",
        "type": "Title"
    },
    {
        "text": "RTHandler",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "RTHandler read/write properties",
        "type": "Title"
    },
    {
        "text": "RTHandler.",
        "type": "Title"
    },
    {
        "text": "tokens",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get or set tokens for this Handler.",
        "type": "ListItem"
    },
    {
        "text": "RTHandler methods",
        "type": "Title"
    },
    {
        "text": "RTHandler.",
        "type": "Title"
    },
    {
        "text": "definesMovement",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return True if this handler has 1 or more movement.\n>>> rth = romanText.rtObjects.RTHandler()\n>>> rth.process('Movement: 1 \\n \\n m1')\n>>> rth.definesMovements()\nFalse\n>>> rth.definesMovement()\nTrue",
        "type": "ListItem"
    },
    {
        "text": "RTHandler.",
        "type": "Title"
    },
    {
        "text": "definesMovements",
        "type": "Title"
    },
    {
        "text": "countRequired",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return True if more than one movement is defined in a RT file.\n>>> rth = romanText.rtObjects.RTHandler()\n>>> rth.process('Movement: 1 \\n Movement: 2 \\n \\n m1')\n>>> rth.definesMovements()\nTrue\n>>> rth.process('Movement: 1 \\n m1')\n>>> rth.definesMovements()\nFalse",
        "type": "ListItem"
    },
    {
        "text": "RTHandler.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "src",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given an entire specification as a single source string, strSrc, tokenize it.\nThis is usually provided in a file.",
        "type": "ListItem"
    },
    {
        "text": "RTHandler.",
        "type": "Title"
    },
    {
        "text": "splitAtHeader",
        "type": "Title"
    },
    {
        "text": "lines",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Divide string into header and non-header; this is done before\ntokenization.\n>>> rth = romanText.rtObjects.RTHandler()\n>>> rth.splitAtHeader(['Title: s', 'Time Signature:', '', 'm1 g: i'])\n(['Title: s', 'Time Signature:', ''], ['m1 g: i'])",
        "type": "ListItem"
    },
    {
        "text": "RTHandler.",
        "type": "Title"
    },
    {
        "text": "splitByMovement",
        "type": "Title"
    },
    {
        "text": "duplicateHeader",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "If we have movements defined, return a list of RTHandler rtObjects,\nrepresenting header information and each movement, in order.\n>>> rth = romanText.rtObjects.RTHandler()\n>>> rth.process('Title: Test \\n Movement: 1 \\n m1 \\n Movement: 2 \\n m1')\n>>> post = rth.splitByMovement(False)\n>>> len(post)\n3\n\n\n>>> len(post[0])\n1\n\n\n>>> post[0].__class__\n<class 'music21.romanText.rtObjects.RTHandler'>\n>>> len(post[1]), len(post[2])\n(2, 2)\n\n\n>>> post = rth.splitByMovement(duplicateHeader=True)\n>>> len(post)\n2\n\n\n>>> len(post[0]), len(post[1])\n(3, 3)",
        "type": "ListItem"
    },
    {
        "text": "RTHandler.",
        "type": "Title"
    },
    {
        "text": "tokenize",
        "type": "NarrativeText"
    },
    {
        "text": "src",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Walk the RT string, creating RT rtObjects along the way.",
        "type": "ListItem"
    },
    {
        "text": "RTHandler.",
        "type": "Title"
    },
    {
        "text": "tokenizeAtoms",
        "type": "Title"
    },
    {
        "text": "line",
        "type": "Title"
    },
    {
        "text": "container",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given a line of data stored in measure consisting only of Atoms,\ntokenize and return a list.\n>>> rth = romanText.rtObjects.RTHandler()\n>>> rth.tokenizeAtoms('IV b3 ii7 b4 ii')\n[<music21.romanText.rtObjects.RTChord 'IV'>,\n <music21.romanText.rtObjects.RTBeat 'b3'>,\n <music21.romanText.rtObjects.RTChord 'ii7'>,\n <music21.romanText.rtObjects.RTBeat 'b4'>,\n <music21.romanText.rtObjects.RTChord 'ii'>]\n\n\n>>> rth.tokenizeAtoms('V7 b2 V13 b3 V7 iio6/5[no5]')\n[<music21.romanText.rtObjects.RTChord 'V7'>,\n <music21.romanText.rtObjects.RTBeat 'b2'>,\n <music21.romanText.rtObjects.RTChord 'V13'>,\n <music21.romanText.rtObjects.RTBeat 'b3'>,\n <music21.romanText.rtObjects.RTChord 'V7'>,\n <music21.romanText.rtObjects.RTChord 'iio6/5[no5]'>]\n\n\n>>> tokenList = rth.tokenizeAtoms('I b2 I b2.25 V/ii b2.5 bVII b2.75 V g: IV')\n>>> tokenList\n[<music21.romanText.rtObjects.RTChord 'I'>,\n <music21.romanText.rtObjects.RTBeat 'b2'>,\n <music21.romanText.rtObjects.RTChord 'I'>,\n <music21.romanText.rtObjects.RTBeat 'b2.25'>,\n <music21.romanText.rtObjects.RTChord 'V/ii'>,\n <music21.romanText.rtObjects.RTBeat 'b2.5'>,\n <music21.romanText.rtObjects.RTChord 'bVII'>,\n <music21.romanText.rtObjects.RTBeat 'b2.75'>,\n <music21.romanText.rtObjects.RTChord 'V'>,\n <music21.romanText.rtObjects.RTAnalyticKey 'g:'>,\n <music21.romanText.rtObjects.RTChord 'IV'>]\n\n\n>>> tokenList[-2].getKey()\n<music21.key.Key of g minor>\n\n\n>>> rth.tokenizeAtoms('= m3')\n[]\n\n\n>>> tokenList = rth.tokenizeAtoms('g;: ||: V b2 ?(Bb: VII7 b3 III b4 ?)Bb: i :||')\n>>> tokenList\n[<music21.romanText.rtObjects.RTKey 'g;:'>,\n <music21.romanText.rtObjects.RTRepeatStart '||:'>,\n <music21.romanText.rtObjects.RTChord 'V'>,\n <music21.romanText.rtObjects.RTBeat 'b2'>,\n <music21.romanText.rtObjects.RTOptionalKeyOpen '?(Bb:'>,\n <music21.romanText.rtObjects.RTChord 'VII7'>,\n <music21.romanText.rtObjects.RTBeat 'b3'>,\n <music21.romanText.rtObjects.RTChord 'III'>,\n <music21.romanText.rtObjects.RTBeat 'b4'>,\n <music21.romanText.rtObjects.RTOptionalKeyClose '?)Bb:'>,\n <music21.romanText.rtObjects.RTChord 'i'>,\n <music21.romanText.rtObjects.RTRepeatStop ':||'>]",
        "type": "ListItem"
    },
    {
        "text": "RTHandler.",
        "type": "Title"
    },
    {
        "text": "tokenizeBody",
        "type": "Title"
    },
    {
        "text": "lines",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "In the body, we may have measure, time signature, or note\ndeclarations, as well as possible other tagged definitions.",
        "type": "ListItem"
    },
    {
        "text": "RTHandler.",
        "type": "Title"
    },
    {
        "text": "tokenizeHeader",
        "type": "Title"
    },
    {
        "text": "lines",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "In the header, we only have RTTagged\ntokens. We can this process these all as the same class.",
        "type": "ListItem"
    },
    {
        "text": "RTKey\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.romanText.rtObjects.",
        "type": "Title"
    },
    {
        "text": "RTKey",
        "type": "Title"
    },
    {
        "text": "src",
        "type": "Title"
    },
    {
        "text": "''",
        "type": "UncategorizedText"
    },
    {
        "text": "container",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An RTKey(RTAtom) defines both a change in KeySignature and a change\nin the analyzed Key.\nThey are defined by \u009c;:\u009d after the Key.\n>>> gMinor = romanText.rtObjects.RTKey('g;:')\n>>> gMinor\n<music21.romanText.rtObjects.RTKey 'g;:'>\n>>> gMinor.getKey()\n<music21.key.Key of g minor>\n\n\n>>> bMinor = romanText.rtObjects.RTKey('bb;:')\n>>> bMinor\n<music21.romanText.rtObjects.RTKey 'bb;:'>\n>>> bMinor.getKey()\n<music21.key.Key of b- minor>\n>>> bMinor.getKeySignature()\n<music21.key.KeySignature of 5 flats>\n\n\n>>> eFlatMajor = romanText.rtObjects.RTKey('Eb;:')\n>>> eFlatMajor\n<music21.romanText.rtObjects.RTKey 'Eb;:'>\n>>> eFlatMajor.getKey()\n<music21.key.Key of E- major>",
        "type": "ListItem"
    },
    {
        "text": "RTKey bases",
        "type": "Title"
    },
    {
        "text": "RTKeyTypeAtom",
        "type": "ListItem"
    },
    {
        "text": "RTAtom",
        "type": "ListItem"
    },
    {
        "text": "RTToken",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "RTKey read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "RTKey methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from RTKeyTypeAtom:",
        "type": "NarrativeText"
    },
    {
        "text": "getKey() getKeySignature()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from RTAtom:",
        "type": "NarrativeText"
    },
    {
        "text": "isAtom()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from RTToken:",
        "type": "NarrativeText"
    },
    {
        "text": "isAnalyst() isComposer() isForm() isKeySignature() isMeasure() isMovement() isNote() isPedal() isPiece() isProofreader() isTimeSignature() isTitle() isVersion() isWork()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "RTKeySignature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.romanText.rtObjects.",
        "type": "Title"
    },
    {
        "text": "RTKeySignature",
        "type": "Title"
    },
    {
        "text": "src",
        "type": "Title"
    },
    {
        "text": "''",
        "type": "UncategorizedText"
    },
    {
        "text": "container",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An RTKeySignature(RTAtom) only defines a change in the KeySignature.\nIt does not in itself create a Key object, nor\ndoes it change the analysis taking place.\nThe number after KS defines the number of sharps (negative for flats).\n>>> gMinor = romanText.rtObjects.RTKeySignature('KS-2')\n>>> gMinor\n<music21.romanText.rtObjects.RTKeySignature 'KS-2'>\n>>> gMinor.getKeySignature()\n<music21.key.KeySignature of 2 flats>\n\n\n>>> aMajor = romanText.rtObjects.RTKeySignature('KS3')\n>>> aMajor.getKeySignature()\n<music21.key.KeySignature of 3 sharps>",
        "type": "ListItem"
    },
    {
        "text": "RTKeySignature bases",
        "type": "Title"
    },
    {
        "text": "RTAtom",
        "type": "ListItem"
    },
    {
        "text": "RTToken",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "RTKeySignature read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "RTKeySignature methods",
        "type": "Title"
    },
    {
        "text": "RTKeySignature.",
        "type": "Title"
    },
    {
        "text": "getKeySignature",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from RTAtom:",
        "type": "NarrativeText"
    },
    {
        "text": "isAtom()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from RTToken:",
        "type": "NarrativeText"
    },
    {
        "text": "isAnalyst() isComposer() isForm() isKeySignature() isMeasure() isMovement() isNote() isPedal() isPiece() isProofreader() isTimeSignature() isTitle() isVersion() isWork()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "RTKeyTypeAtom\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.romanText.rtObjects.",
        "type": "Title"
    },
    {
        "text": "RTKeyTypeAtom",
        "type": "Title"
    },
    {
        "text": "src",
        "type": "Title"
    },
    {
        "text": "''",
        "type": "UncategorizedText"
    },
    {
        "text": "container",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "RTKeyTypeAtoms contain utility functions for all Key-type tokens, i.e.\nRTKey, RTAnalyticKey, but not KeySignature.\n>>> gMinor = romanText.rtObjects.RTKeyTypeAtom('g;:')\n>>> gMinor\n<music21.romanText.rtObjects.RTKeyTypeAtom 'g;:'>\n>>> gMinor.getKey()\n<music21.key.Key of g minor>",
        "type": "ListItem"
    },
    {
        "text": "RTKeyTypeAtom bases",
        "type": "Title"
    },
    {
        "text": "RTAtom",
        "type": "ListItem"
    },
    {
        "text": "RTToken",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "RTKeyTypeAtom read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "RTKeyTypeAtom methods",
        "type": "Title"
    },
    {
        "text": "RTKeyTypeAtom.",
        "type": "Title"
    },
    {
        "text": "getKey",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "This returns a Key, not a KeySignature object",
        "type": "ListItem"
    },
    {
        "text": "RTKeyTypeAtom.",
        "type": "Title"
    },
    {
        "text": "getKeySignature",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get a KeySignature object.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from RTAtom:",
        "type": "NarrativeText"
    },
    {
        "text": "isAtom()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from RTToken:",
        "type": "NarrativeText"
    },
    {
        "text": "isAnalyst() isComposer() isForm() isKeySignature() isMeasure() isMovement() isNote() isPedal() isPiece() isProofreader() isTimeSignature() isTitle() isVersion() isWork()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "RTMeasure\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.romanText.rtObjects.",
        "type": "Title"
    },
    {
        "text": "RTMeasure",
        "type": "Title"
    },
    {
        "text": "src",
        "type": "Title"
    },
    {
        "text": "''",
        "type": "UncategorizedText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "In RomanText, measures are given one per line and always start with \u0098m'.\nFor instance:\n\nm4 i b3 v b4 VI\nm5 b2 g: IV b4 V\nm6 i\nm7 D: V\n\nMeasure ranges can be used and copied, such as:\n\nm8-m9=m4-m5\n\nRTMeasure objects can also define variant readings for a measure:\n\nm1     ii\nm1var1 ii b2 ii6 b3 IV\n\nVariants are not part of the tag, but are read into an attribute.\nEndings are indicated by a single letter after the measure number, such as\n\u009ca\u009d for first ending.\n>>> rtm = romanText.rtObjects.RTMeasure('m15a V6 b1.5 V6/5 b2 I b3 viio6')\n>>> rtm.data\n'V6 b1.5 V6/5 b2 I b3 viio6'\n>>> rtm.number\n[15]\n>>> rtm.repeatLetter\n['a']\n>>> rtm.isMeasure()\nTrue",
        "type": "ListItem"
    },
    {
        "text": "RTMeasure bases",
        "type": "Title"
    },
    {
        "text": "RTToken",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "RTMeasure read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "RTMeasure methods",
        "type": "Title"
    },
    {
        "text": "RTMeasure.",
        "type": "Title"
    },
    {
        "text": "getCopyTarget",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "If this measure defines a copy operation, return two lists defining\nthe measures to copy; the second list has the repeat data.\n>>> rtm = romanText.rtObjects.RTMeasure('m35-36 = m29-30')\n>>> rtm.number\n[35, 36]\n>>> rtm.getCopyTarget()\n([29, 30], ['', ''])\n\n\n>>> rtm = romanText.rtObjects.RTMeasure('m4 = m1')\n>>> rtm.number\n[4]\n>>> rtm.getCopyTarget()\n([1], [''])",
        "type": "ListItem"
    },
    {
        "text": "RTMeasure.",
        "type": "Title"
    },
    {
        "text": "isMeasure",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from RTToken:",
        "type": "NarrativeText"
    },
    {
        "text": "isAnalyst() isAtom() isComposer() isForm() isKeySignature() isMovement() isNote() isPedal() isPiece() isProofreader() isTimeSignature() isTitle() isVersion() isWork()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "RTNoChord\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.romanText.rtObjects.",
        "type": "Title"
    },
    {
        "text": "RTNoChord",
        "type": "Title"
    },
    {
        "text": "src",
        "type": "Title"
    },
    {
        "text": "''",
        "type": "UncategorizedText"
    },
    {
        "text": "container",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An RTAtom subclass that defines absence of a chord.  Also contains a\nreference to the container.\n>>> chordNC = romanText.rtObjects.RTNoChord('NC')\n>>> chordNC\n<music21.romanText.rtObjects.RTNoChord 'NC'>\n\n\n>>> rth = romanText.rtObjects.RTHandler()\n>>> rth.tokenizeAtoms('nc NC N.C.')\n[<music21.romanText.rtObjects.RTNoChord 'nc'>,\n <music21.romanText.rtObjects.RTNoChord 'NC'>,\n <music21.romanText.rtObjects.RTNoChord 'N.C.'>]",
        "type": "ListItem"
    },
    {
        "text": "RTNoChord bases",
        "type": "Title"
    },
    {
        "text": "RTAtom",
        "type": "ListItem"
    },
    {
        "text": "RTToken",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "RTNoChord read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "RTNoChord methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from RTAtom:",
        "type": "NarrativeText"
    },
    {
        "text": "isAtom()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from RTToken:",
        "type": "NarrativeText"
    },
    {
        "text": "isAnalyst() isComposer() isForm() isKeySignature() isMeasure() isMovement() isNote() isPedal() isPiece() isProofreader() isTimeSignature() isTitle() isVersion() isWork()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "RTOpenParens\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.romanText.rtObjects.",
        "type": "Title"
    },
    {
        "text": "RTOpenParens",
        "type": "Title"
    },
    {
        "text": "src",
        "type": "Title"
    },
    {
        "text": "'('",
        "type": "UncategorizedText"
    },
    {
        "text": "container",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A simple open parenthesis Atom with a sensible default\n>>> romanText.rtObjects.RTOpenParens('(')\n<music21.romanText.rtObjects.RTOpenParens '('>",
        "type": "ListItem"
    },
    {
        "text": "RTOpenParens bases",
        "type": "Title"
    },
    {
        "text": "RTAtom",
        "type": "ListItem"
    },
    {
        "text": "RTToken",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "RTOpenParens read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "RTOpenParens methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from RTAtom:",
        "type": "NarrativeText"
    },
    {
        "text": "isAtom()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from RTToken:",
        "type": "NarrativeText"
    },
    {
        "text": "isAnalyst() isComposer() isForm() isKeySignature() isMeasure() isMovement() isNote() isPedal() isPiece() isProofreader() isTimeSignature() isTitle() isVersion() isWork()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "RTOptionalKeyClose\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.romanText.rtObjects.",
        "type": "Title"
    },
    {
        "text": "RTOptionalKeyClose",
        "type": "NarrativeText"
    },
    {
        "text": "src",
        "type": "Title"
    },
    {
        "text": "''",
        "type": "UncategorizedText"
    },
    {
        "text": "container",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Marks the end of an optional Key area which does not affect the roman\nnumeral analysis.\nFor example, it is possible to analyze in Bb major, while remaining in g\nminor.\n>>> possibleKey = romanText.rtObjects.RTOptionalKeyClose('?)Bb:')\n>>> possibleKey\n<music21.romanText.rtObjects.RTOptionalKeyClose '?)Bb:'>\n>>> possibleKey.getKey()\n<music21.key.Key of B- major>",
        "type": "ListItem"
    },
    {
        "text": "RTOptionalKeyClose bases",
        "type": "Title"
    },
    {
        "text": "RTAtom",
        "type": "ListItem"
    },
    {
        "text": "RTToken",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "RTOptionalKeyClose read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "RTOptionalKeyClose methods",
        "type": "Title"
    },
    {
        "text": "RTOptionalKeyClose.",
        "type": "Title"
    },
    {
        "text": "getKey",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from RTAtom:",
        "type": "NarrativeText"
    },
    {
        "text": "isAtom()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from RTToken:",
        "type": "NarrativeText"
    },
    {
        "text": "isAnalyst() isComposer() isForm() isKeySignature() isMeasure() isMovement() isNote() isPedal() isPiece() isProofreader() isTimeSignature() isTitle() isVersion() isWork()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "RTOptionalKeyOpen\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.romanText.rtObjects.",
        "type": "Title"
    },
    {
        "text": "RTOptionalKeyOpen",
        "type": "NarrativeText"
    },
    {
        "text": "src",
        "type": "Title"
    },
    {
        "text": "''",
        "type": "UncategorizedText"
    },
    {
        "text": "container",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Marks the beginning of an optional Key area which does not\naffect the roman numeral analysis.  (For instance, it is\npossible to analyze in Bb major, while remaining in g minor)\n>>> possibleKey = romanText.rtObjects.RTOptionalKeyOpen('?(Bb:')\n>>> possibleKey\n<music21.romanText.rtObjects.RTOptionalKeyOpen '?(Bb:'>\n>>> possibleKey.getKey()\n<music21.key.Key of B- major>",
        "type": "ListItem"
    },
    {
        "text": "RTOptionalKeyOpen bases",
        "type": "Title"
    },
    {
        "text": "RTAtom",
        "type": "ListItem"
    },
    {
        "text": "RTToken",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "RTOptionalKeyOpen read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "RTOptionalKeyOpen methods",
        "type": "Title"
    },
    {
        "text": "RTOptionalKeyOpen.",
        "type": "Title"
    },
    {
        "text": "getKey",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from RTAtom:",
        "type": "NarrativeText"
    },
    {
        "text": "isAtom()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from RTToken:",
        "type": "NarrativeText"
    },
    {
        "text": "isAnalyst() isComposer() isForm() isKeySignature() isMeasure() isMovement() isNote() isPedal() isPiece() isProofreader() isTimeSignature() isTitle() isVersion() isWork()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "RTPhraseBoundary\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.romanText.rtObjects.",
        "type": "Title"
    },
    {
        "text": "RTPhraseBoundary",
        "type": "Title"
    },
    {
        "text": "src",
        "type": "Title"
    },
    {
        "text": "'||'",
        "type": "UncategorizedText"
    },
    {
        "text": "container",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": ">>> phrase = romanText.rtObjects.RTPhraseBoundary('||')\n>>> phrase\n<music21.romanText.rtObjects.RTPhraseBoundary '||'>",
        "type": "ListItem"
    },
    {
        "text": "RTPhraseBoundary bases",
        "type": "Title"
    },
    {
        "text": "RTPhraseMarker",
        "type": "ListItem"
    },
    {
        "text": "RTAtom",
        "type": "ListItem"
    },
    {
        "text": "RTToken",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "RTPhraseBoundary read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "RTPhraseBoundary methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from RTAtom:",
        "type": "NarrativeText"
    },
    {
        "text": "isAtom()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from RTToken:",
        "type": "NarrativeText"
    },
    {
        "text": "isAnalyst() isComposer() isForm() isKeySignature() isMeasure() isMovement() isNote() isPedal() isPiece() isProofreader() isTimeSignature() isTitle() isVersion() isWork()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "RTPhraseMarker\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.romanText.rtObjects.",
        "type": "Title"
    },
    {
        "text": "RTPhraseMarker",
        "type": "Title"
    },
    {
        "text": "src",
        "type": "Title"
    },
    {
        "text": "''",
        "type": "UncategorizedText"
    },
    {
        "text": "container",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A Phrase Marker:\n>>> rtPhraseMarker = romanText.rtObjects.RTPhraseMarker('')\n>>> rtPhraseMarker\n<music21.romanText.rtObjects.RTPhraseMarker ''>",
        "type": "ListItem"
    },
    {
        "text": "RTPhraseMarker bases",
        "type": "Title"
    },
    {
        "text": "RTAtom",
        "type": "ListItem"
    },
    {
        "text": "RTToken",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "RTPhraseMarker read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "RTPhraseMarker methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from RTAtom:",
        "type": "NarrativeText"
    },
    {
        "text": "isAtom()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from RTToken:",
        "type": "NarrativeText"
    },
    {
        "text": "isAnalyst() isComposer() isForm() isKeySignature() isMeasure() isMovement() isNote() isPedal() isPiece() isProofreader() isTimeSignature() isTitle() isVersion() isWork()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "RTRepeat\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.romanText.rtObjects.",
        "type": "Title"
    },
    {
        "text": "RTRepeat",
        "type": "Title"
    },
    {
        "text": "src",
        "type": "Title"
    },
    {
        "text": "''",
        "type": "UncategorizedText"
    },
    {
        "text": "container",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": ">>> repeat = romanText.rtObjects.RTRepeat('||:')\n>>> repeat\n<music21.romanText.rtObjects.RTRepeat '||:'>",
        "type": "ListItem"
    },
    {
        "text": "RTRepeat bases",
        "type": "Title"
    },
    {
        "text": "RTAtom",
        "type": "ListItem"
    },
    {
        "text": "RTToken",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "RTRepeat read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "RTRepeat methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from RTAtom:",
        "type": "NarrativeText"
    },
    {
        "text": "isAtom()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from RTToken:",
        "type": "NarrativeText"
    },
    {
        "text": "isAnalyst() isComposer() isForm() isKeySignature() isMeasure() isMovement() isNote() isPedal() isPiece() isProofreader() isTimeSignature() isTitle() isVersion() isWork()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "RTRepeatStart\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.romanText.rtObjects.",
        "type": "Title"
    },
    {
        "text": "RTRepeatStart",
        "type": "Title"
    },
    {
        "text": "src",
        "type": "Title"
    },
    {
        "text": "'||:'",
        "type": "UncategorizedText"
    },
    {
        "text": "container",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": ">>> repeat = romanText.rtObjects.RTRepeatStart()\n>>> repeat\n<music21.romanText.rtObjects.RTRepeatStart ...'||:'>",
        "type": "ListItem"
    },
    {
        "text": "RTRepeatStart bases",
        "type": "Title"
    },
    {
        "text": "RTRepeat",
        "type": "ListItem"
    },
    {
        "text": "RTAtom",
        "type": "ListItem"
    },
    {
        "text": "RTToken",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "RTRepeatStart read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "RTRepeatStart methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from RTAtom:",
        "type": "NarrativeText"
    },
    {
        "text": "isAtom()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from RTToken:",
        "type": "NarrativeText"
    },
    {
        "text": "isAnalyst() isComposer() isForm() isKeySignature() isMeasure() isMovement() isNote() isPedal() isPiece() isProofreader() isTimeSignature() isTitle() isVersion() isWork()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "RTRepeatStop\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.romanText.rtObjects.",
        "type": "Title"
    },
    {
        "text": "RTRepeatStop",
        "type": "NarrativeText"
    },
    {
        "text": "src",
        "type": "Title"
    },
    {
        "text": "':||'",
        "type": "UncategorizedText"
    },
    {
        "text": "container",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": ">>> repeat = romanText.rtObjects.RTRepeatStop()\n>>> repeat\n<music21.romanText.rtObjects.RTRepeatStop ...':||'>",
        "type": "ListItem"
    },
    {
        "text": "RTRepeatStop bases",
        "type": "Title"
    },
    {
        "text": "RTRepeat",
        "type": "ListItem"
    },
    {
        "text": "RTAtom",
        "type": "ListItem"
    },
    {
        "text": "RTToken",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "RTRepeatStop read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "RTRepeatStop methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from RTAtom:",
        "type": "NarrativeText"
    },
    {
        "text": "isAtom()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from RTToken:",
        "type": "NarrativeText"
    },
    {
        "text": "isAnalyst() isComposer() isForm() isKeySignature() isMeasure() isMovement() isNote() isPedal() isPiece() isProofreader() isTimeSignature() isTitle() isVersion() isWork()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "RTTagged\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.romanText.rtObjects.",
        "type": "Title"
    },
    {
        "text": "RTTagged",
        "type": "NarrativeText"
    },
    {
        "text": "src",
        "type": "Title"
    },
    {
        "text": "''",
        "type": "UncategorizedText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "In romanText, some data elements are tags, that is a tag name, a colon,\noptional whitespace, and data. In non-RTTagged elements, there is just\ndata.\nAll tagged tokens are subclasses of this class. Examples are:\n\nTitle: Die Jahrzeiten\nComposer: Fanny Mendelssohn\n\n>>> rtTag = romanText.rtObjects.RTTagged('Title: Die Jahrzeiten')\n>>> rtTag.tag\n'Title'\n>>> rtTag.data\n'Die Jahrzeiten'\n>>> rtTag.isTitle()\nTrue\n>>> rtTag.isComposer()\nFalse",
        "type": "ListItem"
    },
    {
        "text": "RTTagged bases",
        "type": "NarrativeText"
    },
    {
        "text": "RTToken",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "RTTagged read-only properties",
        "type": "NarrativeText"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "RTTagged methods",
        "type": "NarrativeText"
    },
    {
        "text": "RTTagged.",
        "type": "NarrativeText"
    },
    {
        "text": "isAnalyst",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "True if tag represents an analyst, otherwise False.\n>>> tag = romanText.rtObjects.RTTagged('Analyst: This is an analyst.')\n>>> tag.isAnalyst()\nTrue\n\n\n>>> tag = romanText.rtObjects.RTTagged('Nothing: Nothing at all.')\n>>> tag.isAnalyst()\nFalse",
        "type": "ListItem"
    },
    {
        "text": "RTTagged.",
        "type": "NarrativeText"
    },
    {
        "text": "isComposer",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "True is the tag represents a composer.\n>>> rth = romanText.rtObjects.RTTagged('Composer: Claudio Monteverdi')\n>>> rth.isComposer()\nTrue\n>>> rth.isTitle()\nFalse\n>>> rth.isWork()\nFalse\n>>> rth.data\n'Claudio Monteverdi'",
        "type": "ListItem"
    },
    {
        "text": "RTTagged.",
        "type": "NarrativeText"
    },
    {
        "text": "isForm",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "True if tag represents a form, otherwise False.\n>>> tag = romanText.rtObjects.RTTagged('Form: This is a form.')\n>>> tag.isForm()\nTrue\n\n\n>>> tag = romanText.rtObjects.RTTagged('Nothing: Nothing at all.')\n>>> tag.isForm()\nFalse",
        "type": "ListItem"
    },
    {
        "text": "RTTagged.",
        "type": "NarrativeText"
    },
    {
        "text": "isKeySignature",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "True if tag represents a key signature, otherwise False.\n>>> tag = romanText.rtObjects.RTTagged('KeySignature: This is a key signature.')\n>>> tag.isKeySignature()\nTrue\n>>> tag.data\n'This is a key signature.'\n\n\nKeySignatures are a type of tagged data found outside of measures,\nsuch as \u009cKey Signature: -1\u009d meaning one flat.\nKey signatures are generally numbers representing the number of sharps (or\nnegative for flats).  Non-standard key signatures are not supported.\n>>> tag = romanText.rtObjects.RTTagged('KeySignature: -3')\n>>> tag.data\n'-3'\n\n\nmusic21 supports one legacy key signature type: KeySignature: Bb which\nrepresents a one-flat signature.  Important to note: no other key signatures\nof this type are supported.  (For instance, KeySignature: Ab has no effect)\n>>> tag = romanText.rtObjects.RTTagged('KeySignature: Bb')\n>>> tag.data\n'Bb'\n\n\nTesting that .isKeySignature returns False for non-key signatures:\n>>> tag = romanText.rtObjects.RTTagged('Nothing: Nothing at all.')\n>>> tag.isKeySignature()\nFalse\n\n\nN.B.: this is not the same as a key definition found inside a\nMeasure. These are represented by RTKey rtObjects, defined below, and are\nnot RTTagged rtObjects, but RTAtom subclasses.",
        "type": "ListItem"
    },
    {
        "text": "RTTagged.",
        "type": "NarrativeText"
    },
    {
        "text": "isMovement",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "True if tag represents a movement, otherwise False.\n>>> tag = romanText.rtObjects.RTTagged('Movement: This is a movement.')\n>>> tag.isMovement()\nTrue\n\n\n>>> tag = romanText.rtObjects.RTTagged('Nothing: Nothing at all.')\n>>> tag.isMovement()\nFalse",
        "type": "ListItem"
    },
    {
        "text": "RTTagged.",
        "type": "NarrativeText"
    },
    {
        "text": "isNote",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "True if tag represents a note, otherwise False.\n>>> tag = romanText.rtObjects.RTTagged('Note: This is a note.')\n>>> tag.isNote()\nTrue\n\n\n>>> tag = romanText.rtObjects.RTTagged('Nothing: Nothing at all.')\n>>> tag.isNote()\nFalse",
        "type": "ListItem"
    },
    {
        "text": "RTTagged.",
        "type": "NarrativeText"
    },
    {
        "text": "isPedal",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "True if tag represents a pedal, otherwise False.\n>>> tag = romanText.rtObjects.RTTagged('Pedal: This is a pedal.')\n>>> tag.isPedal()\nTrue\n\n\n>>> tag = romanText.rtObjects.RTTagged('Nothing: Nothing at all.')\n>>> tag.isPedal()\nFalse",
        "type": "ListItem"
    },
    {
        "text": "RTTagged.",
        "type": "NarrativeText"
    },
    {
        "text": "isPiece",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "True if tag represents a piece, otherwise False.\n>>> tag = romanText.rtObjects.RTTagged('Piece: This is a piece.')\n>>> tag.isPiece()\nTrue\n\n\n>>> tag = romanText.rtObjects.RTTagged('Nothing: Nothing at all.')\n>>> tag.isPiece()\nFalse",
        "type": "ListItem"
    },
    {
        "text": "RTTagged.",
        "type": "NarrativeText"
    },
    {
        "text": "isProofreader",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "True if tag represents a proofreader, otherwise False.\n>>> tag = romanText.rtObjects.RTTagged('Proofreader: This is a proofreader.')\n>>> tag.isProofreader()\nTrue\n\n\n>>> tag = romanText.rtObjects.RTTagged('Nothing: Nothing at all.')\n>>> tag.isProofreader()\nFalse",
        "type": "ListItem"
    },
    {
        "text": "RTTagged.",
        "type": "NarrativeText"
    },
    {
        "text": "isSeventhMinor",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "True if tag represents a configuration setting for setting vii/viio/VII in minor\n>>> tag = romanText.rtObjects.RTTagged('Seventh Minor: Courtesy')\n>>> tag.isSeventhMinor()\nTrue\n>>> tag.data\n'Courtesy'",
        "type": "ListItem"
    },
    {
        "text": "RTTagged.",
        "type": "NarrativeText"
    },
    {
        "text": "isSixthMinor",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "True if tag represents a configuration setting for setting vi/vio/VI in minor\n>>> tag = romanText.rtObjects.RTTagged('Sixth Minor: Flat')\n>>> tag.isSixthMinor()\nTrue\n>>> tag.data\n'Flat'",
        "type": "ListItem"
    },
    {
        "text": "RTTagged.",
        "type": "NarrativeText"
    },
    {
        "text": "isTimeSignature",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "True if tag represents a time signature, otherwise False.\n>>> tag = romanText.rtObjects.RTTagged('TimeSignature: This is a time signature.')\n>>> tag.isTimeSignature()\nTrue\n\n\n>>> tag = romanText.rtObjects.RTTagged('Nothing: Nothing at all.')\n>>> tag.isTimeSignature()\nFalse\n\n\nTimeSignature header data can be found intermingled with measures.",
        "type": "ListItem"
    },
    {
        "text": "RTTagged.",
        "type": "NarrativeText"
    },
    {
        "text": "isTitle",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "True if tag represents a title, otherwise False.\n>>> tag = romanText.rtObjects.RTTagged('Title: This is a title.')\n>>> tag.isTitle()\nTrue\n\n\n>>> tag = romanText.rtObjects.RTTagged('Nothing: Nothing at all.')\n>>> tag.isTitle()\nFalse",
        "type": "ListItem"
    },
    {
        "text": "RTTagged.",
        "type": "NarrativeText"
    },
    {
        "text": "isVersion",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "True if tag defines the version of RomanText standard used,\notherwise False.\nPieces without the tag are defined to conform to RomanText 1.0,\nthe version described in the ISMIR publication.\n>>> rth = romanText.rtObjects.RTTagged('RTVersion: 1.0')\n>>> rth.isTitle()\nFalse\n>>> rth.isVersion()\nTrue\n>>> rth.tag\n'RTVersion'\n>>> rth.data\n'1.0'",
        "type": "ListItem"
    },
    {
        "text": "RTTagged.",
        "type": "NarrativeText"
    },
    {
        "text": "isWork",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "True if tag represents a work, otherwise False.\nThe \u009cwork\u009d is not defined as a header tag, but is used to represent\nall tags, often placed after Composer, for the work or pieces designation.\n>>> rth = romanText.rtObjects.RTTagged('Work: BWV232')\n>>> rth.isWork()\nTrue\n>>> rth.tag\n'Work'\n>>> rth.data\n'BWV232'\n\n\nFor historical reasons, the tag \u0098Madrigal' also designates a work.\n>>> rth = romanText.rtObjects.RTTagged('Madrigal: 4.12')\n>>> rth.isTitle()\nFalse\n>>> rth.isWork()\nTrue\n>>> rth.tag\n'Madrigal'\n>>> rth.data\n'4.12'",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from RTToken:",
        "type": "NarrativeText"
    },
    {
        "text": "isAtom() isMeasure()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "RTToken\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.romanText.rtObjects.",
        "type": "Title"
    },
    {
        "text": "RTToken",
        "type": "NarrativeText"
    },
    {
        "text": "src",
        "type": "Title"
    },
    {
        "text": "''",
        "type": "UncategorizedText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Stores each linear, logical entity of a RomanText.\nA multi-pass parsing procedure is likely necessary, as RomanText permits\nvariety of groupings and markings.\n>>> rtt = romanText.rtObjects.RTToken('||:')\n>>> rtt\n<music21.romanText.rtObjects.RTToken '||:'>\n\n\nA standard RTToken returns False for all the following.\n>>> rtt.isComposer() or rtt.isTitle() or rtt.isPiece()\nFalse\n>>> rtt.isAnalyst() or rtt.isProofreader()\nFalse\n>>> rtt.isTimeSignature() or rtt.isKeySignature() or rtt.isNote()\nFalse\n>>> rtt.isForm() or rtt.isPedal() or rtt.isMeasure() or rtt.isWork()\nFalse\n>>> rtt.isMovement() or rtt.isVersion() or rtt.isAtom()\nFalse",
        "type": "ListItem"
    },
    {
        "text": "RTToken bases",
        "type": "NarrativeText"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "RTToken read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "RTToken methods",
        "type": "Title"
    },
    {
        "text": "RTToken.",
        "type": "Title"
    },
    {
        "text": "isAnalyst",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "RTToken.",
        "type": "Title"
    },
    {
        "text": "isAtom",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Atoms are any untagged data; generally only found inside a\nmeasure definition.",
        "type": "ListItem"
    },
    {
        "text": "RTToken.",
        "type": "Title"
    },
    {
        "text": "isComposer",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "RTToken.",
        "type": "Title"
    },
    {
        "text": "isForm",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Occasionally found in header.",
        "type": "ListItem"
    },
    {
        "text": "RTToken.",
        "type": "Title"
    },
    {
        "text": "isKeySignature",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "RTToken.",
        "type": "Title"
    },
    {
        "text": "isMeasure",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "RTToken.",
        "type": "Title"
    },
    {
        "text": "isMovement",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "RTToken.",
        "type": "Title"
    },
    {
        "text": "isNote",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "RTToken.",
        "type": "Title"
    },
    {
        "text": "isPedal",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "RTToken.",
        "type": "Title"
    },
    {
        "text": "isPiece",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "RTToken.",
        "type": "Title"
    },
    {
        "text": "isProofreader",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "RTToken.",
        "type": "Title"
    },
    {
        "text": "isTimeSignature",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "RTToken.",
        "type": "Title"
    },
    {
        "text": "isTitle",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "RTToken.",
        "type": "Title"
    },
    {
        "text": "isVersion",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "RTToken.",
        "type": "Title"
    },
    {
        "text": "isWork",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.romanText.rtObjects",
        "type": "ListItem"
    },
    {
        "text": "\u00a9 Copyright 2006-2023 Michael Scott Asato Cuthbert.\n      Last updated on Jun 12, 2023.",
        "type": "NarrativeText"
    }
]