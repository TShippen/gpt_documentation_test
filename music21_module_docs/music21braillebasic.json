[
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.basic",
        "type": "ListItem"
    },
    {
        "text": "Previous topic",
        "type": "Title"
    },
    {
        "text": "music21.beam",
        "type": "Title"
    },
    {
        "text": "Next topic",
        "type": "Title"
    },
    {
        "text": "music21.braille.examples",
        "type": "Title"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "music21.braille.basic\nFunctions\nbarlineToBraille()\nbrailleAsciiToBrailleUnicode()\nbrailleUnicodeToBrailleAscii()\nbrailleUnicodeToSymbols()\nchordToBraille()\nclefToBraille()\ndynamicToBraille()\nhandleArticulations()\nhandleExpressions()\nhandlePitchWithAccidental()\ninstrumentToBraille()\nkeySigToBraille()\nmetronomeMarkToBraille()\nnoteToBraille()\nnumberToBraille()\npitchToOctave()\nrestToBraille()\nshowOctaveWithNote()\ntempoTextToBraille()\ntextExpressionToBraille()\ntimeSigToBraille()\ntranscribeHeading()\ntranscribeNoteFingering()\ntranscribeSignatures()\nwordToBraille()\nyieldBrailleArticulations()\nyieldDots()",
        "type": "ListItem"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "About music21",
        "type": "ListItem"
    },
    {
        "text": "User's Guide",
        "type": "ListItem"
    },
    {
        "text": "Module Reference",
        "type": "ListItem"
    },
    {
        "text": "Installation",
        "type": "ListItem"
    },
    {
        "text": "Developer Reference",
        "type": "ListItem"
    },
    {
        "text": "Documentation and tests in progress",
        "type": "ListItem"
    },
    {
        "text": "Quick search",
        "type": "Title"
    },
    {
        "text": "This Page",
        "type": "Title"
    },
    {
        "text": "Show Source",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.basic\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "Basic tools for working with Braille in music21.  Most users will not need to\nuse these.  Simply call .show(\u0098braille') or .show(\u0098braille.ascii')",
        "type": "NarrativeText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "soprano",
        "type": "Title"
    },
    {
        "text": "corpus",
        "type": "Title"
    },
    {
        "text": "parse",
        "type": "Title"
    },
    {
        "text": "'bwv66.6'",
        "type": "UncategorizedText"
    },
    {
        "text": "parts",
        "type": "Title"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "soprano",
        "type": "Title"
    },
    {
        "text": "show",
        "type": "Title"
    },
    {
        "text": "'braille.ascii'",
        "type": "Title"
    },
    {
        "text": "%%%.C",
        "type": "UncategorizedText"
    },
    {
        "text": "#J .DJ [W?<L$ ?W[<L? IJ\\]<L[ WW]$ [W?<L?",
        "type": "UncategorizedText"
    },
    {
        "text": "\"[W?[ \\]R<L Q]]@C ]G%F]<L<K",
        "type": "UncategorizedText"
    },
    {
        "text": "Normally this would open up in a new window.  But to store the data, use\nconverter.toData(\u2026, \u0098braille').  Here we show this in Unicode braille\n(the default for format braille)",
        "type": "NarrativeText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "data",
        "type": "Title"
    },
    {
        "text": "converter",
        "type": "Title"
    },
    {
        "text": "toData",
        "type": "Title"
    },
    {
        "text": "soprano",
        "type": "Title"
    },
    {
        "text": "'braille'",
        "type": "Title"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "print",
        "type": "Title"
    },
    {
        "text": "data",
        "type": "Title"
    },
    {
        "text": "\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u00a9\u00e2\u00a0\u00a9\u00e2\u00a0\u00a9\u00e2\u00a0\u00a8\u00e2\u00a0\u0089\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080",
        "type": "Title"
    },
    {
        "text": "\u00e2\u00a0\u00bc\u00e2\u00a0\u009a\u00e2\u00a0\u0080\u00e2\u00a0\u00a8\u00e2\u00a0\u0099\u00e2\u00a0\u009a\u00e2\u00a0\u0080\u00e2\u00a0\u00aa\u00e2\u00a0\u00ba\u00e2\u00a0\u00b9\u00e2\u00a0\u00a3\u00e2\u00a0\u0087\u00e2\u00a0\u00ab\u00e2\u00a0\u0080\u00e2\u00a0\u00b9\u00e2\u00a0\u00ba\u00e2\u00a0\u00aa\u00e2\u00a0\u00a3\u00e2\u00a0\u0087\u00e2\u00a0\u00b9\u00e2\u00a0\u0080\u00e2\u00a0\u008a\u00e2\u00a0\u009a\u00e2\u00a0\u00b3\u00e2\u00a0\u00bb\u00e2\u00a0\u00a3\u00e2\u00a0\u0087\u00e2\u00a0\u00aa\u00e2\u00a0\u0080\u00e2\u00a0\u00ba\u00e2\u00a0\u00ba\u00e2\u00a0\u00bb\u00e2\u00a0\u00ab\u00e2\u00a0\u0080\u00e2\u00a0\u00aa\u00e2\u00a0\u00ba\u00e2\u00a0\u00b9\u00e2\u00a0\u00a3\u00e2\u00a0\u0087\u00e2\u00a0\u00b9",
        "type": "NarrativeText"
    },
    {
        "text": "\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0090\u00e2\u00a0\u00aa\u00e2\u00a0\u00ba\u00e2\u00a0\u00b9\u00e2\u00a0\u00aa\u00e2\u00a0\u0080\u00e2\u00a0\u00b3\u00e2\u00a0\u00bb\u00e2\u00a0\u0097\u00e2\u00a0\u00a3\u00e2\u00a0\u0087\u00e2\u00a0\u0080\u00e2\u00a0\u009f\u00e2\u00a0\u00bb\u00e2\u00a0\u00bb\u00e2\u00a0\u0088\u00e2\u00a0\u0089\u00e2\u00a0\u0080\u00e2\u00a0\u00bb\u00e2\u00a0\u009b\u00e2\u00a0\u00a9\u00e2\u00a0\u008b\u00e2\u00a0\u00bb\u00e2\u00a0\u00a3\u00e2\u00a0\u0087\u00e2\u00a0\u00a3\u00e2",
        "type": "NarrativeText"
    },
    {
        "text": "Any Music21Object which cannot be transcribed in\nbasic returns a braille literary question mark\nand outputs a warning to the console, rather than raising an exception.\nThis is so that a transcription of a Stream in\ntranslate is completed as thoroughly as possible.",
        "type": "NarrativeText"
    },
    {
        "text": "Functions\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "music21.braille.basic.",
        "type": "Title"
    },
    {
        "text": "barlineToBraille",
        "type": "Title"
    },
    {
        "text": "music21Barline",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Takes in a Barline and returns its representation\nas a braille string in UTF-8 unicode.\n\nNote\nOnly dashed, double barlines, and final barlines can be transcribed.\n\n>>> from music21.braille.basic import barlineToBraille\n>>> doubleBarline = bar.Barline('double')\n>>> print(barlineToBraille(doubleBarline))\n\u00e2\u00a0\u00a3\u00e2\u00a0\u0085\u00e2\u00a0\u0084\n>>> finalBarline = bar.Barline('final')\n>>> print(barlineToBraille(finalBarline))\n\u00e2\u00a0\u00a3\u00e2\u00a0\u0085\n\n\nHeavy gives an \u009cunusual barline\u009d symbol\n>>> heavyBarline = bar.Barline('heavy')\n>>> print(barlineToBraille(heavyBarline))\n\u00e2\u00a0\u0087",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.basic.",
        "type": "Title"
    },
    {
        "text": "brailleAsciiToBrailleUnicode",
        "type": "Title"
    },
    {
        "text": "brailleAscii",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "\u2192 str",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "translates a braille ASCII string to braille UTF-8 unicode, which\ncan then be displayed on-screen in braille on compatible systems.\n\nNote\nThe function works by corresponding ASCII symbols to braille\nsymbols in a very direct fashion. It is not a translator from plain\ntext to braille, because ASCII symbols may not correspond to their\nequivalents in braille. For example, a literal period is a 4 in\nbraille ASCII. Also, all letters are translated into their lowercase\nequivalents, and any capital letters are indicated by preceding them\nwith a comma.\n\n>>> t1 = braille.basic.brailleAsciiToBrailleUnicode(',ANDANTE ,MAESTOSO4')\n>>> t1\n'\u00e2\u00a0\u00a0\u00e2\u00a0\u0081\u00e2\u00a0\u009d\u00e2\u00a0\u0099\u00e2\u00a0\u0081\u00e2\u00a0\u009d\u00e2\u00a0\u009e\u00e2\u00a0\u2018\u00e2\u00a0\u0080\u00e2\u00a0\u00a0\u00e2\u00a0\u008d\u00e2\u00a0\u0081\u00e2\u00a0\u2018\u00e2\u00a0\u008e\u00e2\u00a0\u009e\u00e2\u00a0\u0095\u00e2\u00a0\u008e\u00e2\u00a0\u0095\u00e2\u00a0\u00b2'\n>>> t2 = braille.basic.tempoTextToBraille(tempo.TempoText('Andante Maestoso'))\n>>> t1 == t2\nTrue",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.basic.",
        "type": "Title"
    },
    {
        "text": "brailleUnicodeToBrailleAscii",
        "type": "Title"
    },
    {
        "text": "brailleUnicode",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "translates a braille UTF-8 unicode string into braille ASCII,\nwhich is the format compatible with most braille embossers.\n\nNote\nThe function works by corresponding braille symbols to ASCII symbols.\nThe table which corresponds to said values can be found\nhere.\nBecause of the way in which the braille symbols translate, the resulting\nASCII string will look to a non-reader as gibberish. Also, the eighth-note notes\nin braille music are one-off their corresponding letters\nin both ASCII and written braille.\nThe written D is really a C eighth-note, the written E is really a\nD eighth note, etc.\n\n>>> from music21.braille.basic import brailleUnicodeToBrailleAscii, noteToBraille\n>>> brailleUnicodeToBrailleAscii('\\u2800')\n' '\n>>> Cs8 = note.Note('C#4', quarterLength=0.5)\n>>> Cs8_braille = noteToBraille(Cs8)\n>>> brailleUnicodeToBrailleAscii(Cs8_braille)\n'%\"D'\n>>> Eb8 = note.Note('E-4', quarterLength=0.5)\n>>> Eb8_braille = noteToBraille(Eb8)\n>>> brailleUnicodeToBrailleAscii(Eb8_braille)\n'<\"F'",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.basic.",
        "type": "Title"
    },
    {
        "text": "brailleUnicodeToSymbols",
        "type": "Title"
    },
    {
        "text": "brailleUnicode",
        "type": "Title"
    },
    {
        "text": "filledSymbol",
        "type": "Title"
    },
    {
        "text": "'o'",
        "type": "UncategorizedText"
    },
    {
        "text": "emptySymbol",
        "type": "Title"
    },
    {
        "text": "'\u00c2\u00b7'",
        "type": "UncategorizedText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "translates a braille unicode string into symbols (unicode) \u2014 for debugging.\n>>> print(braille.basic.brailleUnicodeToSymbols('\u00e2\u00a0\u009c'))\n\u00c2\u00b7o\n\u00c2\u00b7o\no\u00c2\u00b7",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.basic.",
        "type": "Title"
    },
    {
        "text": "chordToBraille",
        "type": "Title"
    },
    {
        "text": "music21Chord",
        "type": "Title"
    },
    {
        "text": "descending",
        "type": "NarrativeText"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "showOctave",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Takes in a Chord and returns its representation\nas a braille string in UTF-8 unicode.\nIn braille, only one pitch of a chord is brailled, with the rest represented\nas numeric intervals from that one pitch. If descending is True, the highest\n(sounding) pitch is brailled, and intervals are labeled in descending order;\nif descending is False, the lowest (sounding) pitch is brailled, and the\nintervals are labeled in ascending order. Convention dictates that chords\nfound in the treble clef are brailled descending, and those found in the bass\nclef are brailled ascending.\nIf showOctave is True, the octave of the brailled pitch is shown. Other\noctave marks are shown in context relative to the brailled pitch.\n>>> from music21.braille.basic import chordToBraille\n>>> gMajorTriadA = chord.Chord(['G4', 'B4', 'D5', 'G5'], quarterLength=4.0)\n>>> print(chordToBraille(gMajorTriadA, descending=True))\n\u00e2\u00a0\u00a8\u00e2\u00a0\u00b7\u00e2\u00a0\u00bc\u00e2\u00a0\u00b4\u00e2\u00a0\u00a4\n>>> gMajorTriadB = chord.Chord(['G2', 'B2', 'D3', 'G3'], quarterLength=4.0)\n>>> print(chordToBraille(gMajorTriadB, descending=False))\n\u00e2\u00a0\u0098\u00e2\u00a0\u00b7\u00e2\u00a0\u00ac\u00e2\u00a0\u201d\u00e2\u00a0\u00a4\n>>> gMajorTriadRightHand = chord.Chord(['D4', 'B4', 'G5'], quarterLength=4.0)\n>>> print(chordToBraille(gMajorTriadRightHand, descending=True))\n\u00e2\u00a0\u00a8\u00e2\u00a0\u00b7\u00e2\u00a0\u00b4\u00e2\u00a0\u00bc\n>>> gMajorTriadLeftHand = chord.Chord(['G2', 'D3', 'B3'], quarterLength=4.0)\n>>> print(chordToBraille(gMajorTriadLeftHand, descending=False))\n\u00e2\u00a0\u0098\u00e2\u00a0\u00b7\u00e2\u00a0\u201d\u00e2\u00a0\u00ac\n>>> cMajorTriadRightHand = chord.Chord(['C4', 'E5'], quarterLength=4.0)\n>>> print(chordToBraille(cMajorTriadRightHand, descending=True))\n\u00e2\u00a0\u00a8\u00e2\u00a0\u00af\u00e2\u00a0\u0090\u00e2\u00a0\u00ac\n>>> cMajorTriadLeftHand = chord.Chord(['C2', 'E3'], quarterLength=4.0)\n>>> print(chordToBraille(cMajorTriadLeftHand, descending=False))\n\u00e2\u00a0\u0098\u00e2\u00a0\u00bd\u00e2\u00a0\u00b8\u00e2\u00a0\u00ac\n>>> cMajorSeventhRightHand = chord.Chord(['C6', 'E5', 'B4'], quarterLength=4.0)\n>>> print(chordToBraille(cMajorSeventhRightHand, descending=True))\n\u00e2\u00a0\u00b0\u00e2\u00a0\u00bd\u00e2\u00a0\u00b4\u00e2\u00a0\u008c\n>>> cMajorSeventhLeftHand = chord.Chord(['G2', 'E3', 'E4'], quarterLength=4.0)\n>>> print(chordToBraille(cMajorSeventhLeftHand, descending=False))\n\u00e2\u00a0\u0098\u00e2\u00a0\u00b7\u00e2\u00a0\u00b4\u00e2\u00a0\u0090\u00e2\u00a0\u00b4\n\n\n>>> chordWithoutAccidentals = chord.Chord(['C4', 'E4', 'F4'], quarterLength=4.0)\n>>> print(chordToBraille(chordWithoutAccidentals, descending=True))\n\u00e2\u00a0\u0090\u00e2\u00a0\u00bf\u00e2\u00a0\u008c\u00e2\u00a0\u00bc\n\n\n>>> chordWithAccidentals = chord.Chord(['C4', 'E-4', 'F#4'], quarterLength=4.0)\n>>> chordWithAccidentals.pitches[0].accidental = 'natural'\n>>> print(chordToBraille(chordWithAccidentals, descending=True))\n\u00e2\u00a0\u00a9\u00e2\u00a0\u0090\u00e2\u00a0\u00bf\u00e2\u00a0\u00a3\u00e2\u00a0\u008c\u00e2\u00a0\u00a1\u00e2\u00a0\u00bc",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.basic.",
        "type": "Title"
    },
    {
        "text": "clefToBraille",
        "type": "Title"
    },
    {
        "text": "music21Clef",
        "type": "Title"
    },
    {
        "text": "keyboardHandSwitched",
        "type": "NarrativeText"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Takes in a Clef and returns its representation\nas a braille string in UTF-8 unicode.\nOnly GClef, CClef,\nFClef, NoClef and\ntheir subclasses (such as TrebleClef,\nBassClef) can be transcribed.\nIf keyboardHandSwitched is True, the suffix of the brailled clef changes from dots\n1-2-3 to dots 1-3. In scores of keyboard instruments, this change indicates\nthat the playing hand differs from which implied by the clef. (E.g. A G clef\nin the left-hand part of a piano score needs the change of suffix.) Note\nthat changeSuffix works only for G and F clefs.\n>>> from music21.braille.basic import clefToBraille\n>>> trebleClef = clef.TrebleClef()\n>>> print(clefToBraille(trebleClef))\n\u00e2\u00a0\u009c\u00e2\u00a0\u008c\u00e2\u00a0\u0087\n>>> print(clefToBraille(trebleClef, keyboardHandSwitched=True))\n\u00e2\u00a0\u009c\u00e2\u00a0\u008c\u00e2\u00a0\u0085\n>>> bassClef = clef.BassClef()\n>>> print(clefToBraille(bassClef))\n\u00e2\u00a0\u009c\u00e2\u00a0\u00bc\u00e2\u00a0\u0087\n>>> print(clefToBraille(bassClef, keyboardHandSwitched=True))\n\u00e2\u00a0\u009c\u00e2\u00a0\u00bc\u00e2\u00a0\u0085\n\n\n>>> altoClef = clef.AltoClef()\n>>> print(clefToBraille(altoClef))\n\u00e2\u00a0\u009c\u00e2\u00a0\u00ac\u00e2\u00a0\u0087\n>>> tenorClef = clef.TenorClef()\n>>> print(clefToBraille(tenorClef))\n\u00e2\u00a0\u009c\u00e2\u00a0\u00ac\u00e2\u00a0\u0090\u00e2\u00a0\u0087\n>>> noClef = clef.NoClef()\n>>> clefToBraille(noClef) == ''\nTrue\n>>> sopranoClef = clef.SopranoClef()\n>>> print(f'{sopranoClef.sign}, {sopranoClef.line}, {clefToBraille(sopranoClef)}')\nC, 1, \u00e2\u00a0\u009c\u00e2\u00a0\u00ac\u00e2\u00a0\u0088\u00e2\u00a0\u0087",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.basic.",
        "type": "Title"
    },
    {
        "text": "dynamicToBraille",
        "type": "Title"
    },
    {
        "text": "music21Dynamic",
        "type": "Title"
    },
    {
        "text": "precedeByWordSign",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Takes in a Dynamic and returns its\nvalue as a braille string in\nUTF-8 unicode.\nIf precedeByWordSign is True, the value is preceded by a word\nsign (\u00e2\u00a0\u009c).\n>>> from music21.braille.basic import dynamicToBraille\n>>> print(dynamicToBraille(dynamics.Dynamic('f')))\n\u00e2\u00a0\u009c\u00e2\u00a0\u008b\n>>> print(dynamicToBraille(dynamics.Dynamic('pp')))\n\u00e2\u00a0\u009c\u00e2\u00a0\u008f\u00e2\u00a0\u008f",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.basic.",
        "type": "Title"
    },
    {
        "text": "handleArticulations",
        "type": "Title"
    },
    {
        "text": "music21Note",
        "type": "Title"
    },
    {
        "text": "noteTrans",
        "type": "Title"
    },
    {
        "text": "list[str]",
        "type": "Title"
    },
    {
        "text": "upperFirstInFingering",
        "type": "NarrativeText"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.basic.",
        "type": "Title"
    },
    {
        "text": "handleExpressions",
        "type": "Title"
    },
    {
        "text": "music21Note",
        "type": "Title"
    },
    {
        "text": "GeneralNote",
        "type": "Title"
    },
    {
        "text": "noteTrans",
        "type": "Title"
    },
    {
        "text": "list[str]",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Transcribe the expressions for a note.GeneralNote.",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.basic.",
        "type": "Title"
    },
    {
        "text": "handlePitchWithAccidental",
        "type": "Title"
    },
    {
        "text": "music21Pitch",
        "type": "Title"
    },
    {
        "text": "pitchTrans",
        "type": "Title"
    },
    {
        "text": "brailleEnglish",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.basic.",
        "type": "Title"
    },
    {
        "text": "instrumentToBraille",
        "type": "Title"
    },
    {
        "text": "music21Instrument",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Takes in a Instrument and returns its \u009cbest name\u009d\nas a braille string in UTF-8 unicode.\n>>> from music21.braille.basic import instrumentToBraille\n>>> print(instrumentToBraille(instrument.Bassoon()))\n\u00e2\u00a0\u00a0\u00e2\u00a0\u0083\u00e2\u00a0\u0081\u00e2\u00a0\u008e\u00e2\u00a0\u008e\u00e2\u00a0\u0095\u00e2\u00a0\u0095\u00e2\u00a0\u009d\n>>> print(instrumentToBraille(instrument.BassClarinet()))\n\u00e2\u00a0\u00a0\u00e2\u00a0\u0083\u00e2\u00a0\u0081\u00e2\u00a0\u008e\u00e2\u00a0\u008e\u00e2\u00a0\u0080\u00e2\u00a0\u0089\u00e2\u00a0\u0087\u00e2\u00a0\u0081\u00e2\u00a0\u0097\u00e2\u00a0\u008a\u00e2\u00a0\u009d\u00e2\u00a0\u2018\u00e2\u00a0\u009e",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.basic.",
        "type": "Title"
    },
    {
        "text": "keySigToBraille",
        "type": "Title"
    },
    {
        "text": "music21KeySignature",
        "type": "Title"
    },
    {
        "text": "outgoingKeySig",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Takes in a KeySignature and returns its representation\nin braille as a string in UTF-8 unicode.\n>>> from music21.braille.basic import keySigToBraille\n>>> print(keySigToBraille(key.KeySignature(4)))\n\u00e2\u00a0\u00bc\u00e2\u00a0\u0099\u00e2\u00a0\u00a9\n\n\nIf given an old key signature, then its cancellation will be applied before\nand in relation to the new key signature.\n>>> print(keySigToBraille(key.KeySignature(0), outgoingKeySig = key.KeySignature(-3)))\n\u00e2\u00a0\u00a1\u00e2\u00a0\u00a1\u00e2\u00a0\u00a1",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.basic.",
        "type": "Title"
    },
    {
        "text": "metronomeMarkToBraille",
        "type": "Title"
    },
    {
        "text": "music21MetronomeMark",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Takes in a MetronomeMark and returns it as a\nbraille string in UTF-8 unicode.\nThe format is (note C with duration of metronome's referent)(metronome symbol)(number/bpm).\n>>> from music21.braille.basic import metronomeMarkToBraille\n>>> mm1 = tempo.MetronomeMark(number=80, referent=note.Note(type='half'))\n>>> print(metronomeMarkToBraille(mm1))\n\u00e2\u00a0\u009d\u00e2\u00a0\u00b6\u00e2\u00a0\u00bc\u00e2\u00a0\u201c\u00e2\u00a0\u009a\n>>> mm2 = tempo.MetronomeMark(number=135, referent=note.Note(quarterLength=0.5))\n>>> print(metronomeMarkToBraille(mm2))\n\u00e2\u00a0\u0099\u00e2\u00a0\u00b6\u00e2\u00a0\u00bc\u00e2\u00a0\u0081\u00e2\u00a0\u0089\u00e2\u00a0\u2018\n\n\n>>> mm3 = tempo.MetronomeMark(numberSounding=80)\n>>> metronomeMarkToBraille(mm3)\n''",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.basic.",
        "type": "Title"
    },
    {
        "text": "noteToBraille",
        "type": "Title"
    },
    {
        "text": "music21Note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "showOctave",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "upperFirstInFingering",
        "type": "NarrativeText"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given a Note, returns the appropriate braille\ncharacters as a string in UTF-8 unicode.\nThe format for note display in braille is the accidental (if necessary)\n+ octave (if necessary) + pitch name with length.\nIf the note has an Accidental, the accidental is always\ndisplayed unless its displayStatus is set to\nFalse. The octave of the note is only displayed if showOctave is set to True.\n>>> from music21.braille.basic import noteToBraille\n>>> C4 = note.Note('C4')\n>>> print(noteToBraille(C4))\n\u00e2\u00a0\u0090\u00e2\u00a0\u00b9\n>>> C4.quarterLength = 2.0\n>>> print(noteToBraille(C4))\n\u00e2\u00a0\u0090\u00e2\u00a0\u009d\n>>> Ds4 = note.Note('D#4')\n>>> print(noteToBraille(Ds4))\n\u00e2\u00a0\u00a9\u00e2\u00a0\u0090\u00e2\u00a0\u00b1\n>>> print(noteToBraille(Ds4, showOctave=False))\n\u00e2\u00a0\u00a9\u00e2\u00a0\u00b1\n>>> Ds4.pitch.accidental.displayStatus=False\n>>> print(noteToBraille(Ds4))\n\u00e2\u00a0\u0090\u00e2\u00a0\u00b1\n>>> A2 = note.Note('A2')\n>>> A2.quarterLength = 3.0\n>>> print(noteToBraille(A2))\n\u00e2\u00a0\u0098\u00e2\u00a0\u008e\u00e2\u00a0\u0084\n\n\n>>> B = note.Note('B4')\n>>> f = expressions.Fermata()\n>>> B.expressions.append(f)\n>>> print(noteToBraille(B))\n\u00e2\u00a0\u0090\u00e2\u00a0\u00ba\u00e2\u00a0\u00a3\u00e2\u00a0\u0087\n>>> for x in B.editorial.brailleEnglish:\n...     print(x)\nOctave 4 \u00e2\u00a0\u0090\nB quarter \u00e2\u00a0\u00ba\nNote-fermata: Shape normal: \u00e2\u00a0\u00a3\u00e2\u00a0\u0087\n\n\n>>> f.shape = 'square'\n>>> print(noteToBraille(B))\n\u00e2\u00a0\u0090\u00e2\u00a0\u00ba\u00e2\u00a0\u00b0\u00e2\u00a0\u00a3\u00e2\u00a0\u0087\n>>> for x in B.editorial.brailleEnglish:\n...     print(x)\nOctave 4 \u00e2\u00a0\u0090\nB quarter \u00e2\u00a0\u00ba\nNote-fermata: Shape square: \u00e2\u00a0\u00b0\u00e2\u00a0\u00a3\u00e2\u00a0\u0087\n\n\n>>> C4 = note.Note('C4')\n>>> print(noteToBraille(C4))\n\u00e2\u00a0\u0090\u00e2\u00a0\u00b9\n>>> C4.duration.appendTuplet(duration.Tuplet(3, 2))  # triplet\n>>> print(noteToBraille(C4))\n\u00e2\u00a0\u0090\u00e2\u00a0\u00b9\n>>> C4.beamStart = True\n>>> print(noteToBraille(C4))\n\u00e2\u00a0\u0086\u00e2\u00a0\u0090\u00e2\u00a0\u00b9\n>>> for x in C4.editorial.brailleEnglish:\n...     print(x)\nTriplet \u00e2\u00a0\u0086\nOctave 4 \u00e2\u00a0\u0090\nC quarter \u00e2\u00a0\u00b9\n\n\n>>> C4 = note.Note('C4')\n>>> C4.duration.appendTuplet(duration.Tuplet(7, 4))  # septuplet\n>>> C4.beamStart = True\n>>> print(noteToBraille(C4))\n\u00e2\u00a0\u00b8\u00e2\u00a0\u00b6\u00e2\u00a0\u0084\u00e2\u00a0\u0090\u00e2\u00a0\u00b9\n>>> for x in C4.editorial.brailleEnglish:\n...     print(x)\nSeptuplet \u00e2\u00a0\u00b8\u00e2\u00a0\u00b6\u00e2\u00a0\u0084\nOctave 4 \u00e2\u00a0\u0090\nC quarter \u00e2\u00a0\u00b9",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.basic.",
        "type": "Title"
    },
    {
        "text": "numberToBraille",
        "type": "Title"
    },
    {
        "text": "sampleNumber",
        "type": "Title"
    },
    {
        "text": "int",
        "type": "Title"
    },
    {
        "text": "withNumberSign",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "lower",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "\u2192 str",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Transcribes a number to UTF-8 braille. By default, the result number\noccupies the upper two thirds of braille cells with a leading number sign.\nIf withNumberSign is set to False, the leading number sign will be removed.\nIf lower is set to True, the position will be changed from the upper (1245\ndots) to the lower (2356 dots).\n>>> from music21.braille.basic import numberToBraille\n>>> print(numberToBraille(12))\n\u00e2\u00a0\u00bc\u00e2\u00a0\u0081\u00e2\u00a0\u0083\n>>> print(numberToBraille(7))\n\u00e2\u00a0\u00bc\u00e2\u00a0\u009b\n>>> print(numberToBraille(37))\n\u00e2\u00a0\u00bc\u00e2\u00a0\u0089\u00e2\u00a0\u009b",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.basic.",
        "type": "Title"
    },
    {
        "text": "pitchToOctave",
        "type": "Title"
    },
    {
        "text": "music21PitchOrInt",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "takes a pitch object and returns the brailling for the octave.\nCan also be given an int specifying the octave.\nExpands the definition given in Degarmo Ch 7 to allow even less commonly used octaves such\nas -1, and > 8 by tripling, etc. the number of octave marks.\n>>> pitchToOctave = braille.basic.pitchToOctave\n>>> print(pitchToOctave(pitch.Pitch('C4')))\n\u00e2\u00a0\u0090\n>>> print(pitchToOctave(pitch.Pitch('B-4')))\n\u00e2\u00a0\u0090\n>>> print(pitchToOctave(4))\n\u00e2\u00a0\u0090\n>>> print(pitchToOctave(3))\n\u00e2\u00a0\u00b8\n>>> print(pitchToOctave(2))\n\u00e2\u00a0\u0098\n>>> print(pitchToOctave(1))\n\u00e2\u00a0\u0088\n>>> print(pitchToOctave(0))\n\u00e2\u00a0\u0088\u00e2\u00a0\u0088\n>>> print(pitchToOctave(-1))\n\u00e2\u00a0\u0088\u00e2\u00a0\u0088\u00e2\u00a0\u0088\n>>> print(pitchToOctave(5))\n\u00e2\u00a0\u00a8\n>>> print(pitchToOctave(6))\n\u00e2\u00a0\u00b0\n>>> print(pitchToOctave(7))\n\u00e2\u00a0\u00a0\n>>> print(pitchToOctave(8))\n\u00e2\u00a0\u00a0\u00e2\u00a0\u00a0\n>>> print(pitchToOctave(9))\n\u00e2\u00a0\u00a0\u00e2\u00a0\u00a0\u00e2",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.basic.",
        "type": "Title"
    },
    {
        "text": "restToBraille",
        "type": "Title"
    },
    {
        "text": "music21Rest",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given a Rest, returns the appropriate braille\ncharacters as a string in UTF-8 unicode.\nCurrently, only supports single rests with or without dots.\nComplex rests are not supported.\n>>> from music21.braille.basic import restToBraille\n>>> dottedQuarter = note.Rest(quarterLength=1.5)\n>>> print(restToBraille(dottedQuarter))\n\u00e2\u00a0\u00a7\u00e2\u00a0\u0084\n>>> whole = note.Rest(quarterLength=4.0)\n>>> print(restToBraille(whole))\n\u00e2\u00a0\u008d\n\n\nThis would give a warning and gives the basic_exception symbol:\nquarterPlusSixteenth = note.Rest(quarterLength=1.25)\nprint(restToBraille(quarterPlusSixteenth))\n\u00e2\u00a0\u009c\u00e2\u00a0\u00a6",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.basic.",
        "type": "Title"
    },
    {
        "text": "showOctaveWithNote",
        "type": "Title"
    },
    {
        "text": "previousNote",
        "type": "Title"
    },
    {
        "text": "currentNote",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Determines whether a currentNote carries an octave designation\nin relation to a previous Note.\nRules:\n\nIf currentNote is found within a second or third\nof previousNote, currentNote does not\ncarry an octave designation.\nIf currentNote is found a sixth or\nmore away from previousNote, currentNote does carry\nan octave designation.\nIf currentNote is found within a fourth or fifth\nof previousNote, currentNote carries\nan octave designation if and only if currentNote and\npreviousNote are not found in the\nsame octave.\n\nOf course, these rules cease to apply in quite a few cases,\nwhich are not directly reflected\nin the results of this function:\n\nIf a braille measure goes to a new line, the first note in the measure carries an\noctave designation regardless of what the previous note was.\nIf a braille measure contains a new key or time signature, the first note carries\nan octave designation regardless of what the previous note was.\nIf a new key or time signature occurs in the middle of a measure, or if a double bar\nline is encountered, both of which would necessitate a music hyphen, the next note after\nthose cases needs an octave marking.\n\nIf any special case happens, previousNote can be set to None and the function will return\nTrue.\n>>> from music21.braille.basic import showOctaveWithNote\n>>> showOctaveWithNote(note.Note('C4'), note.Note('E4'))\nFalse\n>>> showOctaveWithNote(note.Note('C4'), note.Note('F4'))\nFalse\n>>> showOctaveWithNote(note.Note('C4'), note.Note('F3'))\nTrue\n>>> showOctaveWithNote(note.Note('C4'), note.Note('A4'))\nTrue\n\n\nIf previousNote is None, it is always True\n>>> showOctaveWithNote(None, note.Note('A4'))\nTrue",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.basic.",
        "type": "Title"
    },
    {
        "text": "tempoTextToBraille",
        "type": "Title"
    },
    {
        "text": "music21TempoText",
        "type": "Title"
    },
    {
        "text": "tempo.TempoText",
        "type": "Title"
    },
    {
        "text": "maxLineLength",
        "type": "Title"
    },
    {
        "text": "40",
        "type": "UncategorizedText"
    },
    {
        "text": "\u2192 str",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Takes in a TempoText and returns its representation in braille\nas a string in UTF-8 unicode. The tempo text is returned uncentered, and is split around\nthe comma, each split returned on a separate line. The literary period required at the end\nof every tempo text expression in braille is also included.\n>>> from music21.braille.basic import tempoTextToBraille\n>>> print(tempoTextToBraille(tempo.TempoText('Lento assai, cantante e tranquillo')))\n\u00e2\u00a0\u00a0\u00e2\u00a0\u0087\u00e2\u00a0\u2018\u00e2\u00a0\u009d\u00e2\u00a0\u009e\u00e2\u00a0\u0095\u00e2\u00a0\u0080\u00e2\u00a0\u0081\u00e2\u00a0\u008e\u00e2\u00a0\u008e\u00e2\u00a0\u0081\u00e2\u00a0\u008a\u00e2\u00a0\u0082\n\u00e2\u00a0\u0089\u00e2\u00a0\u0081\u00e2\u00a0\u009d\u00e2\u00a0\u009e\u00e2\u00a0\u0081\u00e2\u00a0\u009d\u00e2\u00a0\u009e\u00e2\u00a0\u2018\u00e2\u00a0\u0080\u00e2\u00a0\u2018\u00e2\u00a0\u0080\u00e2\u00a0\u009e\u00e2\u00a0\u0097\u00e2\u00a0\u0081\u00e2\u00a0\u009d\u00e2\u00a0\u009f\u00e2\u00a0\u00a5\u00e2\u00a0\u008a\u00e2\u00a0\u0087\u00e2\u00a0\u0087\u00e2\u00a0\u0095\u00e2\u00a0\u00b2\n>>> print(tempoTextToBraille(tempo.TempoText('Andante molto grazioso')))\n\u00e2\u00a0\u00a0\u00e2\u00a0\u0081\u00e2\u00a0\u009d\u00e2\u00a0\u0099\u00e2\u00a0\u0081\u00e2\u00a0\u009d\u00e2\u00a0\u009e\u00e2\u00a0\u2018\u00e2\u00a0\u0080\u00e2\u00a0\u008d\u00e2\u00a0\u0095\u00e2\u00a0\u0087\u00e2\u00a0\u009e\u00e2\u00a0\u0095\u00e2\u00a0\u0080\u00e2\u00a0\u009b\u00e2\u00a0\u0097\u00e2\u00a0\u0081\u00e2\u00a0\u00b5\u00e2\u00a0\u008a\u00e2\u00a0\u0095\u00e2\u00a0\u008e\u00e2\u00a0\u0095\u00e2\u00a0\u00b2\n\n\n>>> print(tempoTextToBraille(tempo.TempoText('Andante molto grazioso ma cantabile')))\n\u00e2\u00a0\u00a0\u00e2\u00a0\u0081\u00e2\u00a0\u009d\u00e2\u00a0\u0099\u00e2\u00a0\u0081\u00e2\u00a0\u009d\u00e2\u00a0\u009e\u00e2\u00a0\u2018\u00e2\u00a0\u0080\u00e2\u00a0\u008d\u00e2\u00a0\u0095\u00e2\u00a0\u0087\u00e2\u00a0\u009e\u00e2\u00a0\u0095\u00e2\u00a0\u0080\u00e2\u00a0\u009b\u00e2\u00a0\u0097\u00e2\u00a0\u0081\u00e2\u00a0\u00b5\u00e2\u00a0\u008a\u00e2\u00a0\u0095\u00e2\u00a0\u008e\u00e2\u00a0\u0095\u00e2\u00a0\u0080\u00e2\u00a0\u008d\u00e2\u00a0\u0081\u00e2\u00a0\u0080\n\u00e2\u00a0\u0089\u00e2\u00a0\u0081\u00e2\u00a0\u009d\u00e2\u00a0\u009e\u00e2\u00a0\u0081\u00e2\u00a0\u0083\u00e2\u00a0\u008a\u00e2\u00a0\u0087\u00e2\u00a0\u2018\u00e2\u00a0\u00b2\n\n\n>>> print(tempoTextToBraille(tempo.TempoText('Andante molto grazioso ma cantabile'),\n...                          maxLineLength=20))\n\u00e2\u00a0\u00a0\u00e2\u00a0\u0081\u00e2\u00a0\u009d\u00e2\u00a0\u0099\u00e2\u00a0\u0081\u00e2\u00a0\u009d\u00e2\u00a0\u009e\u00e2\u00a0\u2018\u00e2\u00a0\u0080\n\u00e2\u00a0\u008d\u00e2\u00a0\u0095\u00e2\u00a0\u0087\u00e2\u00a0\u009e\u00e2\u00a0\u0095\u00e2\u00a0\u0080\n\u00e2\u00a0\u009b\u00e2\u00a0\u0097\u00e2\u00a0\u0081\u00e2\u00a0\u00b5\u00e2\u00a0\u008a\u00e2\u00a0\u0095\u00e2\u00a0\u008e\u00e2\u00a0\u0095\u00e2\u00a0\u0080\u00e2\u00a0\u008d\u00e2\u00a0\u0081\u00e2\u00a0\u0080\n\u00e2\u00a0\u0089\u00e2\u00a0\u0081\u00e2\u00a0\u009d\u00e2\u00a0\u009e\u00e2\u00a0\u0081\u00e2\u00a0\u0083\u00e2\u00a0\u008a\u00e2\u00a0\u0087\u00e2\u00a0\u2018\u00e2\u00a0\u00b2",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.basic.",
        "type": "Title"
    },
    {
        "text": "textExpressionToBraille",
        "type": "Title"
    },
    {
        "text": "music21TextExpression",
        "type": "Title"
    },
    {
        "text": "precedeByWordSign",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Takes in a TextExpression and returns its\nrepresentation in UTF-8 unicode.\nFrom the lookup table:\n>>> from music21.braille.basic import textExpressionToBraille\n>>> print(textExpressionToBraille(expressions.TextExpression('cresc.')))\n\u00e2\u00a0\u009c\u00e2\u00a0\u0089\u00e2\u00a0\u0097\u00e2\u00a0\u0084\n\n\nSingle word expression has word symbol (\u00e2\u00a0\u009c) only at beginning:\n>>> print(textExpressionToBraille(expressions.TextExpression('dolce')))\n\u00e2\u00a0\u009c\u00e2\u00a0\u0099\u00e2\u00a0\u0095\u00e2\u00a0\u0087\u00e2\u00a0\u0089\u00e2\u00a0\u2018\n\n\nMultiple word expression has word symbol at beginning and end.\n>>> print(textExpressionToBraille(expressions.TextExpression('dim. e rall.')))\n\u00e2\u00a0\u009c\u00e2\u00a0\u0099\u00e2\u00a0\u008a\u00e2\u00a0\u008d\u00e2\u00a0\u0084\u00e2\u00a0\u0080\u00e2\u00a0\u2018\u00e2\u00a0\u0080\u00e2\u00a0\u0097\u00e2\u00a0\u0081\u00e2\u00a0\u0087\u00e2\u00a0\u0087\u00e2\u00a0\u0084\u00e2\u00a0\u009c",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.basic.",
        "type": "Title"
    },
    {
        "text": "timeSigToBraille",
        "type": "Title"
    },
    {
        "text": "m21TimeSignature",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Takes in a TimeSignature and returns its\nrepresentation in braille as a string in UTF-8 unicode.\n>>> from music21.braille.basic import timeSigToBraille\n>>> print(timeSigToBraille(meter.TimeSignature('4/4')))\n\u00e2\u00a0\u00bc\u00e2\u00a0\u0099\u00e2\u00a0\u00b2\n>>> print(timeSigToBraille(meter.TimeSignature('3/4')))\n\u00e2\u00a0\u00bc\u00e2\u00a0\u0089\u00e2\u00a0\u00b2\n>>> print(timeSigToBraille(meter.TimeSignature('12/8')))\n\u00e2\u00a0\u00bc\u00e2\u00a0\u0081\u00e2\u00a0\u0083\u00e2\u00a0\u00a6\n>>> print(timeSigToBraille(meter.TimeSignature('c')))\n\u00e2\u00a0\u00a8\u00e2\u00a0\u0089",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.basic.",
        "type": "Title"
    },
    {
        "text": "transcribeHeading",
        "type": "NarrativeText"
    },
    {
        "text": "music21KeySignature",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "music21TimeSignature",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "music21TempoText",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "music21MetronomeMark",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "maxLineLength",
        "type": "Title"
    },
    {
        "text": "40",
        "type": "UncategorizedText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Takes in a KeySignature, TimeSignature,\nTempoText, and\nMetronomeMark and returns its representation in braille as a\nstring in UTF-8 unicode. The contents\nare always centered on a line, whose width is 40 by default.\nIn most cases, the format is (tempo text)(space)(metronome mark)(space)(key/time signature),\ncentered, although all of\nthese need not be included. If all the contents do not fit on one line with at\nleast 3 blank characters on each side, then\nthe tempo text goes on the first line (and additional lines if necessary),\nand the metronome mark + key and time signature\ngoes on the last line.\nIf the resulting heading is of length zero, a BrailleBasicException is raised.\n>>> from music21.braille.basic import transcribeHeading\n>>> print(transcribeHeading(\n...         key.KeySignature(5),\n...         meter.TimeSignature('3/8'),\n...         tempo.TempoText('Allegretto'),\n...         tempo.MetronomeMark(number=135, referent=note.Note(type='eighth'))))\n\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u00a0\u00e2\u00a0\u0081\u00e2\u00a0\u0087\u00e2\u00a0\u0087\u00e2\u00a0\u2018\u00e2\u00a0\u009b\u00e2\u00a0\u0097\u00e2\u00a0\u2018\u00e2\u00a0\u009e\u00e2\u00a0\u009e\u00e2\u00a0\u0095\u00e2\u00a0\u00b2\u00e2\u00a0\u0080\u00e2\u00a0\u0099\u00e2\u00a0\u00b6\u00e2\u00a0\u00bc\u00e2\u00a0\u0081\u00e2\u00a0\u0089\u00e2\u00a0\u2018\u00e2\u00a0\u0080\u00e2\u00a0\u00bc\u00e2\u00a0\u2018\u00e2\u00a0\u00a9\u00e2\u00a0\u00bc\u00e2\u00a0\u0089\u00e2\u00a0\u00a6\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\n>>> print(transcribeHeading(\n...          key.KeySignature(-2),\n...          meter.TimeSignature('common'),\n...          tempo.TempoText('Lento assai, cantante e tranquillo'),\n...          None))\n\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u00a0\u00e2\u00a0\u0087\u00e2\u00a0\u2018\u00e2\u00a0\u009d\u00e2\u00a0\u009e\u00e2\u00a0\u0095\u00e2\u00a0\u0080\u00e2\u00a0\u0081\u00e2\u00a0\u008e\u00e2\u00a0\u008e\u00e2\u00a0\u0081\u00e2\u00a0\u008a\u00e2\u00a0\u0082\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\n\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0089\u00e2\u00a0\u0081\u00e2\u00a0\u009d\u00e2\u00a0\u009e\u00e2\u00a0\u0081\u00e2\u00a0\u009d\u00e2\u00a0\u009e\u00e2\u00a0\u2018\u00e2\u00a0\u0080\u00e2\u00a0\u2018\u00e2\u00a0\u0080\u00e2\u00a0\u009e\u00e2\u00a0\u0097\u00e2\u00a0\u0081\u00e2\u00a0\u009d\u00e2\u00a0\u009f\u00e2\u00a0\u00a5\u00e2\u00a0\u008a\u00e2\u00a0\u0087\u00e2\u00a0\u0087\u00e2\u00a0\u0095\u00e2\u00a0\u00b2\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\n\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u00a3\u00e2\u00a0\u00a3\u00e2\u00a0\u00a8\u00e2\u00a0\u0089\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\n>>> print(transcribeHeading(\n...          key.KeySignature(-2),\n...          meter.TimeSignature('common'),\n...          tempo.TempoText('Lento assai, cantante e tranquillo'),\n...          None,\n...          maxLineLength=10))\n\u00e2\u00a0\u0080\u00e2\u00a0\u00a0\u00e2\u00a0\u0087\u00e2\u00a0\u2018\u00e2\u00a0\u009d\u00e2\u00a0\u009e\u00e2\u00a0\u0095\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\n\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0081\u00e2\u00a0\u008e\u00e2\u00a0\u008e\u00e2\u00a0\u0081\u00e2\u00a0\u008a\u00e2\u00a0\u0082\u00e2\u00a0\u0080\u00e2\u00a0\u0080\n\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\n\u00e2\u00a0\u0089\u00e2\u00a0\u0081\u00e2\u00a0\u009d\u00e2\u00a0\u009e\u00e2\u00a0\u0081\u00e2\u00a0\u009d\u00e2\u00a0\u009e\u00e2\u00a0\u2018\u00e2\u00a0\u0080\u00e2\u00a0\u0080\n\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u2018\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\n\u00e2\u00a0\u009e\u00e2\u00a0\u0097\u00e2\u00a0\u0081\u00e2\u00a0\u009d\u00e2\u00a0\u009f\u00e2\u00a0\u00a5\u00e2\u00a0\u008a\u00e2\u00a0\u0087\u00e2\u00a0\u0087\u00e2\u00a0\u0095\u00e2\u00a0\u00b2\n\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u00a3\u00e2\u00a0\u00a3\u00e2\u00a0\u00a8\u00e2\u00a0\u0089\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.basic.",
        "type": "Title"
    },
    {
        "text": "transcribeNoteFingering",
        "type": "NarrativeText"
    },
    {
        "text": "sampleNoteFingering",
        "type": "NarrativeText"
    },
    {
        "text": "'1'",
        "type": "UncategorizedText"
    },
    {
        "text": "upperFirstInFingering",
        "type": "NarrativeText"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Takes in a note fingering and returns its correct transcription to braille.\n>>> from music21.braille.basic import transcribeNoteFingering\n>>> print(transcribeNoteFingering('4'))\n\u00e2\u00a0\u0082\n\n\nA change of fingering:\n>>> print(transcribeNoteFingering('2-1'))\n\u00e2\u00a0\u0083\u00e2\u00a0\u0089\u00e2\u00a0\u0081\n\n\nA choice of fingering, both on either the top or bottom of the staff:\n>>> print(transcribeNoteFingering('5|4', upperFirstInFingering=True))\n\u00e2\u00a0\u0085\u00e2\u00a0\u0082\n>>> print(transcribeNoteFingering('5|4', upperFirstInFingering=False))\n\u00e2\u00a0\u0082\u00e2\u00a0\u0085\n\n\nA choice of fingering, one on top and one below the staff:\n>>> print(transcribeNoteFingering('2,1', upperFirstInFingering=True))\n\u00e2\u00a0\u0083\u00e2\u00a0\u0081\n>>> print(transcribeNoteFingering('2,1', upperFirstInFingering=False))\n\u00e2\u00a0\u0081\u00e2\u00a0\u0083\n\n\nA choice of fingering, first set missing fingermark:\n>>> print(transcribeNoteFingering('2,x'))\n\u00e2\u00a0\u0083\u00e2\u00a0\u0084\n\n\nA choice of fingering, second set missing fingermark:\n>>> print(transcribeNoteFingering('x,2'))\n\u00e2\u00a0\u00a0\u00e2\u00a0\u0083\n\n\nMissing fingermarks change with upperFirstInFingering\n>>> print(transcribeNoteFingering('x,4', upperFirstInFingering=True))\n\u00e2\u00a0\u00a0\u00e2\u00a0\u0082\n>>> print(transcribeNoteFingering('x,4', upperFirstInFingering=False))\n\u00e2\u00a0\u0082\u00e2\u00a0\u0084\n>>> print(transcribeNoteFingering('4,x', upperFirstInFingering=True))\n\u00e2\u00a0\u0082\u00e2\u00a0\u0084\n>>> print(transcribeNoteFingering('4,x', upperFirstInFingering=False))\n\u00e2\u00a0\u00a0\u00e2\u00a0\u0082\n\n\nA change of fingering and a choice of fingering combined (thanks to Bo-cheng Jhan\nfor the patch):\n>>> print(transcribeNoteFingering('1-2|3-4'))\n\u00e2\u00a0\u0081\u00e2\u00a0\u0089\u00e2\u00a0\u0083\u00e2\u00a0\u0087\u00e2\u00a0\u0089\u00e2\u00a0\u0082\n\n\nIncorrect fingerings raise a BrailleBasicException:\n>>> transcribeNoteFingering('6')\nTraceback (most recent call last):\nmusic21.braille.basic.BrailleBasicException: Cannot translate note fingering: 6",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.basic.",
        "type": "Title"
    },
    {
        "text": "transcribeSignatures",
        "type": "Title"
    },
    {
        "text": "music21KeySignature",
        "type": "Title"
    },
    {
        "text": "music21TimeSignature",
        "type": "Title"
    },
    {
        "text": "outgoingKeySig",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Takes in a KeySignature and\nTimeSignature and returns its representation\nin braille as a string in UTF-8 unicode. If given an old key signature,\nthen its cancellation will be applied before\nand in relation to the new key signature.\nRaises a BrailleBasicException if the resulting key and time signature is\nempty, which happens if the time signature\nis None and (a) the key signature is None or (b) the key signature has\nzero sharps and there is no previous key signature.\n>>> from music21.braille.basic import transcribeSignatures\n>>> print(transcribeSignatures(key.KeySignature(5), meter.TimeSignature('3/8'), None))\n\u00e2\u00a0\u00bc\u00e2\u00a0\u2018\u00e2\u00a0\u00a9\u00e2\u00a0\u00bc\u00e2\u00a0\u0089\u00e2\u00a0\u00a6\n>>> print(transcribeSignatures(key.KeySignature(0), None, key.KeySignature(-3)))\n\u00e2\u00a0\u00a1\u00e2\u00a0\u00a1\u00e2\u00a0\u00a1",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.basic.",
        "type": "Title"
    },
    {
        "text": "wordToBraille",
        "type": "Title"
    },
    {
        "text": "sampleWord",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "isTextExpression",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "\u2192 str",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Transcribes a word to UTF-8 braille.\n>>> from music21.braille.basic import wordToBraille\n>>> print(wordToBraille('Andante'))\n\u00e2\u00a0\u00a0\u00e2\u00a0\u0081\u00e2\u00a0\u009d\u00e2\u00a0\u0099\u00e2\u00a0\u0081\u00e2\u00a0\u009d\u00e2\u00a0\u009e\u00e2\u00a0\u2018\n\n\nTry the German for violin.\n>>> print(wordToBraille('Geige'))\n\u00e2\u00a0\u00a0\u00e2\u00a0\u009b\u00e2\u00a0\u2018\u00e2\u00a0\u008a\u00e2\u00a0\u009b\u00e2\u00a0\u2018\n\n\nTests number symbol at beginning, punctuation in number\nand switch back to letters.\n>>> print(wordToBraille('25.4cm'))\n\u00e2\u00a0\u00bc\u00e2\u00a0\u0083\u00e2\u00a0\u2018\u00e2\u00a0\u00b2\u00e2\u00a0\u0099\u00e2\u00a0\u00b0\u00e2\u00a0\u0089\u00e2\u00a0\u008d",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.basic.",
        "type": "Title"
    },
    {
        "text": "yieldBrailleArticulations",
        "type": "Title"
    },
    {
        "text": "noteEl",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Generator that yields braille before note articulations from a given note.\nMight yield nothing.\n\u009cWhen a staccato or staccatissimo is shown with any of the other\n[before note expressions], it is brailled first.\u009d\n\u009cThe up-bow and down-bow marks for bowed string instruments are brailled before any other\nsigns from Column A and before an ornament.\u009d (BMTM, 114)\nBeyond that, we yield in alphabetical order, which happens to satisfy this:\n\u009cWhen an accent is shown with a tenuto, the accent is brailled first.\u009d (BMTM, 113)\nFor reference:\n>>> brailleArt = braille.lookup.beforeNoteExpr\n>>> print(brailleArt['tenuto'])\n\u00e2\u00a0\u00b8\u00e2\u00a0\u00a6\n>>> print(brailleArt['staccato'])\n\u00e2\u00a0\u00a6\n>>> print(brailleArt['accent'])\n\u00e2\u00a0\u00a8\u00e2\u00a0\u00a6\n\n\n>>> brailleBowings = braille.lookup.bowingSymbols\n>>> print(brailleBowings['down bow'])\n\u00e2\u00a0\u00a3\u00e2\u00a0\u0083\n>>> print(brailleBowings['up bow'])\n\u00e2\u00a0\u00a3\u00e2\u00a0\u0084\n\n\n>>> n = note.Note()\n>>> n.articulations.append(articulations.DownBow())\n>>> n.articulations.append(articulations.Tenuto())\n>>> n.articulations.append(articulations.Staccato())\n>>> n.articulations.append(articulations.Accent())\n>>> n.articulations.append(articulations.Scoop())  # example unsupported articulation\n\n\nThis will yield in order: DownBow, Staccato, Accent, Tenuto.\n>>> for brailleArt in braille.basic.yieldBrailleArticulations(n):\n...     print(brailleArt)\n\u00e2\u00a0\u00a3\u00e2\u00a0\u0083\n\u00e2\u00a0\u00a6\n\u00e2\u00a0\u00a8\u00e2\u00a0\u00a6\n\u00e2\u00a0\u00b8\u00e2\u00a0\u00a6",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.basic.",
        "type": "Title"
    },
    {
        "text": "yieldDots",
        "type": "Title"
    },
    {
        "text": "brailleCharacter",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Generator that yields symbol[\u0098dot'] characters for each row of a\nbraille character that where the left dot is filled.  These\nare used in many places in Braille Music Code.\n>>> B = braille.lookup.brailleDotDict\n>>> gen = braille.basic.yieldDots(B[1])\n>>> gen\n<generator object yieldDots at 0x10aee5f68>\n>>> for dot in gen:\n...     print(dot)\n\u00e2\u00a0\u0084\n>>> gen = braille.basic.yieldDots(B[1235])\n>>> for dot in gen:\n...     print(dot)\n\u00e2\u00a0\u0084\n\u00e2\u00a0\u0084\n\u00e2\u00a0\u0084",
        "type": "ListItem"
    },
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.basic",
        "type": "ListItem"
    },
    {
        "text": "\u00a9 Copyright 2006-2023 Michael Scott Asato Cuthbert.\n      Last updated on Jun 12, 2023.",
        "type": "NarrativeText"
    }
]