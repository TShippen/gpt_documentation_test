[
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.tree.spans",
        "type": "ListItem"
    },
    {
        "text": "Previous topic",
        "type": "Title"
    },
    {
        "text": "music21.tree.node",
        "type": "Title"
    },
    {
        "text": "Next topic",
        "type": "Title"
    },
    {
        "text": "music21.tree.timespanTree",
        "type": "Title"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "music21.tree.spans\nElementTimespan\nElementTimespan\nElementTimespan.measureNumber\nElementTimespan.part\nElementTimespan.quarterLength\nElementTimespan.__eq__()\nElementTimespan.getParentageByClass()\nElementTimespan.makeElement()\nElementTimespan.new()\nElementTimespan.parentage\n\n\n\n\nPitchedTimespan\nPitchedTimespan\nPitchedTimespan.pitches\nPitchedTimespan.canMerge()\n\n\n\n\nTimespan\nTimespan\nTimespan.endTime\nTimespan.offset\nTimespan.__eq__()\nTimespan.canMerge()\nTimespan.mergeWith()\nTimespan.new()\nTimespan.splitAt()",
        "type": "ListItem"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "About music21",
        "type": "ListItem"
    },
    {
        "text": "User's Guide",
        "type": "ListItem"
    },
    {
        "text": "Module Reference",
        "type": "ListItem"
    },
    {
        "text": "Installation",
        "type": "ListItem"
    },
    {
        "text": "Developer Reference",
        "type": "ListItem"
    },
    {
        "text": "Documentation and tests in progress",
        "type": "ListItem"
    },
    {
        "text": "Quick search",
        "type": "Title"
    },
    {
        "text": "This Page",
        "type": "Title"
    },
    {
        "text": "Show Source",
        "type": "ListItem"
    },
    {
        "text": "music21.tree.spans\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "Tools for grouping notes and chords into a searchable tree\norganized by start and stop offsets.",
        "type": "NarrativeText"
    },
    {
        "text": "ElementTimespan\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.tree.spans.",
        "type": "Title"
    },
    {
        "text": "ElementTimespan",
        "type": "Title"
    },
    {
        "text": "element",
        "type": "Title"
    },
    {
        "text": "base.Music21Object | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "parentOffset",
        "type": "Title"
    },
    {
        "text": "OffsetQLIn | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "parentEndTime",
        "type": "Title"
    },
    {
        "text": "OffsetQLIn | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "parentage",
        "type": "Title"
    },
    {
        "text": "tuple",
        "type": "Title"
    },
    {
        "text": "stream.Stream",
        "type": "Title"
    },
    {
        "text": "...",
        "type": "UncategorizedText"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "OffsetQLIn | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "endTime",
        "type": "Title"
    },
    {
        "text": "OffsetQLIn | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A span of time anchored to an element in a score.  The span of time may\nbe the same length as the element in the score.  It may be shorter (a\n\u009cslice\u009d of an element) or it may be longer (in the case of a timespan\nthat is anchored to a single element but extends over rests or other\nnotes following a note)\nPitchedTimespans give information about an element (such as a Note).  It knows\nits absolute position with respect to the element passed into TimespanTree.\nIt contains information about what measure it's in, what part it's in, etc.\nExample, getting a passing tone from a known location from a Bach chorale.\nFirst we create an Offset tree:\n>>> score = corpus.parse('bwv66.6')\n>>> scoreTree = score.asTimespans()\n>>> scoreTree\n<TimespanTree {199} (0.0 to 36.0) <music21.stream.Score ...>>\n\n\nThen get the verticality from offset 6.5, which is beat two-and-a-half of\nmeasure 2 (the piece is in 4/4 with a quarter-note pickup)\n>>> verticality = scoreTree.getVerticalityAt(6.5)\n>>> verticality\n<music21.tree.verticality.Verticality 6.5 {E3 D4 G#4 B4}>\n\n\nThere are four PitchedTimespans in the verticality \u2014 each representing\na note.  The notes are arranged from lowest to highest.\nWe can find all the PitchedTimespans that start exactly at 6.5. There's\none.\n>>> verticality.startTimespans\n(<PitchedTimespan (6.5 to 7.0) <music21.note.Note D>>,)\n\n\n>>> pitchedTimespan = verticality.startTimespans[0]\n>>> pitchedTimespan\n<PitchedTimespan (6.5 to 7.0) <music21.note.Note D>>\n\n\nWhat can we do with a PitchedTimespan? We can get its Part object and from there the\nPart object name\n>>> pitchedTimespan.part\n<music21.stream.Part Tenor>\n>>> pitchedTimespan.part.partName\n'Tenor'\n\n\nFind out what measure it's in:\n>>> pitchedTimespan.measureNumber\n2\n>>> pitchedTimespan.parentOffset\n5.0\n\n\nThe position in the measure is given by subtracting that from the\n.offset:\n>>> pitchedTimespan.offset - pitchedTimespan.parentOffset\n1.5\n\n\n>>> pitchedTimespan.element\n<music21.note.Note D>\n\n\nThese are not dynamic, so changing the Score object does not change the\nmeasureNumber, etc.",
        "type": "ListItem"
    },
    {
        "text": "ElementTimespan bases",
        "type": "Title"
    },
    {
        "text": "Timespan",
        "type": "ListItem"
    },
    {
        "text": "ElementTimespan read-only properties",
        "type": "Title"
    },
    {
        "text": "ElementTimespan.",
        "type": "Title"
    },
    {
        "text": "measureNumber",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The measure number of the measure containing the element.\n>>> score = corpus.parse('bwv66.6')\n>>> scoreTree = score.asTimespans()\n>>> verticality = scoreTree.getVerticalityAt(1.0)\n>>> pitchedTimespan = verticality.startTimespans[0]\n>>> pitchedTimespan.measureNumber\n1",
        "type": "ListItem"
    },
    {
        "text": "ElementTimespan.",
        "type": "Title"
    },
    {
        "text": "part",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "find the object in the parentage that is a Part object:\n>>> score = corpus.parse('bwv66.6')\n>>> scoreTree = score.asTimespans()\n>>> verticality = scoreTree.getVerticalityAt(1.0)\n>>> pitchedTimespan = verticality.startTimespans[2]\n>>> pitchedTimespan\n<PitchedTimespan (1.0 to 2.0) <music21.note.Note C#>>\n>>> pitchedTimespan.part\n<music21.stream.Part Tenor>",
        "type": "ListItem"
    },
    {
        "text": "ElementTimespan.",
        "type": "Title"
    },
    {
        "text": "quarterLength",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The quarterLength of the Timespan, which, due to manipulation, may be different\nfrom that of the element.\n>>> n = note.Note('D-')\n>>> n.offset = 1.0\n>>> n.duration.quarterLength = 2.0\n\n\n>>> pts = tree.spans.PitchedTimespan(n, offset=n.offset, endTime=3.0)\n>>> pts\n<PitchedTimespan (1.0 to 3.0) <music21.note.Note D->>\n>>> pts.quarterLength\n2.0\n>>> n.duration.quarterLength\n2.0\n\n\n>>> pts2 = pts.new(offset=0.0)\n>>> pts2\n<PitchedTimespan (0.0 to 3.0) <music21.note.Note D->>\n>>> pts2.quarterLength\n3.0\n>>> pts2.element.duration.quarterLength\n2.0",
        "type": "ListItem"
    },
    {
        "text": "Read-only properties inherited from Timespan:",
        "type": "NarrativeText"
    },
    {
        "text": "endTime offset",
        "type": "Table"
    },
    {
        "text": "ElementTimespan methods",
        "type": "Title"
    },
    {
        "text": "ElementTimespan.",
        "type": "Title"
    },
    {
        "text": "__eq__",
        "type": "UncategorizedText"
    },
    {
        "text": "other",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return self==value.",
        "type": "ListItem"
    },
    {
        "text": "ElementTimespan.",
        "type": "Title"
    },
    {
        "text": "getParentageByClass",
        "type": "Title"
    },
    {
        "text": "classList",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "returns that is the first parentage that has this classList.\ndefault stream.Part\n>>> score = corpus.parse('bwv66.6')\n>>> score.id = 'bach'\n>>> scoreTree = score.asTimespans()\n>>> verticality = scoreTree.getVerticalityAt(1.0)\n>>> pitchedTimespan = verticality.startTimespans[2]\n>>> pitchedTimespan\n<PitchedTimespan (1.0 to 2.0) <music21.note.Note C#>>\n>>> pitchedTimespan.getParentageByClass(classList=(stream.Part,))\n<music21.stream.Part Tenor>\n>>> pitchedTimespan.getParentageByClass(classList=(stream.Measure,))\n<music21.stream.Measure 1 offset=1.0>\n>>> pitchedTimespan.getParentageByClass(classList=(stream.Score,))\n<music21.stream.Score bach>\n\n\nThe closest parent is returned in case of a multiple list\u2026\n>>> searchTuple = (stream.Voice, stream.Measure, stream.Part)\n>>> pitchedTimespan.getParentageByClass(classList=searchTuple)\n<music21.stream.Measure 1 offset=1.0>\n\n\nTODO: this should take a normal class list.",
        "type": "ListItem"
    },
    {
        "text": "ElementTimespan.",
        "type": "Title"
    },
    {
        "text": "makeElement",
        "type": "Title"
    },
    {
        "text": "makeCopy",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u2192 base.Music21Object | None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return a copy of the element (or the same one if makeCopy is False)\nwith the quarterLength set to the length of the timespan",
        "type": "ListItem"
    },
    {
        "text": "ElementTimespan.",
        "type": "Title"
    },
    {
        "text": "new",
        "type": "Title"
    },
    {
        "text": "element",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "parentOffset",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "parentEndTime",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "endTime",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Create a new object that is identical to the calling object\nbut with some parameters overridden.\n>>> n = note.Note('C#')\n>>> pts = tree.spans.PitchedTimespan(n, offset=11.0, endTime=12.0)\n>>> pts\n<PitchedTimespan (11.0 to 12.0) <music21.note.Note C#>>\n>>> pts2 = pts.new(endTime=13.0)\n>>> pts2\n<PitchedTimespan (11.0 to 13.0) <music21.note.Note C#>>\n>>> pts.element is pts2.element\nTrue",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from Timespan:",
        "type": "NarrativeText"
    },
    {
        "text": "canMerge() mergeWith() splitAt()",
        "type": "Table"
    },
    {
        "text": "ElementTimespan instance variables",
        "type": "Title"
    },
    {
        "text": "ElementTimespan.",
        "type": "Title"
    },
    {
        "text": "parentage",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The Stream hierarchy above the element in a ElementTimespan.\n>>> score = corpus.parse('bwv66.6')\n>>> scoreTree = score.asTimespans()\n>>> verticality = scoreTree.getVerticalityAt(1.0)\n>>> pitchedTimespan = verticality.startTimespans[0]\n>>> pitchedTimespan\n<PitchedTimespan (1.0 to 2.0) <music21.note.Note A>>\n>>> for streamSite in pitchedTimespan.parentage:\n...     streamSite\n<music21.stream.Measure 1 offset=1.0>\n<music21.stream.Part Soprano>\n<music21.stream.Score ...>",
        "type": "ListItem"
    },
    {
        "text": "PitchedTimespan\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.tree.spans.",
        "type": "Title"
    },
    {
        "text": "PitchedTimespan",
        "type": "Title"
    },
    {
        "text": "element",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "parentOffset",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "parentEndTime",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "parentage",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "endTime",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "PitchedTimespan bases",
        "type": "Title"
    },
    {
        "text": "ElementTimespan",
        "type": "ListItem"
    },
    {
        "text": "Timespan",
        "type": "ListItem"
    },
    {
        "text": "PitchedTimespan read-only properties",
        "type": "Title"
    },
    {
        "text": "PitchedTimespan.",
        "type": "Title"
    },
    {
        "text": "pitches",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Gets the pitches of the element wrapped by this PitchedTimespan.\n>>> c = chord.Chord('C4 E4 G4')\n>>> pts = tree.spans.PitchedTimespan(c, offset=0.0, endTime=1.0)\n>>> pts.pitches\n(<music21.pitch.Pitch C4>, <music21.pitch.Pitch E4>, <music21.pitch.Pitch G4>)\n>>> pts.pitches == c.pitches\nTrue\n>>> pts.pitches is c.pitches\nFalse",
        "type": "ListItem"
    },
    {
        "text": "Read-only properties inherited from ElementTimespan:",
        "type": "NarrativeText"
    },
    {
        "text": "measureNumber part quarterLength",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Timespan:",
        "type": "NarrativeText"
    },
    {
        "text": "endTime offset",
        "type": "Table"
    },
    {
        "text": "PitchedTimespan methods",
        "type": "Title"
    },
    {
        "text": "PitchedTimespan.",
        "type": "Title"
    },
    {
        "text": "canMerge",
        "type": "Title"
    },
    {
        "text": "other",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "sub-method of base canMerge that checks to see if the pitches are the same.\nFor quick score reductions, we can merge two consecutive\nlike-pitched element timespans, keeping\nscore-relevant information from the first of the two, such as its\nMusic21 Element.\nThis is useful when using timespans to perform score reduction.\nLet's demonstrate merging some contiguous E's in the alto part of a Bach\nchorale:\n>>> score = corpus.parse('bwv66.6')\n>>> scoreTree = score.asTimespans(classList=(note.Note,))\n>>> timespan_one = scoreTree[12]\n>>> print(timespan_one)\n<PitchedTimespan (2.0 to 3.0) <music21.note.Note E>>\n\n\n>>> print(timespan_one.part)\n<music21.stream.Part Alto>\n\n\n>>> timespan_two = scoreTree.findNextPitchedTimespanInSameStreamByClass(timespan_one)\n>>> print(timespan_two)\n<PitchedTimespan (3.0 to 4.0) <music21.note.Note E>>\n\n\n>>> timespan_one.canMerge(timespan_two)\n(True, '')\n\n\n>>> merged = timespan_one.mergeWith(timespan_two)\n>>> print(merged)\n<PitchedTimespan (2.0 to 4.0) <music21.note.Note E>>\n\n\n>>> merged.part is timespan_one.part\nTrue\n\n\nAttempting to merge timespans which are not contiguous, or which do not\nhave identical pitches will result in error:\n>>> scoreTree[0].canMerge(scoreTree[50])\n(False, 'Cannot merge <PitchedTimespan (0.0 to 0.5) <music21.note.Note C#>>\n     with <PitchedTimespan (9.5 to 10.0) <music21.note.Note B>>: not contiguous')\n\n\n>>> scoreTree[0].mergeWith(scoreTree[50])\nTraceback (most recent call last):\nmusic21.tree.spans.TimespanException: Cannot merge\n        <PitchedTimespan (0.0 to 0.5) <music21.note.Note C#>>\n        with <PitchedTimespan (9.5 to 10.0) <music21.note.Note B>>: not contiguous\n\n\nThis is probably not what you want to do: get the next element timespan in\nthe same score:\n>>> timespan_twoWrong = scoreTree.findNextPitchedTimespanInSameStreamByClass(\n...     timespan_one, classList=(stream.Score,))\n>>> print(timespan_twoWrong)\n<PitchedTimespan (3.0 to 4.0) <music21.note.Note C#>>\n>>> print(timespan_twoWrong.part)\n<music21.stream.Part Soprano>",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from ElementTimespan:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() getParentageByClass() makeElement() new()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Timespan:",
        "type": "NarrativeText"
    },
    {
        "text": "mergeWith() splitAt()",
        "type": "Table"
    },
    {
        "text": "PitchedTimespan instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from ElementTimespan:",
        "type": "NarrativeText"
    },
    {
        "text": "parentage",
        "type": "Table"
    },
    {
        "text": "Timespan\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.tree.spans.",
        "type": "Title"
    },
    {
        "text": "Timespan",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "inf",
        "type": "ListItem"
    },
    {
        "text": "endTime",
        "type": "Title"
    },
    {
        "text": "inf",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A span of time, with a start offset and stop offset.\nUseful for demonstrating various properties of the timespan-collection class\nfamily.\n>>> timespan = tree.spans.Timespan(-1.5, 3.25)\n>>> print(timespan)\n<Timespan -1.5 3.25>\n\n\nA timespan has two attributes, its offset and its endTime.  They are immutable\u2026\n>>> timespan.offset\n-1.5\n>>> timespan.endTime\n3.25\n\n\nTo create a changed timespan, call the .new() method on the timespan.\n>>> ts2 = timespan.new(offset=0.0)\n>>> ts2\n<Timespan 0.0 3.25>\n\n\n>>> ts3 = timespan.new(endTime=5.0)\n>>> ts3\n<Timespan -1.5 5.0>\n\n\nTwo timespans are equal if they have the same offset and endTime\n>>> ts4 = tree.spans.Timespan(-1.5, 5.0)\n>>> ts3 == ts4\nTrue\n>>> ts4 == ts2\nFalse",
        "type": "ListItem"
    },
    {
        "text": "Timespan read-only properties",
        "type": "Title"
    },
    {
        "text": "Timespan.",
        "type": "Title"
    },
    {
        "text": "endTime",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The stop offset of the Timespan, relative to its\ncontaining score.\n>>> score = corpus.parse('bwv66.6')\n>>> scoreTree = score.asTimespans()\n>>> verticality = scoreTree.getVerticalityAt(1.0)\n>>> timespan = verticality.startTimespans[0]\n>>> timespan.endTime\n2.0",
        "type": "ListItem"
    },
    {
        "text": "Timespan.",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The start offset of the Timespan, relative to its\ncontaining score.\n>>> score = corpus.parse('bwv66.6')\n>>> scoreTree = score.asTimespans()\n>>> verticality = scoreTree.getVerticalityAt(1.0)\n>>> timespan = verticality.startTimespans[0]\n>>> timespan.offset\n1.0",
        "type": "ListItem"
    },
    {
        "text": "Timespan methods",
        "type": "Title"
    },
    {
        "text": "Timespan.",
        "type": "Title"
    },
    {
        "text": "__eq__",
        "type": "UncategorizedText"
    },
    {
        "text": "expr",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return self==value.",
        "type": "ListItem"
    },
    {
        "text": "Timespan.",
        "type": "Title"
    },
    {
        "text": "canMerge",
        "type": "Title"
    },
    {
        "text": "other",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "returns a tuple of (True or False) if these timespans can be merged\nwith the second element being a message or None.\n>>> ts1 = tree.spans.Timespan(0, 5)\n>>> ts2 = tree.spans.Timespan(5, 7)\n>>> ts1.canMerge(ts2)\n(True, '')\n>>> ts3 = tree.spans.Timespan(6, 10)\n>>> ts1.canMerge(ts3)\n(False, 'Cannot merge <Timespan 0.0 5.0> with <Timespan 6.0 10.0>: not contiguous')\n\n\nOverlapping Timespans cannot be merged, just contiguous ones.\n>>> ts4 = tree.spans.Timespan(3, 4)\n>>> ts1.canMerge(ts4)\n(False, 'Cannot merge <Timespan 0.0 5.0> with <Timespan 3.0 4.0>: not contiguous')",
        "type": "ListItem"
    },
    {
        "text": "Timespan.",
        "type": "Title"
    },
    {
        "text": "mergeWith",
        "type": "Title"
    },
    {
        "text": "other",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Merges two consecutive/contiguous timespans, keeping the\ninformation from the former of the two.\n>>> ts1 = tree.spans.Timespan(0, 5)\n>>> ts2 = tree.spans.Timespan(5, 7)\n>>> ts3 = ts1.mergeWith(ts2)\n>>> ts3\n<Timespan 0.0 7.0>\n\n\nNote that (for now), overlapping timespans cannot be merged:\n>>> ts4 = tree.spans.Timespan(6, 10)\n>>> ts3.mergeWith(ts4)\nTraceback (most recent call last):\nmusic21.tree.spans.TimespanException: Cannot merge <Timespan 0.0 7.0> with\n    <Timespan 6.0 10.0>: not contiguous",
        "type": "ListItem"
    },
    {
        "text": "Timespan.",
        "type": "Title"
    },
    {
        "text": "new",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "endTime",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "return a new object with the given offset and endTime",
        "type": "ListItem"
    },
    {
        "text": "Timespan.",
        "type": "Title"
    },
    {
        "text": "splitAt",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Split Timespan at offset.\n>>> score = corpus.parse('bwv66.6')\n>>> scoreTree = score.asTimespans(classList=(note.Note,))\n>>> verticality = scoreTree.getVerticalityAt(0)\n>>> verticality\n<music21.tree.verticality.Verticality 0 {A3 E4 C#5}>\n\n\n>>> timespan = verticality.startTimespans[0]\n>>> timespan\n<PitchedTimespan (0.0 to 0.5) <music21.note.Note C#>>\n\n\n>>> for shard in timespan.splitAt(0.25):\n...     shard\n...\n<PitchedTimespan (0.0 to 0.25) <music21.note.Note C#>>\n<PitchedTimespan (0.25 to 0.5) <music21.note.Note C#>>\n\n\n>>> timespan.splitAt(1000)\n(<PitchedTimespan (0.0 to 0.5) <music21.note.Note C#>>,)",
        "type": "ListItem"
    },
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.tree.spans",
        "type": "ListItem"
    },
    {
        "text": "\u00a9 Copyright 2006-2023 Michael Scott Asato Cuthbert.\n      Last updated on Jun 12, 2023.",
        "type": "NarrativeText"
    }
]