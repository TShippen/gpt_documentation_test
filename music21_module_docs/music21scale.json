[
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.scale",
        "type": "ListItem"
    },
    {
        "text": "Previous topic",
        "type": "Title"
    },
    {
        "text": "music21.romanText.writeRoman",
        "type": "Title"
    },
    {
        "text": "Next topic",
        "type": "Title"
    },
    {
        "text": "music21.scale.intervalNetwork",
        "type": "Title"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "music21.scale\nConcreteScale\nConcreteScale\nConcreteScale.chord\nConcreteScale.isConcrete\nConcreteScale.name\nConcreteScale.pitches\nConcreteScale.abstract\nConcreteScale.__eq__()\nConcreteScale.derive()\nConcreteScale.deriveAll()\nConcreteScale.deriveByDegree()\nConcreteScale.deriveRanked()\nConcreteScale.findMissing()\nConcreteScale.getChord()\nConcreteScale.getDegreeMaxUnique()\nConcreteScale.getPitches()\nConcreteScale.getScalaData()\nConcreteScale.getScaleDegreeAndAccidentalFromPitch()\nConcreteScale.getScaleDegreeFromPitch()\nConcreteScale.getTonic()\nConcreteScale.intervalBetweenDegrees()\nConcreteScale.isNext()\nConcreteScale.match()\nConcreteScale.next()\nConcreteScale.nextPitch()\nConcreteScale.pitchFromDegree()\nConcreteScale.pitchesFromScaleDegrees()\nConcreteScale.romanNumeral()\nConcreteScale.show()\nConcreteScale.solfeg()\nConcreteScale.transpose()\nConcreteScale.tune()\nConcreteScale.write()\n\n\n\n\nAbstractScale\nAbstractScale\nAbstractScale.buildNetwork()\nAbstractScale.buildNetworkFromPitches()\nAbstractScale.fixDefaultOctaveForPitchList()\nAbstractScale.getDegreeMaxUnique()\nAbstractScale.getIntervals()\nAbstractScale.getNewTonicPitch()\nAbstractScale.getPitchFromNodeDegree()\nAbstractScale.getRealization()\nAbstractScale.getRelativeNodeDegree()\nAbstractScale.getScalaData()\nAbstractScale.nextPitch()\nAbstractScale.realizePitchByDegree()\nAbstractScale.show()\nAbstractScale.write()\n\n\n\n\nAbstractCyclicalScale\nAbstractCyclicalScale\nAbstractCyclicalScale.buildNetwork()\n\n\n\n\nAbstractDiatonicScale\nAbstractDiatonicScale\nAbstractDiatonicScale.buildNetwork()\n\n\n\n\nAbstractHarmonicMinorScale\nAbstractHarmonicMinorScale\nAbstractHarmonicMinorScale.buildNetwork()\n\n\n\n\nAbstractMelodicMinorScale\nAbstractMelodicMinorScale\nAbstractMelodicMinorScale.buildNetwork()\n\n\n\n\nAbstractOctatonicScale\nAbstractOctatonicScale\nAbstractOctatonicScale.buildNetwork()\n\n\n\n\nAbstractOctaveRepeatingScale\nAbstractOctaveRepeatingScale\nAbstractOctaveRepeatingScale.buildNetwork()\n\n\n\n\nAbstractRagAsawari\nAbstractRagAsawari\nAbstractRagAsawari.buildNetwork()\n\n\n\n\nAbstractRagMarwa\nAbstractRagMarwa\nAbstractRagMarwa.buildNetwork()\n\n\n\n\nAbstractWeightedHexatonicBlues\nAbstractWeightedHexatonicBlues\nAbstractWeightedHexatonicBlues.buildNetwork()\n\n\n\n\nChromaticScale\nChromaticScale\n\n\nCyclicalScale\nCyclicalScale\n\n\nDiatonicScale\nDiatonicScale\nDiatonicScale.getDominant()\nDiatonicScale.getLeadingTone()\nDiatonicScale.getParallelMajor()\nDiatonicScale.getParallelMinor()\nDiatonicScale.getRelativeMajor()\nDiatonicScale.getRelativeMinor()\nDiatonicScale.getTonic()\n\n\n\n\nDorianScale\nDorianScale\n\n\nHarmonicMinorScale\nHarmonicMinorScale\n\n\nHypoaeolianScale\nHypoaeolianScale\n\n\nHypodorianScale\nHypodorianScale\n\n\nHypolocrianScale\nHypolocrianScale\n\n\nHypolydianScale\nHypolydianScale\n\n\nHypomixolydianScale\nHypomixolydianScale\n\n\nHypophrygianScale\nHypophrygianScale\n\n\nLocrianScale\nLocrianScale\n\n\nLydianScale\nLydianScale\n\n\nMajorScale\nMajorScale\n\n\nMelodicMinorScale\nMelodicMinorScale\n\n\nMinorScale\nMinorScale\n\n\nMixolydianScale\nMixolydianScale\n\n\nOctatonicScale\nOctatonicScale\n\n\nOctaveRepeatingScale\nOctaveRepeatingScale\n\n\nPhrygianScale\nPhrygianScale\n\n\nRagAsawari\nRagAsawari\n\n\nRagMarwa\nRagMarwa\n\n\nScalaScale\nScalaScale\n\n\nScale\nScale\nScale.isConcrete\nScale.name\nScale.extractPitchList()\n\n\n\n\nSieveScale\nSieveScale\n\n\nWeightedHexatonicBlues\nWeightedHexatonicBlues\n\n\nWholeToneScale\nWholeToneScale",
        "type": "ListItem"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "About music21",
        "type": "ListItem"
    },
    {
        "text": "User's Guide",
        "type": "ListItem"
    },
    {
        "text": "Module Reference",
        "type": "ListItem"
    },
    {
        "text": "Installation",
        "type": "ListItem"
    },
    {
        "text": "Developer Reference",
        "type": "ListItem"
    },
    {
        "text": "Documentation and tests in progress",
        "type": "ListItem"
    },
    {
        "text": "Quick search",
        "type": "Title"
    },
    {
        "text": "This Page",
        "type": "Title"
    },
    {
        "text": "Show Source",
        "type": "ListItem"
    },
    {
        "text": "music21.scale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "The various Scale objects provide a bidirectional object representation\nof octave repeating and non-octave repeating scales built by network\nof Interval objects as modeled\nin IntervalNetwork.",
        "type": "NarrativeText"
    },
    {
        "text": "The main public interface to these resources are subclasses\nof ConcreteScale, such\nas MajorScale, MinorScale,\nand MelodicMinorScale.",
        "type": "NarrativeText"
    },
    {
        "text": "More unusual scales are also available, such\nas OctatonicScale, SieveScale,\nand RagMarwa.",
        "type": "NarrativeText"
    },
    {
        "text": "All ConcreteScale subclasses provide the ability\nto get a pitches across any range, get a pitch for scale step, get a\nscale step for pitch, and, for any given pitch ascend or descend to the\nnext pitch. In all cases Pitch objects are returned.",
        "type": "NarrativeText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "sc1",
        "type": "Title"
    },
    {
        "text": "scale",
        "type": "Title"
    },
    {
        "text": "MajorScale",
        "type": "Title"
    },
    {
        "text": "'a'",
        "type": "UncategorizedText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "sc1",
        "type": "Title"
    },
    {
        "text": "getPitches",
        "type": "Title"
    },
    {
        "text": "'g2'",
        "type": "UncategorizedText"
    },
    {
        "text": "'g4'",
        "type": "UncategorizedText"
    },
    {
        "text": ")]",
        "type": "UncategorizedText"
    },
    {
        "text": "['G#2', 'A2', 'B2', 'C#3', 'D3', 'E3', 'F#3', 'G#3', 'A3', 'B3', 'C#4', 'D4', 'E4', 'F#4']",
        "type": "UncategorizedText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "sc2",
        "type": "Title"
    },
    {
        "text": "scale",
        "type": "Title"
    },
    {
        "text": "MelodicMinorScale",
        "type": "Title"
    },
    {
        "text": "'a'",
        "type": "UncategorizedText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "sc2",
        "type": "Title"
    },
    {
        "text": "getPitches",
        "type": "Title"
    },
    {
        "text": "'g2'",
        "type": "UncategorizedText"
    },
    {
        "text": "'g4'",
        "type": "UncategorizedText"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "scale",
        "type": "Title"
    },
    {
        "text": "Direction",
        "type": "Title"
    },
    {
        "text": "DESCENDING",
        "type": "Title"
    },
    {
        "text": ")]",
        "type": "UncategorizedText"
    },
    {
        "text": "['G4', 'F4', 'E4', 'D4', 'C4', 'B3', 'A3', 'G3', 'F3', 'E3', 'D3', 'C3', 'B2', 'A2', 'G2']",
        "type": "UncategorizedText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "sc2",
        "type": "Title"
    },
    {
        "text": "getPitches",
        "type": "Title"
    },
    {
        "text": "'g2'",
        "type": "UncategorizedText"
    },
    {
        "text": "'g4'",
        "type": "UncategorizedText"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "scale",
        "type": "Title"
    },
    {
        "text": "Direction",
        "type": "Title"
    },
    {
        "text": "ASCENDING",
        "type": "Title"
    },
    {
        "text": ")]",
        "type": "UncategorizedText"
    },
    {
        "text": "['G#2', 'A2', 'B2', 'C3', 'D3', 'E3', 'F#3', 'G#3', 'A3', 'B3', 'C4', 'D4', 'E4', 'F#4']",
        "type": "UncategorizedText"
    },
    {
        "text": "ConcreteScale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "ConcreteScale",
        "type": "Title"
    },
    {
        "text": "tonic",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "Pitch",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "pitches",
        "type": "Title"
    },
    {
        "text": "list",
        "type": "Title"
    },
    {
        "text": "music21.pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A concrete scale is specific scale formation with\na defined pitch collection (a tonic Pitch) that\nmay or may not be bound by specific range. For\nexample, a specific Major Scale, such as G\nMajor, from G2 to G4.\nThis class is can either be used directly or more\ncommonly as a base class for all concrete scales.\nHere we treat a diminished triad as a scale:\n>>> myScale = scale.ConcreteScale(pitches=['C4', 'E-4', 'G-4', 'A4'])\n>>> myScale.getTonic()\n<music21.pitch.Pitch C4>\n>>> myScale.nextPitch('G-2')\n<music21.pitch.Pitch A2>\n>>> [str(p) for p in myScale.getPitches('E-5', 'G-7')]\n['E-5', 'G-5', 'A5', 'C6', 'E-6', 'G-6', 'A6', 'C7', 'E-7', 'G-7']\n\n\nA scale that lasts two octaves and uses quarter tones (D~)\n>>> complexScale = scale.ConcreteScale(\n...     pitches=['C#3', 'E-3', 'F3', 'G3', 'B3', 'D~4', 'F#4', 'A4', 'C#5']\n... )\n>>> complexScale.getTonic()\n<music21.pitch.Pitch C#3>\n>>> complexScale.nextPitch('G3', direction=scale.Direction.DESCENDING)\n<music21.pitch.Pitch F3>\n\n\n>>> [str(p) for p in complexScale.getPitches('C3', 'C7')]\n['C#3', 'E-3', 'F3', 'G3', 'B3', 'D~4', 'F#4',\n 'A4', 'C#5', 'E-5', 'F5', 'G5', 'B5', 'D~6', 'F#6', 'A6']\n\n\nDescending form:\n>>> [str(p) for p in complexScale.getPitches('C7', 'C5')]\n['A6', 'F#6', 'D~6', 'B5', 'G5', 'F5', 'E-5', 'C#5']\n\n\n\nEquality\u00c2\u00b6\nTwo ConcreteScales are the same if they satisfy all general Music21Object\nequality methods and their Abstract scales, their tonics, and their\nboundRanges are the same:",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale bases",
        "type": "Title"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale read-only properties",
        "type": "Title"
    },
    {
        "text": "ConcreteScale.",
        "type": "Title"
    },
    {
        "text": "chord",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return a Chord object from this harmony over a default range.\nUse the getChord() method if you need greater control over the\nparameters of the chord.",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale.",
        "type": "Title"
    },
    {
        "text": "isConcrete",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return True if the scale is Concrete, that is, it has a defined Tonic.\n>>> sc1 = scale.MajorScale('c')\n>>> sc1.isConcrete\nTrue\n>>> sc2 = scale.MajorScale()\n>>> sc2.isConcrete\nFalse\n\n\nTo be concrete, a Scale must have a\ndefined tonic. An abstract Scale is not Concrete",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale.",
        "type": "Title"
    },
    {
        "text": "name",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return or construct the name of this scale\n>>> sc = scale.DiatonicScale()  # abstract, as no defined tonic\n>>> sc.name\n'Abstract diatonic'",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale.",
        "type": "Title"
    },
    {
        "text": "pitches",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get a default pitch list from this scale.",
        "type": "ListItem"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "ConcreteScale read/write properties",
        "type": "Title"
    },
    {
        "text": "ConcreteScale.",
        "type": "Title"
    },
    {
        "text": "abstract",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return the AbstractScale instance governing this ConcreteScale.\n>>> sc1 = scale.MajorScale('d')\n>>> sc2 = scale.MajorScale('b-')\n>>> sc1 == sc2\nFalse\n>>> sc1.abstract == sc2.abstract\nTrue\n\n\nAbstract scales can also be set afterwards:\n>>> scVague = scale.ConcreteScale()\n>>> scVague.abstract = scale.AbstractDiatonicScale('major')\n>>> scVague.tonic = pitch.Pitch('D')\n>>> [p.name for p in scVague.getPitches()]\n['D', 'E', 'F#', 'G', 'A', 'B', 'C#', 'D']\n\n\n>>> scVague.abstract = scale.AbstractOctatonicScale()\n>>> [p.name for p in scVague.getPitches()]\n['D', 'E', 'F', 'G', 'A-', 'B-', 'C-', 'D-', 'D']\n\n\n\nChanged in v6: changing .abstract is now allowed.",
        "type": "ListItem"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "ConcreteScale methods",
        "type": "Title"
    },
    {
        "text": "ConcreteScale.",
        "type": "Title"
    },
    {
        "text": "__eq__",
        "type": "UncategorizedText"
    },
    {
        "text": "other",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "For concrete equality, the stored abstract objects must evaluate as equal,\nas well as local attributes.\n>>> sc1 = scale.MajorScale('c')\n>>> sc2 = scale.MajorScale('c')\n>>> sc3 = scale.MinorScale('c')\n>>> sc4 = scale.MajorScale('g')\n>>> sc5 = scale.MajorScale()  # an abstract scale, as no tonic defined\n\n\n>>> sc1 == sc2\nTrue\n>>> sc1 == sc3\nFalse\n>>> sc1 == sc4\nFalse\n>>> sc1.abstract == sc4.abstract  # can compare abstract forms\nTrue\n>>> sc4 == sc5  # implicit abstract comparison\nTrue\n>>> sc5 == sc2  # implicit abstract comparison\nTrue\n>>> sc5 == sc3  # implicit abstract comparison\nFalse",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale.",
        "type": "Title"
    },
    {
        "text": "derive",
        "type": "Title"
    },
    {
        "text": "other",
        "type": "Title"
    },
    {
        "text": "comparisonAttribute",
        "type": "Title"
    },
    {
        "text": "'pitchClass'",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return the closest-matching ConcreteScale\nbased on the pitch collection provided as a\nStream, a ConcreteScale,\nor a list of Pitch objects.\nHow the \u009cclosest-matching\u009d scale is defined still needs to be\nrefined and has changed in the past and will probably change in the future.\n>>> sc1 = scale.MajorScale()\n>>> sc1.derive(['C#', 'E', 'G#'])\n<music21.scale.MajorScale B major>\n\n\n>>> sc1.derive(['E-', 'B-', 'D'], comparisonAttribute='name')\n<music21.scale.MajorScale B- major>",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale.",
        "type": "Title"
    },
    {
        "text": "deriveAll",
        "type": "Title"
    },
    {
        "text": "other",
        "type": "Title"
    },
    {
        "text": "comparisonAttribute",
        "type": "Title"
    },
    {
        "text": "'pitchClass'",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return a list of all Scales of the same class as self\nwhere all the pitches in other are contained.\nSimilar to \u009cderiveRanked\u009d but only returns those scales\nno matter how many which contain all the pitches.\nJust returns a list in order.\nIf you are working with Diatonic Scales, you will\nprobably want to change the comparisonAttribute to name.\n>>> sc1 = scale.MajorScale()\n>>> sc1.deriveAll(['C', 'E', 'B'])\n[<music21.scale.MajorScale G major>, <music21.scale.MajorScale C major>]\n\n\n>>> [sc.name for sc in sc1.deriveAll(['D-', 'E', 'B'])]\n['B major', 'A major', 'E major', 'D major', 'C- major']\n\n\n>>> sc1.deriveAll(['D-', 'E', 'B'], comparisonAttribute='name')\n[]\n\n\nFind all instances of this pentatonic scale in major scales:\n>>> scList = sc1.deriveAll(['C#', 'D#', 'F#', 'G#', 'A#'], comparisonAttribute='name')\n>>> [sc.name for sc in scList]\n['B major', 'F# major', 'C# major']",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale.",
        "type": "Title"
    },
    {
        "text": "deriveByDegree",
        "type": "Title"
    },
    {
        "text": "degree",
        "type": "Title"
    },
    {
        "text": "pitchRef",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given a scale degree and a pitch, return a\nnew ConcreteScale that satisfies\nthat condition.\nFind a major scale with C as the 7th degree:\n>>> sc1 = scale.MajorScale()\n>>> sc1.deriveByDegree(7, 'c')\n<music21.scale.MajorScale D- major>\n\n\nTODO: Does not yet work for directional scales",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale.",
        "type": "Title"
    },
    {
        "text": "deriveRanked",
        "type": "Title"
    },
    {
        "text": "other",
        "type": "Title"
    },
    {
        "text": "resultsReturned",
        "type": "NarrativeText"
    },
    {
        "text": "comparisonAttribute",
        "type": "Title"
    },
    {
        "text": "'pitchClass'",
        "type": "Title"
    },
    {
        "text": "removeDuplicates",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return a list of closest-matching ConcreteScale objects\nbased on this AbstractScale,\nprovided as a Stream, a ConcreteScale,\nor a list of Pitch objects.\nReturned integer values represent the number of matches.\nIf you are working with Diatonic Scales, you will probably\nwant to change the comparisonAttribute to name.\n>>> sc1 = scale.MajorScale()\n>>> sc1.deriveRanked(['C', 'E', 'B'])\n[(3, <music21.scale.MajorScale G major>),\n (3, <music21.scale.MajorScale C major>),\n (2, <music21.scale.MajorScale B major>),\n (2, <music21.scale.MajorScale A major>)]\n\n\nWith the default of comparing by pitchClass, D- is fine for B major\nbecause C# is in the B major scale.\n>>> sc1.deriveRanked(['D-', 'E', 'B'])\n[(3, <music21.scale.MajorScale B major>),\n (3, <music21.scale.MajorScale A major>),\n (3, <music21.scale.MajorScale E major>),\n (3, <music21.scale.MajorScale D major>)]\n\n\nComparing based on enharmonic-sensitive spelling, has fewer hits\nfor all of these scales:\n>>> sc1.deriveRanked(['D-', 'E', 'B'], comparisonAttribute='name')\n[(2, <music21.scale.MajorScale B major>),\n (2, <music21.scale.MajorScale A major>),\n (2, <music21.scale.MajorScale G major>),\n (2, <music21.scale.MajorScale E major>)]\n\n\nNotice that we check how many of the pitches are in the scale\nand do not de-duplicate pitches.\n>>> sc1.deriveRanked(['C', 'E', 'E', 'E', 'B'])\n[(5, <music21.scale.MajorScale G major>),\n (5, <music21.scale.MajorScale C major>),\n (4, <music21.scale.MajorScale B major>),\n (4, <music21.scale.MajorScale A major>)]\n\n\nIf removeDuplicates is given, the E's will get less weight:\n>>> sc1.deriveRanked(['C', 'E', 'E', 'E', 'B'], removeDuplicates=True)\n[(3, <music21.scale.MajorScale G major>),\n (3, <music21.scale.MajorScale C major>),\n (2, <music21.scale.MajorScale B major>),\n (2, <music21.scale.MajorScale A major>)]\n\n\n>>> sc1.deriveRanked(['C#', 'E', 'G#'])\n[(3, <music21.scale.MajorScale B major>),\n (3, <music21.scale.MajorScale A major>),\n (3, <music21.scale.MajorScale E major>),\n (3, <music21.scale.MajorScale C- major>)]\n\n\nA Concrete Scale created from pitches still has similar\ncharacteristics to the original.\nHere we create a scale like a Harmonic minor but with flat 2 and sharp 4.\n>>> e = scale.ConcreteScale(pitches=['A4', 'B-4', 'C5', 'D#5', 'E5', 'F5', 'G#5', 'A5'])\n\n\nNotice the G# is allowed to be chosen even though we are specifically looking for\nscales with a G natural in them.  Once no scale matched all three pitches,\nwhich scale that matches two pitches is arbitrary.\n>>> bestScales = e.deriveRanked(['C', 'E', 'G'], resultsReturned=6)\n>>> bestScales\n[(3, <music21.scale.ConcreteScale E Concrete>),\n (3, <music21.scale.ConcreteScale D- Concrete>),\n (3, <music21.scale.ConcreteScale C# Concrete>),\n (2, <music21.scale.ConcreteScale B Concrete>),\n (2, <music21.scale.ConcreteScale A Concrete>),\n (2, <music21.scale.ConcreteScale G# Concrete>)]\n\n\n>>> eConcrete = bestScales[0][1]\n>>> ' '.join([str(p) for p in eConcrete.pitches])\n'E4 F4 G4 A#4 B4 C5 D#5 E5'",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale.",
        "type": "Title"
    },
    {
        "text": "findMissing",
        "type": "NarrativeText"
    },
    {
        "text": "other",
        "type": "Title"
    },
    {
        "text": "comparisonAttribute",
        "type": "Title"
    },
    {
        "text": "'pitchClass'",
        "type": "Title"
    },
    {
        "text": "minPitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "maxPitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "Direction.ASCENDING",
        "type": "Title"
    },
    {
        "text": "alteredDegrees",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given another object of the forms that extractPitches takes\n(e.g., a Stream,\na ConcreteScale,\na list of Pitch objects),\nreturn a list of pitches that are found in this Scale but are not\nfound in the provided object.\n>>> sc1 = scale.MajorScale('g4')\n>>> [str(p) for p in sc1.findMissing(['d'])]\n['G4', 'A4', 'B4', 'C5', 'E5', 'F#5', 'G5']",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale.",
        "type": "Title"
    },
    {
        "text": "getChord",
        "type": "Title"
    },
    {
        "text": "minPitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "maxPitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "Direction.ASCENDING",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u2192 music21.chord.Chord",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return a realized chord containing all the\npitches in this scale within a particular\ninclusive range defined by two pitches.\nAll keyword arguments are passed on to the\nChord, permitting specification of\nquarterLength and similar parameters.",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale.",
        "type": "Title"
    },
    {
        "text": "getDegreeMaxUnique",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Convenience routine to get this from the AbstractScale.",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale.",
        "type": "Title"
    },
    {
        "text": "getPitches",
        "type": "Title"
    },
    {
        "text": "minPitch",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "Pitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "maxPitch",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "Pitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "Direction | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u2192 list[music21.pitch.Pitch]",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return a list of Pitch objects, using a\ndeepcopy of a cached version if available.",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale.",
        "type": "Title"
    },
    {
        "text": "getScalaData",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return a configured ScalaData\nObject for this scale.  It can be used to find interval\ndistances in cents between degrees.",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale.",
        "type": "Title"
    },
    {
        "text": "getScaleDegreeAndAccidentalFromPitch",
        "type": "Title"
    },
    {
        "text": "pitchTarget",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "Direction.ASCENDING",
        "type": "Title"
    },
    {
        "text": "comparisonAttribute",
        "type": "Title"
    },
    {
        "text": "'name'",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given a scale (or Key object) and a pitch, return a two-element\ntuple of the degree of the scale and an accidental (or None) needed to get this\npitch.\n>>> cMaj = key.Key('C')\n>>> cMaj.getScaleDegreeAndAccidentalFromPitch(pitch.Pitch('E'))\n(3, None)\n>>> cMaj.getScaleDegreeAndAccidentalFromPitch(pitch.Pitch('E-'))\n(3, <music21.pitch.Accidental flat>)\n\n\nThe Direction of a melodic minor scale is significant\n>>> aMin = scale.MelodicMinorScale('a')\n>>> aMin.getScaleDegreeAndAccidentalFromPitch(pitch.Pitch('G'),\n...                                           direction=scale.Direction.DESCENDING)\n(7, None)\n>>> aMin.getScaleDegreeAndAccidentalFromPitch(pitch.Pitch('G'),\n...                                           direction=scale.Direction.ASCENDING)\n(7, <music21.pitch.Accidental flat>)\n>>> aMin.getScaleDegreeAndAccidentalFromPitch(pitch.Pitch('G-'),\n...                                           direction=scale.Direction.ASCENDING)\n(7, <music21.pitch.Accidental double-flat>)\n\n\nReturns (None, None) if for some reason this scale does not have this step\n(a whole-tone scale, for instance)",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale.",
        "type": "Title"
    },
    {
        "text": "getScaleDegreeFromPitch",
        "type": "Title"
    },
    {
        "text": "pitchTarget",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "Direction.ASCENDING",
        "type": "Title"
    },
    {
        "text": "comparisonAttribute",
        "type": "Title"
    },
    {
        "text": "'name'",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "For a given pitch, return the appropriate scale degree.\nIf no scale degree is available, None is returned.\nNote: by default it will use a find algorithm that is based on the note's\n.name not on .pitchClass because this is used so commonly by tonal functions.\nSo if it's important that D# and E- are the same, set the\ncomparisonAttribute to pitchClass\n>>> sc = scale.MajorScale('e-')\n>>> sc.getScaleDegreeFromPitch('e-2')\n1\n>>> sc.getScaleDegreeFromPitch('d')\n7\n>>> sc.getScaleDegreeFromPitch('d#', comparisonAttribute='name') is None\nTrue\n>>> sc.getScaleDegreeFromPitch('d#', comparisonAttribute='pitchClass')\n1\n>>> sc.getScaleDegreeFromPitch('e') is None\nTrue\n>>> sc.getScaleDegreeFromPitch('e', comparisonAttribute='step')\n1\n\n\n>>> sc = scale.HarmonicMinorScale('a')\n>>> sc.getScaleDegreeFromPitch('c')\n3\n>>> sc.getScaleDegreeFromPitch('g#')\n7\n>>> sc.getScaleDegreeFromPitch('g') is None\nTrue\n\n\n>>> cMaj = key.Key('C')\n>>> cMaj.getScaleDegreeFromPitch(pitch.Pitch('E-'),\n...                              direction=scale.Direction.ASCENDING,\n...                              comparisonAttribute='step')\n3",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale.",
        "type": "Title"
    },
    {
        "text": "getTonic",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return the tonic.\n>>> sc = scale.ConcreteScale(tonic='e-4')\n>>> sc.getTonic()\n<music21.pitch.Pitch E-4>",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale.",
        "type": "Title"
    },
    {
        "text": "intervalBetweenDegrees",
        "type": "Title"
    },
    {
        "text": "degreeStart",
        "type": "Title"
    },
    {
        "text": "degreeEnd",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "Direction.ASCENDING",
        "type": "Title"
    },
    {
        "text": "equateTermini",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given two degrees, provide the interval as an interval.Interval object.\n>>> sc = scale.MajorScale('e-')\n>>> sc.intervalBetweenDegrees(3, 7)\n<music21.interval.Interval P5>",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale.",
        "type": "Title"
    },
    {
        "text": "isNext",
        "type": "Title"
    },
    {
        "text": "other",
        "type": "Title"
    },
    {
        "text": "pitchOrigin",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "Direction",
        "type": "Title"
    },
    {
        "text": "Direction.ASCENDING",
        "type": "Title"
    },
    {
        "text": "stepSize",
        "type": "NarrativeText"
    },
    {
        "text": "getNeighbor",
        "type": "Title"
    },
    {
        "text": "Direction | bool",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "comparisonAttribute",
        "type": "Title"
    },
    {
        "text": "'name'",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given another pitch, as well as an origin and a direction,\ndetermine if this other pitch is in the next in the scale.\n>>> sc1 = scale.MajorScale('g')\n>>> sc1.isNext('d4', 'c4', scale.Direction.ASCENDING)\nTrue",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale.",
        "type": "Title"
    },
    {
        "text": "match",
        "type": "Title"
    },
    {
        "text": "other",
        "type": "Title"
    },
    {
        "text": "comparisonAttribute",
        "type": "Title"
    },
    {
        "text": "'name'",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given another object of the forms that extractPitchList can take,\n(e.g., a Stream, a ConcreteScale,\na list of Pitch objects),\nreturn a named dictionary of pitch lists with keys \u0098matched' and \u0098notMatched'.\n>>> sc1 = scale.MajorScale('g')\n>>> sc2 = scale.MajorScale('d')\n>>> sc3 = scale.MajorScale('a')\n>>> sc4 = scale.MajorScale('e')\n\n\n>>> from pprint import pprint as pp\n>>> pp(sc1.match(sc2))\n{'matched': [<music21.pitch.Pitch D4>, <music21.pitch.Pitch E4>,\n             <music21.pitch.Pitch F#4>, <music21.pitch.Pitch G4>,\n             <music21.pitch.Pitch A4>, <music21.pitch.Pitch B4>],\n'notMatched': [<music21.pitch.Pitch C#5>]}\n\n\n>>> pp(sc2.match(sc3))\n{'matched': [<music21.pitch.Pitch A4>, <music21.pitch.Pitch B4>,\n             <music21.pitch.Pitch C#5>, <music21.pitch.Pitch D5>,\n             <music21.pitch.Pitch E5>, <music21.pitch.Pitch F#5>],\n'notMatched': [<music21.pitch.Pitch G#5>]}\n\n\n>>> pp(sc1.match(sc4))\n{'matched': [<music21.pitch.Pitch E4>, <music21.pitch.Pitch F#4>,\n             <music21.pitch.Pitch A4>, <music21.pitch.Pitch B4>],\n 'notMatched': [<music21.pitch.Pitch G#4>,\n                <music21.pitch.Pitch C#5>,\n                <music21.pitch.Pitch D#5>]}",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale.",
        "type": "Title"
    },
    {
        "text": "next",
        "type": "Title"
    },
    {
        "text": "pitchOrigin",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "Direction | int",
        "type": "Title"
    },
    {
        "text": "Direction.ASCENDING",
        "type": "Title"
    },
    {
        "text": "stepSize",
        "type": "NarrativeText"
    },
    {
        "text": "getNeighbor",
        "type": "Title"
    },
    {
        "text": "Direction | bool",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "See nextPitch().  This function\nis a deprecated alias for that method.\nThis routine was named and created before music21 aspired to have\nfull subclass substitution.  Thus, is shadows the .next() function of\nMusic21Object without performing similar functionality.\nThe routine is formally deprecated in v9 and will be removed in v10.",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale.",
        "type": "Title"
    },
    {
        "text": "nextPitch",
        "type": "Title"
    },
    {
        "text": "pitchOrigin",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "Direction | int",
        "type": "Title"
    },
    {
        "text": "Direction.ASCENDING",
        "type": "Title"
    },
    {
        "text": "stepSize",
        "type": "NarrativeText"
    },
    {
        "text": "getNeighbor",
        "type": "Title"
    },
    {
        "text": "Direction | bool",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get the next pitch above (or below if direction is Direction.DESCENDING)\na pitchOrigin or None. If the pitchOrigin is None, the tonic pitch is\nreturned. This is useful when starting a chain of iterative calls.\nThe direction attribute may be either ascending or descending.\nDefault is ascending. Optionally, positive or negative integers\nmay be provided as directional stepSize scalars.\nAn optional stepSize argument can be used to set the number\nof scale steps that are stepped through.  Thus, .nextPitch(stepSize=2)\nwill give not the next pitch in the scale, but the next after this one.\nThe getNeighbor will return a pitch from the scale\nif pitchOrigin is not in the scale. This value can be\nTrue, Direction.ASCENDING, or Direction.DESCENDING.\n>>> sc = scale.MajorScale('e-')\n>>> print(sc.nextPitch('e-5'))\nF5\n>>> print(sc.nextPitch('e-5', stepSize=2))\nG5\n>>> print(sc.nextPitch('e-6', stepSize=3))\nA-6\n\n\nThis uses the getNeighbor attribute to\nfind the next note above f#5 in the E-flat\nmajor scale:\n>>> sc.nextPitch('f#5')\n<music21.pitch.Pitch G5>\n\n\n>>> sc = scale.HarmonicMinorScale('g')\n>>> sc.nextPitch('g4', scale.Direction.DESCENDING)\n<music21.pitch.Pitch F#4>\n>>> sc.nextPitch('F#4', scale.Direction.DESCENDING)\n<music21.pitch.Pitch E-4>\n>>> sc.nextPitch('E-4', scale.Direction.DESCENDING)\n<music21.pitch.Pitch D4>\n>>> sc.nextPitch('E-4', scale.Direction.ASCENDING, 1)\n<music21.pitch.Pitch F#4>\n>>> sc.nextPitch('E-4', scale.Direction.ASCENDING, 2)\n<music21.pitch.Pitch G4>",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale.",
        "type": "Title"
    },
    {
        "text": "pitchFromDegree",
        "type": "Title"
    },
    {
        "text": "degree",
        "type": "Title"
    },
    {
        "text": "int",
        "type": "Title"
    },
    {
        "text": "minPitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "maxPitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "Direction",
        "type": "Title"
    },
    {
        "text": "Direction.ASCENDING",
        "type": "Title"
    },
    {
        "text": "equateTermini",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given a scale degree, return a deepcopy of the appropriate pitch.\n>>> sc = scale.MajorScale('e-')\n>>> sc.pitchFromDegree(2)\n<music21.pitch.Pitch F4>\n>>> sc.pitchFromDegree(7)\n<music21.pitch.Pitch D5>",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale.",
        "type": "Title"
    },
    {
        "text": "pitchesFromScaleDegrees",
        "type": "Title"
    },
    {
        "text": "degreeTargets",
        "type": "Title"
    },
    {
        "text": "minPitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "maxPitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "Direction.ASCENDING",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given one or more scale degrees, return a list\nof all matches over the entire range.\n>>> sc = scale.MajorScale('e-')\n>>> sc.pitchesFromScaleDegrees([3, 7])\n[<music21.pitch.Pitch G4>, <music21.pitch.Pitch D5>]\n>>> [str(p) for p in sc.pitchesFromScaleDegrees([3, 7], 'c2', 'c6')]\n['D2', 'G2', 'D3', 'G3', 'D4', 'G4', 'D5', 'G5']\n\n\n>>> sc = scale.HarmonicMinorScale('a')\n>>> [str(p) for p in sc.pitchesFromScaleDegrees([3, 7], 'c2', 'c6')]\n['C2', 'G#2', 'C3', 'G#3', 'C4', 'G#4', 'C5', 'G#5', 'C6']",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale.",
        "type": "Title"
    },
    {
        "text": "romanNumeral",
        "type": "Title"
    },
    {
        "text": "degree",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return a RomanNumeral object built on the specified scale degree.\n>>> sc1 = scale.MajorScale('a-4')\n>>> h1 = sc1.romanNumeral(1)\n>>> h1.root()\n<music21.pitch.Pitch A-4>\n\n\n>>> h5 = sc1.romanNumeral(5)\n>>> h5.root()\n<music21.pitch.Pitch E-5>\n>>> h5\n<music21.roman.RomanNumeral V in A- major>",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale.",
        "type": "Title"
    },
    {
        "text": "show",
        "type": "Title"
    },
    {
        "text": "fmt",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "app",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "Direction.ASCENDING",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Show the scale in a format. Here, prepare scala format\nif requested.",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale.",
        "type": "Title"
    },
    {
        "text": "solfeg",
        "type": "Title"
    },
    {
        "text": "pitchTarget",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "Direction.ASCENDING",
        "type": "Title"
    },
    {
        "text": "variant",
        "type": "Title"
    },
    {
        "text": "'music21'",
        "type": "Title"
    },
    {
        "text": "chromatic",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns the chromatic solfeg (or diatonic if chromatic is False)\nfor a given pitch in a given scale.\nThe variant method lets one specify either the default music21\nor humdrum solfeg representation\nfor altered notes.\n>>> eflatMaj = key.Key('E-')\n>>> eflatMaj.solfeg(pitch.Pitch('G'))\n'mi'\n>>> eflatMaj.solfeg('A')\n'fi'\n>>> eflatMaj.solfeg('A', chromatic=False)\n'fa'\n>>> eflatMaj.solfeg(pitch.Pitch('G#'), variant='music21')  # default\n'mis'\n>>> eflatMaj.solfeg(pitch.Pitch('G#'), variant='humdrum')\n'my'",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale.",
        "type": "Title"
    },
    {
        "text": "transpose",
        "type": "Title"
    },
    {
        "text": "value",
        "type": "Title"
    },
    {
        "text": "inPlace",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Transpose this Scale by the given interval\nNote: It does not make sense to transpose an abstract scale, since\nit is merely a collection of intervals.  Thus,\nonly concrete scales can be transposed.\n>>> sc1 = scale.MajorScale('C')\n>>> sc2 = sc1.transpose('p5')\n>>> sc2\n<music21.scale.MajorScale G major>\n>>> sc3 = sc2.transpose('p5')\n>>> sc3\n<music21.scale.MajorScale D major>\n\n\n>>> sc3.transpose('p5', inPlace=True)\n>>> sc3\n<music21.scale.MajorScale A major>",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale.",
        "type": "Title"
    },
    {
        "text": "tune",
        "type": "Title"
    },
    {
        "text": "streamObj",
        "type": "Title"
    },
    {
        "text": "minPitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "maxPitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u2192 None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given a Stream object containing Pitches, match all pitch names\nand or pitch space values and replace the target pitch with\ncopies of pitches stored in this scale.\nThis is always applied recursively to all sub-Streams.",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale.",
        "type": "Title"
    },
    {
        "text": "write",
        "type": "Title"
    },
    {
        "text": "fmt",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "fp",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "Direction.ASCENDING",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Write the scale in a format.\nHere, prepare scala format if requested.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "ConcreteScale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "AbstractScale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "AbstractScale",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An abstract scale is specific scale formation, but does not have a\ndefined pitch collection or pitch reference. For example, all Major\nscales can be represented by an AbstractScale; a ConcreteScale,\nhowever, is a specific Major Scale, such as G Major.\nThese classes provide an interface to, and create and manipulate,\nthe stored IntervalNetwork\nobject. Thus, they are rarely created or manipulated directly by\nmost users.\nThe AbstractScale additionally stores an _alteredDegrees dictionary.\nSubclasses can define altered nodes in AbstractScale that are passed\nto the IntervalNetwork.\n\nEquality\u00c2\u00b6\nTwo abstract scales are the same if they have the same class and the\nsame tonicDegree and octaveDuplicating attributes and the same intervalNetwork,\nand it satisfies all other music21 superclass attributes.\n>>> as1 = scale.AbstractOctatonicScale()\n>>> as2 = scale.AbstractOctatonicScale()\n>>> as1 == as2\nTrue\n>>> as2.tonicDegree = 5\n>>> as1 == as2\nFalse\n\n\n>>> as1 == scale.AbstractDiatonicScale()\nFalse",
        "type": "ListItem"
    },
    {
        "text": "AbstractScale bases",
        "type": "Title"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "AbstractScale read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "isConcrete name",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "AbstractScale read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "AbstractScale methods",
        "type": "Title"
    },
    {
        "text": "AbstractScale.",
        "type": "Title"
    },
    {
        "text": "buildNetwork",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Calling the buildNetwork, with or without parameters,\nis main job of the AbstractScale class.  This needs to be subclassed by a derived class",
        "type": "ListItem"
    },
    {
        "text": "AbstractScale.",
        "type": "Title"
    },
    {
        "text": "buildNetworkFromPitches",
        "type": "Title"
    },
    {
        "text": "pitchList",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Builds the network (list of motions) for an abstract scale\nfrom a list of pitch.Pitch objects.  If\nthe concluding note (usually the \u009coctave\u009d) is not given,\nthen it'll be created automatically.\nHere we treat the augmented triad as a scale:\n>>> p1 = pitch.Pitch('C4')\n>>> p2 = pitch.Pitch('E4')\n>>> p3 = pitch.Pitch('G#4')\n>>> abstractScale = scale.AbstractScale()\n>>> abstractScale.buildNetworkFromPitches([p1, p2, p3])\n>>> abstractScale.octaveDuplicating\nTrue\n>>> abstractScale._net\n<music21.scale.intervalNetwork.IntervalNetwork object at 0x...>\n\n\nNow see it return a new \u009cscale\u009d of the augmentedTriad on D5\n>>> abstractScale._net.realizePitch('D5')\n[<music21.pitch.Pitch D5>, <music21.pitch.Pitch F#5>,\n <music21.pitch.Pitch A#5>, <music21.pitch.Pitch D6>]\n\n\nIt is also possible to use implicit octaves:\n>>> abstract_scale = scale.AbstractScale()\n>>> abstract_scale.buildNetworkFromPitches(['C', 'F'])\n>>> abstract_scale.octaveDuplicating\nTrue\n>>> abstract_scale._net.realizePitch('G')\n[<music21.pitch.Pitch G4>, <music21.pitch.Pitch C5>, <music21.pitch.Pitch G5>]",
        "type": "ListItem"
    },
    {
        "text": "static",
        "type": "Title"
    },
    {
        "text": "AbstractScale.",
        "type": "Title"
    },
    {
        "text": "fixDefaultOctaveForPitchList",
        "type": "Title"
    },
    {
        "text": "pitchList",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Suppose you have a set of octaveless Pitches that you use to make a scale.\nSomething like:\n>>> pitchListStrs = 'a b c d e f g a'.split()\n>>> pitchList = [pitch.Pitch(p) for p in pitchListStrs]\n\n\nHere's the problem, between pitchList[1] and pitchList[2] the .implicitOctave\nstays the same, so the .ps drops:\n>>> (pitchList[1].implicitOctave, pitchList[2].implicitOctave)\n(4, 4)\n>>> (pitchList[1].ps, pitchList[2].ps)\n(71.0, 60.0)\n\n\nHence this helper staticmethod that makes it so that for octaveless pitches ONLY, each\none has a .ps above the previous:\n>>> pl2 = scale.AbstractScale.fixDefaultOctaveForPitchList(pitchList)\n>>> (pl2[1].implicitOctave, pl2[2].implicitOctave, pl2[3].implicitOctave)\n(4, 5, 5)\n>>> (pl2[1].ps, pl2[2].ps)\n(71.0, 72.0)\n\n\nNote that the list is modified inPlace:\n>>> pitchList is pl2\nTrue\n>>> pitchList[2] is pl2[2]\nTrue",
        "type": "ListItem"
    },
    {
        "text": "AbstractScale.",
        "type": "Title"
    },
    {
        "text": "getDegreeMaxUnique",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return the maximum number of scale steps, or the number to use as a\nmodulus.",
        "type": "ListItem"
    },
    {
        "text": "AbstractScale.",
        "type": "Title"
    },
    {
        "text": "getIntervals",
        "type": "Title"
    },
    {
        "text": "stepOfPitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "minPitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "maxPitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "Direction.ASCENDING",
        "type": "Title"
    },
    {
        "text": "reverse",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Realize the abstract scale as a list of pitch\nobjects, given a pitch object, the step of\nthat pitch object, and a min and max pitch.",
        "type": "ListItem"
    },
    {
        "text": "AbstractScale.",
        "type": "Title"
    },
    {
        "text": "getNewTonicPitch",
        "type": "Title"
    },
    {
        "text": "pitchReference",
        "type": "Title"
    },
    {
        "text": "nodeName",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "Direction.ASCENDING",
        "type": "Title"
    },
    {
        "text": "minPitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "maxPitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Define a pitch target and a node.",
        "type": "ListItem"
    },
    {
        "text": "AbstractScale.",
        "type": "Title"
    },
    {
        "text": "getPitchFromNodeDegree",
        "type": "Title"
    },
    {
        "text": "pitchReference",
        "type": "Title"
    },
    {
        "text": "nodeName",
        "type": "Title"
    },
    {
        "text": "nodeDegreeTarget",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "Direction.ASCENDING",
        "type": "Title"
    },
    {
        "text": "minPitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "maxPitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "equateTermini",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get a pitch for desired scale degree.",
        "type": "ListItem"
    },
    {
        "text": "AbstractScale.",
        "type": "Title"
    },
    {
        "text": "getRealization",
        "type": "Title"
    },
    {
        "text": "pitchObj",
        "type": "Title"
    },
    {
        "text": "stepOfPitch",
        "type": "Title"
    },
    {
        "text": "minPitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "maxPitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "Direction.ASCENDING",
        "type": "Title"
    },
    {
        "text": "reverse",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Realize the abstract scale as a list of pitch objects,\ngiven a pitch object, the step of that pitch object,\nand a min and max pitch.",
        "type": "ListItem"
    },
    {
        "text": "AbstractScale.",
        "type": "Title"
    },
    {
        "text": "getRelativeNodeDegree",
        "type": "Title"
    },
    {
        "text": "pitchReference",
        "type": "Title"
    },
    {
        "text": "nodeName",
        "type": "Title"
    },
    {
        "text": "pitchTarget",
        "type": "Title"
    },
    {
        "text": "comparisonAttribute",
        "type": "Title"
    },
    {
        "text": "'pitchClass'",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "Direction.ASCENDING",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Expose functionality from\nIntervalNetwork, passing on the\nstored alteredDegrees dictionary.",
        "type": "ListItem"
    },
    {
        "text": "AbstractScale.",
        "type": "Title"
    },
    {
        "text": "getScalaData",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "Direction.ASCENDING",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get the interval sequence as a :class:~music21.scala.ScalaData object\nfor a particular scale:",
        "type": "ListItem"
    },
    {
        "text": "AbstractScale.",
        "type": "Title"
    },
    {
        "text": "nextPitch",
        "type": "Title"
    },
    {
        "text": "pitchReference",
        "type": "Title"
    },
    {
        "text": "nodeName",
        "type": "Title"
    },
    {
        "text": "pitchOrigin",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "Direction",
        "type": "Title"
    },
    {
        "text": "Direction.ASCENDING",
        "type": "Title"
    },
    {
        "text": "stepSize",
        "type": "NarrativeText"
    },
    {
        "text": "getNeighbor",
        "type": "Title"
    },
    {
        "text": "Direction | bool",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Expose functionality from IntervalNetwork,\npassing on the stored alteredDegrees dictionary.",
        "type": "ListItem"
    },
    {
        "text": "AbstractScale.",
        "type": "Title"
    },
    {
        "text": "realizePitchByDegree",
        "type": "Title"
    },
    {
        "text": "pitchReference",
        "type": "Title"
    },
    {
        "text": "nodeId",
        "type": "Title"
    },
    {
        "text": "nodeDegreeTargets",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "Direction.ASCENDING",
        "type": "Title"
    },
    {
        "text": "minPitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "maxPitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given one or more scale degrees, return a list of\nall matches over the entire range.\nSee realizePitchByDegree().\nin intervalNetwork.IntervalNetwork.\nCreate an abstract pentatonic scale:\n>>> pitchList = ['C#4', 'D#4', 'F#4', 'G#4', 'A#4']\n>>> abstractScale = scale.AbstractScale()\n>>> abstractScale.buildNetworkFromPitches([pitch.Pitch(p) for p in pitchList])",
        "type": "ListItem"
    },
    {
        "text": "AbstractScale.",
        "type": "Title"
    },
    {
        "text": "show",
        "type": "Title"
    },
    {
        "text": "fmt",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "app",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "Direction.ASCENDING",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Show the scale in a format. Here, prepare scala format if requested.",
        "type": "ListItem"
    },
    {
        "text": "AbstractScale.",
        "type": "Title"
    },
    {
        "text": "write",
        "type": "Title"
    },
    {
        "text": "fmt",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "fp",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "Direction.ASCENDING",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Write the scale in a format. Here, prepare scala format if requested.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "AbstractScale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "AbstractCyclicalScale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "AbstractCyclicalScale",
        "type": "Title"
    },
    {
        "text": "mode",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A scale of any size built with an interval list of any form.\nThe resulting scale may be non octave repeating.",
        "type": "ListItem"
    },
    {
        "text": "AbstractCyclicalScale bases",
        "type": "Title"
    },
    {
        "text": "AbstractScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "AbstractCyclicalScale read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "isConcrete name",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "AbstractCyclicalScale read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "AbstractCyclicalScale methods",
        "type": "Title"
    },
    {
        "text": "AbstractCyclicalScale.",
        "type": "Title"
    },
    {
        "text": "buildNetwork",
        "type": "Title"
    },
    {
        "text": "mode",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Here, mode is the list of intervals.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from AbstractScale:",
        "type": "NarrativeText"
    },
    {
        "text": "buildNetworkFromPitches() fixDefaultOctaveForPitchList() getDegreeMaxUnique() getIntervals() getNewTonicPitch() getPitchFromNodeDegree() getRealization() getRelativeNodeDegree() getScalaData() nextPitch() realizePitchByDegree() show() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "AbstractCyclicalScale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "AbstractDiatonicScale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "AbstractDiatonicScale",
        "type": "Title"
    },
    {
        "text": "mode",
        "type": "Title"
    },
    {
        "text": "str | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An abstract representation of a Diatonic scale w/ or without mode.\n>>> as1 = scale.AbstractDiatonicScale('major')\n>>> as1.type\n'Abstract diatonic'\n>>> as1.mode\n'major'\n>>> as1.octaveDuplicating\nTrue\n\n\n\nEquality\u00c2\u00b6\nAbstractDiatonicScales must satisfy all the characteristics of a\ngeneral AbstractScale but also need to have equal dominantDegrees.\n>>> as1 = scale.AbstractDiatonicScale('major')\n>>> as2 = scale.AbstractDiatonicScale('lydian')\n>>> as1 == as2\nFalse\n\n\nNote that their modes do not need to be the same.\nFor instance for the case of major and Ionian which have\nthe same networks:\n>>> as3 = scale.AbstractDiatonicScale('ionian')\n>>> (as1.mode, as3.mode)\n('major', 'ionian')\n>>> as1 == as3\nTrue",
        "type": "ListItem"
    },
    {
        "text": "AbstractDiatonicScale bases",
        "type": "Title"
    },
    {
        "text": "AbstractScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "AbstractDiatonicScale read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "isConcrete name",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "AbstractDiatonicScale read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "AbstractDiatonicScale methods",
        "type": "Title"
    },
    {
        "text": "AbstractDiatonicScale.",
        "type": "Title"
    },
    {
        "text": "buildNetwork",
        "type": "Title"
    },
    {
        "text": "mode",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given subclass dependent parameters, build and assign the IntervalNetwork.\n>>> sc = scale.AbstractDiatonicScale()\n>>> sc.buildNetwork('Lydian')  # N.B. case-insensitive name\n>>> [str(p) for p in sc.getRealization('f4', 1, 'f2', 'f6')]\n['F2', 'G2', 'A2', 'B2', 'C3', 'D3', 'E3',\n 'F3', 'G3', 'A3', 'B3', 'C4', 'D4', 'E4',\n 'F4', 'G4', 'A4', 'B4', 'C5', 'D5', 'E5',\n 'F5', 'G5', 'A5', 'B5', 'C6', 'D6', 'E6', 'F6']\n\n\nUnknown modes raise an exception:\n>>> sc.buildNetwork('blues-like')\nTraceback (most recent call last):\nmusic21.scale.ScaleException: Cannot create a\n    scale of the following mode: 'blues-like'\n\n\n\nChanged in v6: case-insensitive modes",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from AbstractScale:",
        "type": "NarrativeText"
    },
    {
        "text": "buildNetworkFromPitches() fixDefaultOctaveForPitchList() getDegreeMaxUnique() getIntervals() getNewTonicPitch() getPitchFromNodeDegree() getRealization() getRelativeNodeDegree() getScalaData() nextPitch() realizePitchByDegree() show() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "AbstractDiatonicScale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "AbstractHarmonicMinorScale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "AbstractHarmonicMinorScale",
        "type": "Title"
    },
    {
        "text": "mode",
        "type": "Title"
    },
    {
        "text": "str | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A true bidirectional scale that with the augmented\nsecond to a leading tone.\nThis is the only scale to use the \u009c_alteredDegrees\u009d property.\nmode is not used",
        "type": "ListItem"
    },
    {
        "text": "AbstractHarmonicMinorScale bases",
        "type": "Title"
    },
    {
        "text": "AbstractScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "AbstractHarmonicMinorScale read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "isConcrete name",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "AbstractHarmonicMinorScale read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "AbstractHarmonicMinorScale methods",
        "type": "Title"
    },
    {
        "text": "AbstractHarmonicMinorScale.",
        "type": "Title"
    },
    {
        "text": "buildNetwork",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Calling the buildNetwork, with or without parameters,\nis main job of the AbstractScale class.  This needs to be subclassed by a derived class",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from AbstractScale:",
        "type": "NarrativeText"
    },
    {
        "text": "buildNetworkFromPitches() fixDefaultOctaveForPitchList() getDegreeMaxUnique() getIntervals() getNewTonicPitch() getPitchFromNodeDegree() getRealization() getRelativeNodeDegree() getScalaData() nextPitch() realizePitchByDegree() show() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "AbstractHarmonicMinorScale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "AbstractMelodicMinorScale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "AbstractMelodicMinorScale",
        "type": "Title"
    },
    {
        "text": "mode",
        "type": "Title"
    },
    {
        "text": "str | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A directional scale.\nmode is not used.",
        "type": "ListItem"
    },
    {
        "text": "AbstractMelodicMinorScale bases",
        "type": "Title"
    },
    {
        "text": "AbstractScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "AbstractMelodicMinorScale read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "isConcrete name",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "AbstractMelodicMinorScale read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "AbstractMelodicMinorScale methods",
        "type": "Title"
    },
    {
        "text": "AbstractMelodicMinorScale.",
        "type": "Title"
    },
    {
        "text": "buildNetwork",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Calling the buildNetwork, with or without parameters,\nis main job of the AbstractScale class.  This needs to be subclassed by a derived class",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from AbstractScale:",
        "type": "NarrativeText"
    },
    {
        "text": "buildNetworkFromPitches() fixDefaultOctaveForPitchList() getDegreeMaxUnique() getIntervals() getNewTonicPitch() getPitchFromNodeDegree() getRealization() getRelativeNodeDegree() getScalaData() nextPitch() realizePitchByDegree() show() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "AbstractMelodicMinorScale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "AbstractOctatonicScale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "AbstractOctatonicScale",
        "type": "Title"
    },
    {
        "text": "mode",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Abstract scale representing the two octatonic scales.",
        "type": "ListItem"
    },
    {
        "text": "AbstractOctatonicScale bases",
        "type": "Title"
    },
    {
        "text": "AbstractScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "AbstractOctatonicScale read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "isConcrete name",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "AbstractOctatonicScale read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "AbstractOctatonicScale methods",
        "type": "Title"
    },
    {
        "text": "AbstractOctatonicScale.",
        "type": "Title"
    },
    {
        "text": "buildNetwork",
        "type": "Title"
    },
    {
        "text": "mode",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given subclass dependent parameters, build and assign the IntervalNetwork.\n>>> sc = scale.AbstractDiatonicScale()\n>>> sc.buildNetwork('lydian')\n>>> [str(p) for p in sc.getRealization('f4', 1, 'f2', 'f6')]\n['F2', 'G2', 'A2', 'B2', 'C3', 'D3', 'E3',\n 'F3', 'G3', 'A3', 'B3', 'C4', 'D4', 'E4',\n 'F4', 'G4', 'A4', 'B4', 'C5', 'D5', 'E5',\n 'F5', 'G5', 'A5', 'B5', 'C6', 'D6', 'E6', 'F6']",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from AbstractScale:",
        "type": "NarrativeText"
    },
    {
        "text": "buildNetworkFromPitches() fixDefaultOctaveForPitchList() getDegreeMaxUnique() getIntervals() getNewTonicPitch() getPitchFromNodeDegree() getRealization() getRelativeNodeDegree() getScalaData() nextPitch() realizePitchByDegree() show() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "AbstractOctatonicScale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "AbstractOctaveRepeatingScale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "AbstractOctaveRepeatingScale",
        "type": "Title"
    },
    {
        "text": "mode",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A scale of any size built with an interval list\nthat assumes octave completion. An additional\ninterval to complete the octave will be added\nto the provided intervals. This does not guarantee\nthat the octave will be repeated in one octave,\nonly the next octave above the last interval will\nbe provided.",
        "type": "ListItem"
    },
    {
        "text": "AbstractOctaveRepeatingScale bases",
        "type": "Title"
    },
    {
        "text": "AbstractScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "AbstractOctaveRepeatingScale read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "isConcrete name",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "AbstractOctaveRepeatingScale read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "AbstractOctaveRepeatingScale methods",
        "type": "Title"
    },
    {
        "text": "AbstractOctaveRepeatingScale.",
        "type": "Title"
    },
    {
        "text": "buildNetwork",
        "type": "Title"
    },
    {
        "text": "mode",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Here, mode is the list of intervals.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from AbstractScale:",
        "type": "NarrativeText"
    },
    {
        "text": "buildNetworkFromPitches() fixDefaultOctaveForPitchList() getDegreeMaxUnique() getIntervals() getNewTonicPitch() getPitchFromNodeDegree() getRealization() getRelativeNodeDegree() getScalaData() nextPitch() realizePitchByDegree() show() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "AbstractOctaveRepeatingScale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "AbstractRagAsawari\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "AbstractRagAsawari",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A pseudo raga-scale.",
        "type": "ListItem"
    },
    {
        "text": "AbstractRagAsawari bases",
        "type": "Title"
    },
    {
        "text": "AbstractScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "AbstractRagAsawari read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "isConcrete name",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "AbstractRagAsawari read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "AbstractRagAsawari methods",
        "type": "Title"
    },
    {
        "text": "AbstractRagAsawari.",
        "type": "Title"
    },
    {
        "text": "buildNetwork",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Calling the buildNetwork, with or without parameters,\nis main job of the AbstractScale class.  This needs to be subclassed by a derived class",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from AbstractScale:",
        "type": "NarrativeText"
    },
    {
        "text": "buildNetworkFromPitches() fixDefaultOctaveForPitchList() getDegreeMaxUnique() getIntervals() getNewTonicPitch() getPitchFromNodeDegree() getRealization() getRelativeNodeDegree() getScalaData() nextPitch() realizePitchByDegree() show() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "AbstractRagAsawari instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "AbstractRagMarwa\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "AbstractRagMarwa",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A pseudo raga-scale.",
        "type": "ListItem"
    },
    {
        "text": "AbstractRagMarwa bases",
        "type": "Title"
    },
    {
        "text": "AbstractScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "AbstractRagMarwa read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "isConcrete name",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "AbstractRagMarwa read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "AbstractRagMarwa methods",
        "type": "Title"
    },
    {
        "text": "AbstractRagMarwa.",
        "type": "Title"
    },
    {
        "text": "buildNetwork",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Calling the buildNetwork, with or without parameters,\nis main job of the AbstractScale class.  This needs to be subclassed by a derived class",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from AbstractScale:",
        "type": "NarrativeText"
    },
    {
        "text": "buildNetworkFromPitches() fixDefaultOctaveForPitchList() getDegreeMaxUnique() getIntervals() getNewTonicPitch() getPitchFromNodeDegree() getRealization() getRelativeNodeDegree() getScalaData() nextPitch() realizePitchByDegree() show() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "AbstractRagMarwa instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "AbstractWeightedHexatonicBlues\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "AbstractWeightedHexatonicBlues",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A dynamic, probabilistic mixture of minor pentatonic and a hexatonic blues scale",
        "type": "ListItem"
    },
    {
        "text": "AbstractWeightedHexatonicBlues bases",
        "type": "Title"
    },
    {
        "text": "AbstractScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "AbstractWeightedHexatonicBlues read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "isConcrete name",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "AbstractWeightedHexatonicBlues read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "AbstractWeightedHexatonicBlues methods",
        "type": "Title"
    },
    {
        "text": "AbstractWeightedHexatonicBlues.",
        "type": "Title"
    },
    {
        "text": "buildNetwork",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Calling the buildNetwork, with or without parameters,\nis main job of the AbstractScale class.  This needs to be subclassed by a derived class",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from AbstractScale:",
        "type": "NarrativeText"
    },
    {
        "text": "buildNetworkFromPitches() fixDefaultOctaveForPitchList() getDegreeMaxUnique() getIntervals() getNewTonicPitch() getPitchFromNodeDegree() getRealization() getRelativeNodeDegree() getScalaData() nextPitch() realizePitchByDegree() show() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "AbstractWeightedHexatonicBlues instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "ChromaticScale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "ChromaticScale",
        "type": "Title"
    },
    {
        "text": "tonic",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A concrete cyclical scale, based on a cycle of half steps.\n>>> sc = scale.ChromaticScale('g2')\n>>> [str(p) for p in sc.pitches]\n['G2', 'A-2', 'A2', 'B-2', 'B2', 'C3', 'C#3', 'D3', 'E-3', 'E3', 'F3', 'F#3', 'G3']\n>>> [str(p) for p in sc.getPitches('g2', 'g6')]\n['G2', 'A-2', ..., 'F#3', 'G3', 'A-3', ..., 'F#4', 'G4', 'A-4', ..., 'G5', ..., 'F#6', 'G6']\n>>> sc.abstract.getDegreeMaxUnique()\n12\n>>> sc.pitchFromDegree(1)\n<music21.pitch.Pitch G2>\n>>> sc.pitchFromDegree(2)\n<music21.pitch.Pitch A-2>\n>>> sc.pitchFromDegree(3)\n<music21.pitch.Pitch A2>\n>>> sc.pitchFromDegree(8)\n<music21.pitch.Pitch D3>\n>>> sc.pitchFromDegree(12)\n<music21.pitch.Pitch F#3>\n>>> sc.getScaleDegreeFromPitch('g2', comparisonAttribute='pitchClass')\n1\n>>> sc.getScaleDegreeFromPitch('F#6', comparisonAttribute='pitchClass')\n12",
        "type": "ListItem"
    },
    {
        "text": "ChromaticScale bases",
        "type": "Title"
    },
    {
        "text": "ConcreteScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "ChromaticScale read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "chord isConcrete name pitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "ChromaticScale read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "abstract",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "ChromaticScale methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() derive() deriveAll() deriveByDegree() deriveRanked() findMissing() getChord() getDegreeMaxUnique() getPitches() getScalaData() getScaleDegreeAndAccidentalFromPitch() getScaleDegreeFromPitch() getTonic() intervalBetweenDegrees() isNext() match() next() nextPitch() pitchFromDegree() pitchesFromScaleDegrees() romanNumeral() show() solfeg() transpose() tune() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "ChromaticScale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "CyclicalScale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "CyclicalScale",
        "type": "Title"
    },
    {
        "text": "tonic",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "Pitch",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "intervalList",
        "type": "Title"
    },
    {
        "text": "list | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A concrete cyclical scale, based on a cycle of intervals.\n>>> sc = scale.CyclicalScale('c4', ['P5'])  # can give one list\n>>> sc.pitches\n[<music21.pitch.Pitch C4>, <music21.pitch.Pitch G4>]\n>>> [str(p) for p in sc.getPitches('g2', 'g6')]\n['B-2', 'F3', 'C4', 'G4', 'D5', 'A5', 'E6']\n>>> sc.getScaleDegreeFromPitch('g4')  # as single interval cycle, all are 1\n1\n>>> sc.getScaleDegreeFromPitch('b-2', direction=scale.Direction.BI)\n1\n\n\nNo intervalList defaults to a single minor second:\n>>> sc2 = scale.CyclicalScale()\n>>> sc2.pitches\n[<music21.pitch.Pitch C4>, <music21.pitch.Pitch D-4>]",
        "type": "ListItem"
    },
    {
        "text": "CyclicalScale bases",
        "type": "Title"
    },
    {
        "text": "ConcreteScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "CyclicalScale read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "chord isConcrete name pitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "CyclicalScale read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "abstract",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "CyclicalScale methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() derive() deriveAll() deriveByDegree() deriveRanked() findMissing() getChord() getDegreeMaxUnique() getPitches() getScalaData() getScaleDegreeAndAccidentalFromPitch() getScaleDegreeFromPitch() getTonic() intervalBetweenDegrees() isNext() match() next() nextPitch() pitchFromDegree() pitchesFromScaleDegrees() romanNumeral() show() solfeg() transpose() tune() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "CyclicalScale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "DiatonicScale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "DiatonicScale",
        "type": "Title"
    },
    {
        "text": "tonic",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "Pitch",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A concrete diatonic scale. Each DiatonicScale\nhas one instance of a AbstractDiatonicScale.",
        "type": "ListItem"
    },
    {
        "text": "DiatonicScale bases",
        "type": "Title"
    },
    {
        "text": "ConcreteScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "DiatonicScale read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "chord isConcrete name pitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "DiatonicScale read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "abstract",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "DiatonicScale methods",
        "type": "Title"
    },
    {
        "text": "DiatonicScale.",
        "type": "Title"
    },
    {
        "text": "getDominant",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return the dominant.\n>>> sc = scale.MajorScale('e-')\n>>> sc.getDominant()\n<music21.pitch.Pitch B-4>\n>>> sc = scale.MajorScale('F#')\n>>> sc.getDominant()\n<music21.pitch.Pitch C#5>",
        "type": "ListItem"
    },
    {
        "text": "DiatonicScale.",
        "type": "Title"
    },
    {
        "text": "getLeadingTone",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return the leading tone.\n>>> sc = scale.MinorScale('c')\n>>> sc.getLeadingTone()\n<music21.pitch.Pitch B4>\n\n\nNote that the leading tone isn't necessarily\nthe same as the 7th scale degree in minor:\n>>> sc.pitchFromDegree(7)\n<music21.pitch.Pitch B-4>",
        "type": "ListItem"
    },
    {
        "text": "DiatonicScale.",
        "type": "Title"
    },
    {
        "text": "getParallelMajor",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return a concrete relative major scale\n>>> sc1 = scale.MinorScale(pitch.Pitch('g'))\n>>> [str(p) for p in sc1.pitches]\n['G4', 'A4', 'B-4', 'C5', 'D5', 'E-5', 'F5', 'G5']\n\n\n>>> sc2 = sc1.getParallelMajor()\n>>> [str(p) for p in sc2.pitches]\n['G4', 'A4', 'B4', 'C5', 'D5', 'E5', 'F#5', 'G5']",
        "type": "ListItem"
    },
    {
        "text": "DiatonicScale.",
        "type": "Title"
    },
    {
        "text": "getParallelMinor",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return a parallel minor scale based on this\nconcrete scale.\n>>> sc1 = scale.MajorScale(pitch.Pitch('a'))\n>>> [str(p) for p in sc1.pitches]\n['A4', 'B4', 'C#5', 'D5', 'E5', 'F#5', 'G#5', 'A5']\n>>> sc2 = sc1.getParallelMinor()\n>>> [str(p) for p in sc2.pitches]\n['A4', 'B4', 'C5', 'D5', 'E5', 'F5', 'G5', 'A5']\n\n\nRunning getParallelMinor() again doesn't change anything\n>>> sc3 = sc2.getParallelMinor()\n>>> [str(p) for p in sc3.pitches]\n['A4', 'B4', 'C5', 'D5', 'E5', 'F5', 'G5', 'A5']",
        "type": "ListItem"
    },
    {
        "text": "DiatonicScale.",
        "type": "Title"
    },
    {
        "text": "getRelativeMajor",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return a concrete relative major scale\n>>> sc1 = scale.MinorScale(pitch.Pitch('g'))\n>>> [str(p) for p in sc1.pitches]\n['G4', 'A4', 'B-4', 'C5', 'D5', 'E-5', 'F5', 'G5']\n\n\n>>> sc2 = sc1.getRelativeMajor()\n>>> [str(p) for p in sc2.pitches]\n['B-4', 'C5', 'D5', 'E-5', 'F5', 'G5', 'A5', 'B-5']\n\n\nThough it's unlikely you would want to do it,\ngetRelativeMajor works on other diatonic scales than\njust Major and Minor.\n>>> sc2 = scale.DorianScale('d')\n>>> [str(p) for p in sc2.pitches]\n['D4', 'E4', 'F4', 'G4', 'A4', 'B4', 'C5', 'D5']\n\n\n>>> [str(p) for p in sc2.getRelativeMajor().pitches]\n['C5', 'D5', 'E5', 'F5', 'G5', 'A5', 'B5', 'C6']",
        "type": "ListItem"
    },
    {
        "text": "DiatonicScale.",
        "type": "Title"
    },
    {
        "text": "getRelativeMinor",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return a relative minor scale based on this concrete scale.\n>>> sc1 = scale.MajorScale(pitch.Pitch('a'))\n>>> [str(p) for p in sc1.pitches]\n['A4', 'B4', 'C#5', 'D5', 'E5', 'F#5', 'G#5', 'A5']\n>>> sc2 = sc1.getRelativeMinor()\n>>> [str(p) for p in sc2.pitches]\n['F#5', 'G#5', 'A5', 'B5', 'C#6', 'D6', 'E6', 'F#6']",
        "type": "ListItem"
    },
    {
        "text": "DiatonicScale.",
        "type": "Title"
    },
    {
        "text": "getTonic",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return the tonic of the diatonic scale.\n>>> sc = scale.MajorScale('e-')\n>>> sc.getTonic()\n<music21.pitch.Pitch E-4>\n>>> sc = scale.MajorScale('F#')\n>>> sc.getTonic()\n<music21.pitch.Pitch F#4>\n\n\nIf no tonic has been defined, it will return an Exception.\n(same is true for getDominant, getLeadingTone, etc.)\n>>> sc = scale.DiatonicScale()\n>>> sc.getTonic()\nTraceback (most recent call last):\nmusic21.scale.intervalNetwork.IntervalNetworkException: pitchReference cannot be None",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() derive() deriveAll() deriveByDegree() deriveRanked() findMissing() getChord() getDegreeMaxUnique() getPitches() getScalaData() getScaleDegreeAndAccidentalFromPitch() getScaleDegreeFromPitch() intervalBetweenDegrees() isNext() match() next() nextPitch() pitchFromDegree() pitchesFromScaleDegrees() romanNumeral() show() solfeg() transpose() tune() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "DiatonicScale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "DorianScale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "DorianScale",
        "type": "Title"
    },
    {
        "text": "tonic",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A scale built on the Dorian (D-D white-key) mode.\n>>> sc = scale.DorianScale(pitch.Pitch('d'))\n>>> [str(p) for p in sc.pitches]\n['D4', 'E4', 'F4', 'G4', 'A4', 'B4', 'C5', 'D5']",
        "type": "ListItem"
    },
    {
        "text": "DorianScale bases",
        "type": "Title"
    },
    {
        "text": "DiatonicScale",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "DorianScale read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "chord isConcrete name pitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "DorianScale read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "abstract",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "DorianScale methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from DiatonicScale:",
        "type": "NarrativeText"
    },
    {
        "text": "getDominant() getLeadingTone() getParallelMajor() getParallelMinor() getRelativeMajor() getRelativeMinor() getTonic()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() derive() deriveAll() deriveByDegree() deriveRanked() findMissing() getChord() getDegreeMaxUnique() getPitches() getScalaData() getScaleDegreeAndAccidentalFromPitch() getScaleDegreeFromPitch() intervalBetweenDegrees() isNext() match() next() nextPitch() pitchFromDegree() pitchesFromScaleDegrees() romanNumeral() show() solfeg() transpose() tune() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "DorianScale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "HarmonicMinorScale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "HarmonicMinorScale",
        "type": "Title"
    },
    {
        "text": "tonic",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The harmonic minor collection, realized as a scale.\n(The usage of this collection as a scale, is quite ahistorical for\nWestern European classical music, but it is common in other parts of the\nworld, but where the term \u009cHarmonicMinor\u009d would not be appropriate).\n>>> sc = scale.HarmonicMinorScale('e4')\n>>> [str(p) for p in sc.pitches]\n['E4', 'F#4', 'G4', 'A4', 'B4', 'C5', 'D#5', 'E5']\n>>> sc.getTonic()\n<music21.pitch.Pitch E4>\n>>> sc.getDominant()\n<music21.pitch.Pitch B4>\n>>> sc.pitchFromDegree(1)  # scale degree 1 is treated as lowest\n<music21.pitch.Pitch E4>\n\n\n>>> sc = scale.HarmonicMinorScale()\n>>> sc\n<music21.scale.HarmonicMinorScale Abstract harmonic minor>\n>>> sc.deriveRanked(['C', 'E', 'G'], comparisonAttribute='name')\n[(3, <music21.scale.HarmonicMinorScale F harmonic minor>),\n (3, <music21.scale.HarmonicMinorScale E harmonic minor>),\n (2, <music21.scale.HarmonicMinorScale B harmonic minor>),\n (2, <music21.scale.HarmonicMinorScale A harmonic minor>)]\n\n\nNote that G and D are also equally good as B and A, but the system arbitrarily\nchooses among ties.",
        "type": "ListItem"
    },
    {
        "text": "HarmonicMinorScale bases",
        "type": "Title"
    },
    {
        "text": "DiatonicScale",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "HarmonicMinorScale read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "chord isConcrete name pitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "HarmonicMinorScale read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "abstract",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "HarmonicMinorScale methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from DiatonicScale:",
        "type": "NarrativeText"
    },
    {
        "text": "getDominant() getLeadingTone() getParallelMajor() getParallelMinor() getRelativeMajor() getRelativeMinor() getTonic()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() derive() deriveAll() deriveByDegree() deriveRanked() findMissing() getChord() getDegreeMaxUnique() getPitches() getScalaData() getScaleDegreeAndAccidentalFromPitch() getScaleDegreeFromPitch() intervalBetweenDegrees() isNext() match() next() nextPitch() pitchFromDegree() pitchesFromScaleDegrees() romanNumeral() show() solfeg() transpose() tune() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "HarmonicMinorScale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "HypoaeolianScale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "HypoaeolianScale",
        "type": "Title"
    },
    {
        "text": "tonic",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A hypoaeolian scale\n>>> sc = scale.HypoaeolianScale(pitch.Pitch('a'))\n>>> [str(p) for p in sc.pitches]\n['E4', 'F4', 'G4', 'A4', 'B4', 'C5', 'D5', 'E5']\n\n\n>>> sc = scale.HypoaeolianScale(pitch.Pitch('c'))\n>>> [str(p) for p in sc.pitches]\n['G3', 'A-3', 'B-3', 'C4', 'D4', 'E-4', 'F4', 'G4']",
        "type": "ListItem"
    },
    {
        "text": "HypoaeolianScale bases",
        "type": "Title"
    },
    {
        "text": "DiatonicScale",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "HypoaeolianScale read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "chord isConcrete name pitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "HypoaeolianScale read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "abstract",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "HypoaeolianScale methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from DiatonicScale:",
        "type": "NarrativeText"
    },
    {
        "text": "getDominant() getLeadingTone() getParallelMajor() getParallelMinor() getRelativeMajor() getRelativeMinor() getTonic()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() derive() deriveAll() deriveByDegree() deriveRanked() findMissing() getChord() getDegreeMaxUnique() getPitches() getScalaData() getScaleDegreeAndAccidentalFromPitch() getScaleDegreeFromPitch() intervalBetweenDegrees() isNext() match() next() nextPitch() pitchFromDegree() pitchesFromScaleDegrees() romanNumeral() show() solfeg() transpose() tune() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "HypoaeolianScale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "HypodorianScale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "HypodorianScale",
        "type": "Title"
    },
    {
        "text": "tonic",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A hypodorian scale: a dorian scale where the given pitch is scale degree 4.\n>>> sc = scale.HypodorianScale(pitch.Pitch('d'))\n>>> [str(p) for p in sc.pitches]\n['A3', 'B3', 'C4', 'D4', 'E4', 'F4', 'G4', 'A4']\n>>> sc = scale.HypodorianScale(pitch.Pitch('c'))\n>>> [str(p) for p in sc.pitches]\n['G3', 'A3', 'B-3', 'C4', 'D4', 'E-4', 'F4', 'G4']",
        "type": "ListItem"
    },
    {
        "text": "HypodorianScale bases",
        "type": "Title"
    },
    {
        "text": "DiatonicScale",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "HypodorianScale read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "chord isConcrete name pitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "HypodorianScale read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "abstract",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "HypodorianScale methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from DiatonicScale:",
        "type": "NarrativeText"
    },
    {
        "text": "getDominant() getLeadingTone() getParallelMajor() getParallelMinor() getRelativeMajor() getRelativeMinor() getTonic()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() derive() deriveAll() deriveByDegree() deriveRanked() findMissing() getChord() getDegreeMaxUnique() getPitches() getScalaData() getScaleDegreeAndAccidentalFromPitch() getScaleDegreeFromPitch() intervalBetweenDegrees() isNext() match() next() nextPitch() pitchFromDegree() pitchesFromScaleDegrees() romanNumeral() show() solfeg() transpose() tune() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "HypodorianScale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "HypolocrianScale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "HypolocrianScale",
        "type": "Title"
    },
    {
        "text": "tonic",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A hypolocrian scale\n>>> sc = scale.HypolocrianScale(pitch.Pitch('b'))\n>>> [str(p) for p in sc.pitches]\n['F4', 'G4', 'A4', 'B4', 'C5', 'D5', 'E5', 'F5']\n\n\n>>> sc = scale.HypolocrianScale(pitch.Pitch('c'))\n>>> [str(p) for p in sc.pitches]\n['G-3', 'A-3', 'B-3', 'C4', 'D-4', 'E-4', 'F4', 'G-4']",
        "type": "ListItem"
    },
    {
        "text": "HypolocrianScale bases",
        "type": "Title"
    },
    {
        "text": "DiatonicScale",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "HypolocrianScale read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "chord isConcrete name pitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "HypolocrianScale read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "abstract",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "HypolocrianScale methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from DiatonicScale:",
        "type": "NarrativeText"
    },
    {
        "text": "getDominant() getLeadingTone() getParallelMajor() getParallelMinor() getRelativeMajor() getRelativeMinor() getTonic()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() derive() deriveAll() deriveByDegree() deriveRanked() findMissing() getChord() getDegreeMaxUnique() getPitches() getScalaData() getScaleDegreeAndAccidentalFromPitch() getScaleDegreeFromPitch() intervalBetweenDegrees() isNext() match() next() nextPitch() pitchFromDegree() pitchesFromScaleDegrees() romanNumeral() show() solfeg() transpose() tune() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "HypolocrianScale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "HypolydianScale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "HypolydianScale",
        "type": "Title"
    },
    {
        "text": "tonic",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A hypolydian scale\n>>> sc = scale.HypolydianScale(pitch.Pitch('f'))\n>>> [str(p) for p in sc.pitches]\n['C4', 'D4', 'E4', 'F4', 'G4', 'A4', 'B4', 'C5']\n>>> sc = scale.HypolydianScale(pitch.Pitch('c'))\n>>> [str(p) for p in sc.pitches]\n['G3', 'A3', 'B3', 'C4', 'D4', 'E4', 'F#4', 'G4']",
        "type": "ListItem"
    },
    {
        "text": "HypolydianScale bases",
        "type": "Title"
    },
    {
        "text": "DiatonicScale",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "HypolydianScale read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "chord isConcrete name pitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "HypolydianScale read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "abstract",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "HypolydianScale methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from DiatonicScale:",
        "type": "NarrativeText"
    },
    {
        "text": "getDominant() getLeadingTone() getParallelMajor() getParallelMinor() getRelativeMajor() getRelativeMinor() getTonic()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() derive() deriveAll() deriveByDegree() deriveRanked() findMissing() getChord() getDegreeMaxUnique() getPitches() getScalaData() getScaleDegreeAndAccidentalFromPitch() getScaleDegreeFromPitch() intervalBetweenDegrees() isNext() match() next() nextPitch() pitchFromDegree() pitchesFromScaleDegrees() romanNumeral() show() solfeg() transpose() tune() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "HypolydianScale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "HypomixolydianScale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "HypomixolydianScale",
        "type": "Title"
    },
    {
        "text": "tonic",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A hypomixolydian scale\n>>> sc = scale.HypomixolydianScale(pitch.Pitch('g'))\n>>> [str(p) for p in sc.pitches]\n['D4', 'E4', 'F4', 'G4', 'A4', 'B4', 'C5', 'D5']\n>>> sc = scale.HypomixolydianScale(pitch.Pitch('c'))\n>>> [str(p) for p in sc.pitches]\n['G3', 'A3', 'B-3', 'C4', 'D4', 'E4', 'F4', 'G4']",
        "type": "ListItem"
    },
    {
        "text": "HypomixolydianScale bases",
        "type": "Title"
    },
    {
        "text": "DiatonicScale",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "HypomixolydianScale read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "chord isConcrete name pitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "HypomixolydianScale read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "abstract",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "HypomixolydianScale methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from DiatonicScale:",
        "type": "NarrativeText"
    },
    {
        "text": "getDominant() getLeadingTone() getParallelMajor() getParallelMinor() getRelativeMajor() getRelativeMinor() getTonic()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() derive() deriveAll() deriveByDegree() deriveRanked() findMissing() getChord() getDegreeMaxUnique() getPitches() getScalaData() getScaleDegreeAndAccidentalFromPitch() getScaleDegreeFromPitch() intervalBetweenDegrees() isNext() match() next() nextPitch() pitchFromDegree() pitchesFromScaleDegrees() romanNumeral() show() solfeg() transpose() tune() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "HypomixolydianScale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "HypophrygianScale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "HypophrygianScale",
        "type": "Title"
    },
    {
        "text": "tonic",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A hypophrygian scale\n>>> sc = scale.HypophrygianScale(pitch.Pitch('e'))\n>>> sc.abstract.octaveDuplicating\nTrue\n>>> [str(p) for p in sc.pitches]\n['B3', 'C4', 'D4', 'E4', 'F4', 'G4', 'A4', 'B4']\n>>> sc.getTonic()\n<music21.pitch.Pitch E4>\n>>> sc.getDominant()\n<music21.pitch.Pitch A4>\n>>> sc.pitchFromDegree(1)  # scale degree 1 is treated as lowest\n<music21.pitch.Pitch B3>",
        "type": "ListItem"
    },
    {
        "text": "HypophrygianScale bases",
        "type": "Title"
    },
    {
        "text": "DiatonicScale",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "HypophrygianScale read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "chord isConcrete name pitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "HypophrygianScale read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "abstract",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "HypophrygianScale methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from DiatonicScale:",
        "type": "NarrativeText"
    },
    {
        "text": "getDominant() getLeadingTone() getParallelMajor() getParallelMinor() getRelativeMajor() getRelativeMinor() getTonic()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() derive() deriveAll() deriveByDegree() deriveRanked() findMissing() getChord() getDegreeMaxUnique() getPitches() getScalaData() getScaleDegreeAndAccidentalFromPitch() getScaleDegreeFromPitch() intervalBetweenDegrees() isNext() match() next() nextPitch() pitchFromDegree() pitchesFromScaleDegrees() romanNumeral() show() solfeg() transpose() tune() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "HypophrygianScale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "LocrianScale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "LocrianScale",
        "type": "Title"
    },
    {
        "text": "tonic",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A so-called \u009clocrian\u009d scale\n>>> sc = scale.LocrianScale(pitch.Pitch('b'))\n>>> [str(p) for p in sc.pitches]\n['B4', 'C5', 'D5', 'E5', 'F5', 'G5', 'A5', 'B5']\n\n\n>>> sc = scale.LocrianScale(pitch.Pitch('c'))\n>>> [str(p) for p in sc.pitches]\n['C4', 'D-4', 'E-4', 'F4', 'G-4', 'A-4', 'B-4', 'C5']",
        "type": "ListItem"
    },
    {
        "text": "LocrianScale bases",
        "type": "Title"
    },
    {
        "text": "DiatonicScale",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "LocrianScale read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "chord isConcrete name pitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "LocrianScale read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "abstract",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "LocrianScale methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from DiatonicScale:",
        "type": "NarrativeText"
    },
    {
        "text": "getDominant() getLeadingTone() getParallelMajor() getParallelMinor() getRelativeMajor() getRelativeMinor() getTonic()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() derive() deriveAll() deriveByDegree() deriveRanked() findMissing() getChord() getDegreeMaxUnique() getPitches() getScalaData() getScaleDegreeAndAccidentalFromPitch() getScaleDegreeFromPitch() intervalBetweenDegrees() isNext() match() next() nextPitch() pitchFromDegree() pitchesFromScaleDegrees() romanNumeral() show() solfeg() transpose() tune() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "LocrianScale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "LydianScale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "LydianScale",
        "type": "Title"
    },
    {
        "text": "tonic",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A Lydian scale (that is, the F-F white-key scale; does not have the\nprobability of B- emerging as in a historical Lydian collection).\n>>> sc = scale.LydianScale(pitch.Pitch('f'))\n>>> [str(p) for p in sc.pitches]\n['F4', 'G4', 'A4', 'B4', 'C5', 'D5', 'E5', 'F5']\n\n\n>>> sc = scale.LydianScale(pitch.Pitch('c'))\n>>> [str(p) for p in sc.pitches]\n['C4', 'D4', 'E4', 'F#4', 'G4', 'A4', 'B4', 'C5']",
        "type": "ListItem"
    },
    {
        "text": "LydianScale bases",
        "type": "Title"
    },
    {
        "text": "DiatonicScale",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "LydianScale read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "chord isConcrete name pitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "LydianScale read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "abstract",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "LydianScale methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from DiatonicScale:",
        "type": "NarrativeText"
    },
    {
        "text": "getDominant() getLeadingTone() getParallelMajor() getParallelMinor() getRelativeMajor() getRelativeMinor() getTonic()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() derive() deriveAll() deriveByDegree() deriveRanked() findMissing() getChord() getDegreeMaxUnique() getPitches() getScalaData() getScaleDegreeAndAccidentalFromPitch() getScaleDegreeFromPitch() intervalBetweenDegrees() isNext() match() next() nextPitch() pitchFromDegree() pitchesFromScaleDegrees() romanNumeral() show() solfeg() transpose() tune() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "LydianScale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "MajorScale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "MajorScale",
        "type": "Title"
    },
    {
        "text": "tonic",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A Major Scale\n>>> sc = scale.MajorScale(pitch.Pitch('d'))\n>>> sc.pitchFromDegree(7).name\n'C#'",
        "type": "ListItem"
    },
    {
        "text": "MajorScale bases",
        "type": "Title"
    },
    {
        "text": "DiatonicScale",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "MajorScale read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "chord isConcrete name pitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "MajorScale read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "abstract",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "MajorScale methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from DiatonicScale:",
        "type": "NarrativeText"
    },
    {
        "text": "getDominant() getLeadingTone() getParallelMajor() getParallelMinor() getRelativeMajor() getRelativeMinor() getTonic()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() derive() deriveAll() deriveByDegree() deriveRanked() findMissing() getChord() getDegreeMaxUnique() getPitches() getScalaData() getScaleDegreeAndAccidentalFromPitch() getScaleDegreeFromPitch() intervalBetweenDegrees() isNext() match() next() nextPitch() pitchFromDegree() pitchesFromScaleDegrees() romanNumeral() show() solfeg() transpose() tune() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "MajorScale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "MelodicMinorScale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "MelodicMinorScale",
        "type": "Title"
    },
    {
        "text": "tonic",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A melodic minor scale, which is not the same ascending or descending\n>>> sc = scale.MelodicMinorScale('e4')",
        "type": "ListItem"
    },
    {
        "text": "MelodicMinorScale bases",
        "type": "Title"
    },
    {
        "text": "DiatonicScale",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "MelodicMinorScale read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "chord isConcrete name pitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "MelodicMinorScale read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "abstract",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "MelodicMinorScale methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from DiatonicScale:",
        "type": "NarrativeText"
    },
    {
        "text": "getDominant() getLeadingTone() getParallelMajor() getParallelMinor() getRelativeMajor() getRelativeMinor() getTonic()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() derive() deriveAll() deriveByDegree() deriveRanked() findMissing() getChord() getDegreeMaxUnique() getPitches() getScalaData() getScaleDegreeAndAccidentalFromPitch() getScaleDegreeFromPitch() intervalBetweenDegrees() isNext() match() next() nextPitch() pitchFromDegree() pitchesFromScaleDegrees() romanNumeral() show() solfeg() transpose() tune() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "MelodicMinorScale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "MinorScale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "MinorScale",
        "type": "Title"
    },
    {
        "text": "tonic",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A natural minor scale, or the Aeolian mode.\n>>> sc = scale.MinorScale(pitch.Pitch('g'))\n>>> [str(p) for p in sc.pitches]\n['G4', 'A4', 'B-4', 'C5', 'D5', 'E-5', 'F5', 'G5']",
        "type": "ListItem"
    },
    {
        "text": "MinorScale bases",
        "type": "Title"
    },
    {
        "text": "DiatonicScale",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "MinorScale read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "chord isConcrete name pitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "MinorScale read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "abstract",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "MinorScale methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from DiatonicScale:",
        "type": "NarrativeText"
    },
    {
        "text": "getDominant() getLeadingTone() getParallelMajor() getParallelMinor() getRelativeMajor() getRelativeMinor() getTonic()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() derive() deriveAll() deriveByDegree() deriveRanked() findMissing() getChord() getDegreeMaxUnique() getPitches() getScalaData() getScaleDegreeAndAccidentalFromPitch() getScaleDegreeFromPitch() intervalBetweenDegrees() isNext() match() next() nextPitch() pitchFromDegree() pitchesFromScaleDegrees() romanNumeral() show() solfeg() transpose() tune() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "MinorScale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "MixolydianScale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "MixolydianScale",
        "type": "Title"
    },
    {
        "text": "tonic",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A mixolydian scale\n>>> sc = scale.MixolydianScale(pitch.Pitch('g'))\n>>> [str(p) for p in sc.pitches]\n['G4', 'A4', 'B4', 'C5', 'D5', 'E5', 'F5', 'G5']\n\n\n>>> sc = scale.MixolydianScale(pitch.Pitch('c'))\n>>> [str(p) for p in sc.pitches]\n['C4', 'D4', 'E4', 'F4', 'G4', 'A4', 'B-4', 'C5']",
        "type": "ListItem"
    },
    {
        "text": "MixolydianScale bases",
        "type": "Title"
    },
    {
        "text": "DiatonicScale",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "MixolydianScale read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "chord isConcrete name pitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "MixolydianScale read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "abstract",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "MixolydianScale methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from DiatonicScale:",
        "type": "NarrativeText"
    },
    {
        "text": "getDominant() getLeadingTone() getParallelMajor() getParallelMinor() getRelativeMajor() getRelativeMinor() getTonic()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() derive() deriveAll() deriveByDegree() deriveRanked() findMissing() getChord() getDegreeMaxUnique() getPitches() getScalaData() getScaleDegreeAndAccidentalFromPitch() getScaleDegreeFromPitch() intervalBetweenDegrees() isNext() match() next() nextPitch() pitchFromDegree() pitchesFromScaleDegrees() romanNumeral() show() solfeg() transpose() tune() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "MixolydianScale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "OctatonicScale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "OctatonicScale",
        "type": "Title"
    },
    {
        "text": "tonic",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "mode",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A concrete Octatonic scale in one of two modes",
        "type": "ListItem"
    },
    {
        "text": "OctatonicScale bases",
        "type": "Title"
    },
    {
        "text": "ConcreteScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "OctatonicScale read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "chord isConcrete name pitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "OctatonicScale read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "abstract",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "OctatonicScale methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() derive() deriveAll() deriveByDegree() deriveRanked() findMissing() getChord() getDegreeMaxUnique() getPitches() getScalaData() getScaleDegreeAndAccidentalFromPitch() getScaleDegreeFromPitch() getTonic() intervalBetweenDegrees() isNext() match() next() nextPitch() pitchFromDegree() pitchesFromScaleDegrees() romanNumeral() show() solfeg() transpose() tune() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "OctatonicScale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "OctaveRepeatingScale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "OctaveRepeatingScale",
        "type": "Title"
    },
    {
        "text": "tonic",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "intervalList",
        "type": "Title"
    },
    {
        "text": "list | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A concrete cyclical scale, based on a cycle of intervals.\n>>> sc = scale.OctaveRepeatingScale('c4', ['m3', 'M3'])\n>>> sc.pitches\n[<music21.pitch.Pitch C4>, <music21.pitch.Pitch E-4>,\n <music21.pitch.Pitch G4>, <music21.pitch.Pitch C5>]\n>>> [str(p) for p in sc.getPitches('g2', 'g6')]\n['G2', 'C3', 'E-3', 'G3', 'C4', 'E-4', 'G4', 'C5', 'E-5', 'G5', 'C6', 'E-6', 'G6']\n>>> sc.getScaleDegreeFromPitch('c4')\n1\n>>> sc.getScaleDegreeFromPitch('e-')\n2\n\n\nNo intervalList defaults to a single minor second:\n>>> sc2 = scale.OctaveRepeatingScale()\n>>> sc2.pitches\n[<music21.pitch.Pitch C4>, <music21.pitch.Pitch D-4>, <music21.pitch.Pitch C5>]",
        "type": "ListItem"
    },
    {
        "text": "OctaveRepeatingScale bases",
        "type": "Title"
    },
    {
        "text": "ConcreteScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "OctaveRepeatingScale read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "chord isConcrete name pitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "OctaveRepeatingScale read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "abstract",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "OctaveRepeatingScale methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() derive() deriveAll() deriveByDegree() deriveRanked() findMissing() getChord() getDegreeMaxUnique() getPitches() getScalaData() getScaleDegreeAndAccidentalFromPitch() getScaleDegreeFromPitch() getTonic() intervalBetweenDegrees() isNext() match() next() nextPitch() pitchFromDegree() pitchesFromScaleDegrees() romanNumeral() show() solfeg() transpose() tune() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "OctaveRepeatingScale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "PhrygianScale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "PhrygianScale",
        "type": "Title"
    },
    {
        "text": "tonic",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A Phrygian scale (E-E white key)\n>>> sc = scale.PhrygianScale(pitch.Pitch('e'))\n>>> [str(p) for p in sc.pitches]\n['E4', 'F4', 'G4', 'A4', 'B4', 'C5', 'D5', 'E5']",
        "type": "ListItem"
    },
    {
        "text": "PhrygianScale bases",
        "type": "Title"
    },
    {
        "text": "DiatonicScale",
        "type": "ListItem"
    },
    {
        "text": "ConcreteScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "PhrygianScale read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "chord isConcrete name pitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "PhrygianScale read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "abstract",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "PhrygianScale methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from DiatonicScale:",
        "type": "NarrativeText"
    },
    {
        "text": "getDominant() getLeadingTone() getParallelMajor() getParallelMinor() getRelativeMajor() getRelativeMinor() getTonic()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() derive() deriveAll() deriveByDegree() deriveRanked() findMissing() getChord() getDegreeMaxUnique() getPitches() getScalaData() getScaleDegreeAndAccidentalFromPitch() getScaleDegreeFromPitch() intervalBetweenDegrees() isNext() match() next() nextPitch() pitchFromDegree() pitchesFromScaleDegrees() romanNumeral() show() solfeg() transpose() tune() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "PhrygianScale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "RagAsawari\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "RagAsawari",
        "type": "Title"
    },
    {
        "text": "tonic",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A concrete pseudo-raga scale.\n>>> sc = scale.RagAsawari('c2')\n>>> [str(p) for p in sc.pitches]\n['C2', 'D2', 'F2', 'G2', 'A-2', 'C3']\n>>> [str(p) for p in sc.getPitches(direction=scale.Direction.DESCENDING)]\n['C3', 'B-2', 'A-2', 'G2', 'F2', 'E-2', 'D2', 'C2']",
        "type": "ListItem"
    },
    {
        "text": "RagAsawari bases",
        "type": "Title"
    },
    {
        "text": "ConcreteScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "RagAsawari read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "chord isConcrete name pitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "RagAsawari read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "abstract",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "RagAsawari methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() derive() deriveAll() deriveByDegree() deriveRanked() findMissing() getChord() getDegreeMaxUnique() getPitches() getScalaData() getScaleDegreeAndAccidentalFromPitch() getScaleDegreeFromPitch() getTonic() intervalBetweenDegrees() isNext() match() next() nextPitch() pitchFromDegree() pitchesFromScaleDegrees() romanNumeral() show() solfeg() transpose() tune() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "RagAsawari instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "RagMarwa\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "RagMarwa",
        "type": "Title"
    },
    {
        "text": "tonic",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A concrete pseudo-raga scale.\n>>> sc = scale.RagMarwa('c2')\n\n\nthis gets a pitch beyond the terminus b/c of descending form max\n>>> [str(p) for p in sc.pitches]\n['C2', 'D-2', 'E2', 'F#2', 'A2', 'B2', 'A2', 'C3', 'D-3']",
        "type": "ListItem"
    },
    {
        "text": "RagMarwa bases",
        "type": "Title"
    },
    {
        "text": "ConcreteScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "RagMarwa read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "chord isConcrete name pitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "RagMarwa read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "abstract",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "RagMarwa methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() derive() deriveAll() deriveByDegree() deriveRanked() findMissing() getChord() getDegreeMaxUnique() getPitches() getScalaData() getScaleDegreeAndAccidentalFromPitch() getScaleDegreeFromPitch() getTonic() intervalBetweenDegrees() isNext() match() next() nextPitch() pitchFromDegree() pitchesFromScaleDegrees() romanNumeral() show() solfeg() transpose() tune() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "RagMarwa instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "ScalaScale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "ScalaScale",
        "type": "Title"
    },
    {
        "text": "tonic",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "scalaString",
        "type": "NarrativeText"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A scale created from a Scala scale .scl file. Any file\nin the Scala archive can be given by name. Additionally, a file\npath to a Scala .scl file, or a raw string representation, can be used.\n>>> sc = scale.ScalaScale('g4', 'mbira banda')\n>>> [str(p) for p in sc.pitches]\n['G4', 'A4(-15c)', 'B4(-11c)', 'C#5(-7c)', 'D~5(+6c)', 'E5(+14c)', 'F~5(+1c)', 'G#5(+2c)']\n\n\nIf only a single string is given, and it's too long to be a tonic,\nor it ends in .scl, assume it's the name of a scala scale and\nset the tonic to C4\n>>> sc = scale.ScalaScale('pelog_9')\n>>> [str(p) for p in sc.pitches]\n['C4', 'C#~4(-17c)', 'D~4(+17c)', 'F~4(-17c)',\n 'F#~4(+17c)', 'G#4(-0c)', 'A~4(-17c)', 'C5(-0c)']\n\n\nIf no scale with that name can be found then it raises an exception:\n>>> sc = scale.ScalaScale('badFileName.scl')\nTraceback (most recent call last):\nmusic21.scale.ScaleException: Could not find a file named badFileName.scl in the scala database",
        "type": "ListItem"
    },
    {
        "text": "ScalaScale bases",
        "type": "Title"
    },
    {
        "text": "ConcreteScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "ScalaScale read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "chord isConcrete name pitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "ScalaScale read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "abstract",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "ScalaScale methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() derive() deriveAll() deriveByDegree() deriveRanked() findMissing() getChord() getDegreeMaxUnique() getPitches() getScalaData() getScaleDegreeAndAccidentalFromPitch() getScaleDegreeFromPitch() getTonic() intervalBetweenDegrees() isNext() match() next() nextPitch() pitchFromDegree() pitchesFromScaleDegrees() romanNumeral() show() solfeg() transpose() tune() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "ScalaScale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "Scale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "Scale",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Generic base class for all scales, both abstract and concrete.\n>>> s = scale.Scale()\n>>> s.type\n'Scale'\n>>> s.name  # default same as type.\n'Scale'\n>>> s.isConcrete\nFalse\n\n\nNot a useful class on its own.  See its subclasses.",
        "type": "ListItem"
    },
    {
        "text": "Scale bases",
        "type": "Title"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "Scale read-only properties",
        "type": "Title"
    },
    {
        "text": "Scale.",
        "type": "Title"
    },
    {
        "text": "isConcrete",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "To be concrete, a Scale must have a defined tonic.\nAn abstract Scale is not Concrete, nor is a Concrete scale\nwithout a defined tonic.  Thus, is always false.",
        "type": "ListItem"
    },
    {
        "text": "Scale.",
        "type": "Title"
    },
    {
        "text": "name",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return or construct the name of this scale",
        "type": "ListItem"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "Scale read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "Scale methods",
        "type": "Title"
    },
    {
        "text": "static",
        "type": "Title"
    },
    {
        "text": "Scale.",
        "type": "Title"
    },
    {
        "text": "extractPitchList",
        "type": "Title"
    },
    {
        "text": "other",
        "type": "Title"
    },
    {
        "text": "comparisonAttribute",
        "type": "Title"
    },
    {
        "text": "'nameWithOctave'",
        "type": "Title"
    },
    {
        "text": "removeDuplicates",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Utility function and staticmethod\nGiven a data format as \u009cother\u009d (a ConcreteScale, Chord, Stream, List of Pitches,\nor single Pitch),\nextract all unique Pitches using comparisonAttribute to test for them.\n>>> pStrList = ['A4', 'D4', 'E4', 'F-4', 'D4', 'D5', 'A', 'D#4']\n>>> pList = [pitch.Pitch(p) for p in pStrList]\n>>> nList = [note.Note(p) for p in pStrList]\n>>> s = stream.Stream()\n>>> for n in nList:\n...     s.append(n)\n\n\nHere we only remove the second \u0098D4' because the default comparison is nameWithOctave\n>>> [str(p) for p in scale.Scale.extractPitchList(pList)]\n['A4', 'D4', 'E4', 'F-4', 'D5', 'A4', 'D#4']\n\n\nNote that octaveless notes like the \u0098A' get a default octave.  In general,\nit is better to work with octave-possessing pitches.\nNow we remove the F-4, D5, and A also because we are working with\ncomparisonAttribute=pitchClass.\nNote that we're using a Stream as other now\u2026\n>>> [str(p) for p in scale.Scale.extractPitchList(s, comparisonAttribute='pitchClass')]\n['A4', 'D4', 'E4', 'D#4']\n\n\nNow let's get rid of all but one diatonic D\nby using step() as our\ncomparisonAttribute.  Note that we can just give a list of\nstrings as well, and they become Pitch objects. Oh, we will also\nshow that extractPitchList works on any scale:\n>>> sc = scale.Scale()\n>>> [str(p) for p in sc.extractPitchList(pStrList, comparisonAttribute='step')]\n['A4', 'D4', 'E4', 'F-4']",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "Scale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "SieveScale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "SieveScale",
        "type": "Title"
    },
    {
        "text": "tonic",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "sieveString",
        "type": "NarrativeText"
    },
    {
        "text": "'2@0'",
        "type": "UncategorizedText"
    },
    {
        "text": "eld",
        "type": "Title"
    },
    {
        "text": "int | float",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A scale created from a Xenakis sieve logical string, based on the\nSieve object definition. The complete period of the\nsieve is realized as intervals and used to create a scale.\n>>> sc = scale.SieveScale('c4', '3@0')\n>>> sc.pitches\n[<music21.pitch.Pitch C4>, <music21.pitch.Pitch E-4>]\n>>> sc = scale.SieveScale('d4', '3@0')\n>>> sc.pitches\n[<music21.pitch.Pitch D4>, <music21.pitch.Pitch F4>]\n>>> sc = scale.SieveScale('c2', '(-3@2 & 4) | (-3@1 & 4@1) | (3@2 & 4@2) | (-3 & 4@3)')\n>>> [str(p) for p in sc.pitches]\n['C2', 'D2', 'E2', 'F2', 'G2', 'A2', 'B2', 'C3']",
        "type": "ListItem"
    },
    {
        "text": "SieveScale bases",
        "type": "Title"
    },
    {
        "text": "ConcreteScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "SieveScale read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "chord isConcrete name pitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "SieveScale read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "abstract",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "SieveScale methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() derive() deriveAll() deriveByDegree() deriveRanked() findMissing() getChord() getDegreeMaxUnique() getPitches() getScalaData() getScaleDegreeAndAccidentalFromPitch() getScaleDegreeFromPitch() getTonic() intervalBetweenDegrees() isNext() match() next() nextPitch() pitchFromDegree() pitchesFromScaleDegrees() romanNumeral() show() solfeg() transpose() tune() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "SieveScale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "WeightedHexatonicBlues\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "WeightedHexatonicBlues",
        "type": "Title"
    },
    {
        "text": "tonic",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A concrete scale based on a dynamic mixture of a minor pentatonic\nand the hexatonic blues scale.",
        "type": "ListItem"
    },
    {
        "text": "WeightedHexatonicBlues bases",
        "type": "Title"
    },
    {
        "text": "ConcreteScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "WeightedHexatonicBlues read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "chord isConcrete name pitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "WeightedHexatonicBlues read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "abstract",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "WeightedHexatonicBlues methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() derive() deriveAll() deriveByDegree() deriveRanked() findMissing() getChord() getDegreeMaxUnique() getPitches() getScalaData() getScaleDegreeAndAccidentalFromPitch() getScaleDegreeFromPitch() getTonic() intervalBetweenDegrees() isNext() match() next() nextPitch() pitchFromDegree() pitchesFromScaleDegrees() romanNumeral() show() solfeg() transpose() tune() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "WeightedHexatonicBlues instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "WholeToneScale\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.scale.",
        "type": "Title"
    },
    {
        "text": "WholeToneScale",
        "type": "Title"
    },
    {
        "text": "tonic",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A concrete whole-tone scale.\n>>> sc = scale.WholeToneScale('g2')\n>>> [str(p) for p in sc.pitches]\n['G2', 'A2', 'B2', 'C#3', 'D#3', 'E#3', 'G3']\n>>> [str(p) for p in sc.getPitches('g2', 'g5')]\n['G2', 'A2', 'B2', 'C#3', 'D#3', 'E#3', 'G3', 'A3', 'B3', 'C#4',\n 'D#4', 'E#4', 'G4', 'A4', 'B4', 'C#5', 'D#5', 'E#5', 'G5']\n>>> sc.abstract.getDegreeMaxUnique()\n6\n>>> sc.pitchFromDegree(1)\n<music21.pitch.Pitch G2>\n>>> sc.pitchFromDegree(2)\n<music21.pitch.Pitch A2>\n>>> sc.pitchFromDegree(6)\n<music21.pitch.Pitch E#3>\n>>> sc.getScaleDegreeFromPitch('g2', comparisonAttribute='pitchClass')\n1\n>>> sc.getScaleDegreeFromPitch('F6', comparisonAttribute='pitchClass')\n6",
        "type": "ListItem"
    },
    {
        "text": "WholeToneScale bases",
        "type": "Title"
    },
    {
        "text": "ConcreteScale",
        "type": "ListItem"
    },
    {
        "text": "Scale",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "WholeToneScale read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "chord isConcrete name pitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "WholeToneScale read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "abstract",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "WholeToneScale methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from ConcreteScale:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() derive() deriveAll() deriveByDegree() deriveRanked() findMissing() getChord() getDegreeMaxUnique() getPitches() getScalaData() getScaleDegreeAndAccidentalFromPitch() getScaleDegreeFromPitch() getTonic() intervalBetweenDegrees() isNext() match() next() nextPitch() pitchFromDegree() pitchesFromScaleDegrees() romanNumeral() show() solfeg() transpose() tune() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Scale:",
        "type": "NarrativeText"
    },
    {
        "text": "extractPitchList()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() previous() purgeLocations() purgeOrphans() setOffsetBySite() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "WholeToneScale instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.scale",
        "type": "ListItem"
    },
    {
        "text": "\u00a9 Copyright 2006-2023 Michael Scott Asato Cuthbert.\n      Last updated on Jun 12, 2023.",
        "type": "NarrativeText"
    }
]