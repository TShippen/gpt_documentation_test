[
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.features.jSymbolic",
        "type": "ListItem"
    },
    {
        "text": "Previous topic",
        "type": "Title"
    },
    {
        "text": "music21.features.base",
        "type": "Title"
    },
    {
        "text": "Next topic",
        "type": "Title"
    },
    {
        "text": "music21.features.native",
        "type": "Title"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic\nAcousticGuitarFractionFeature\nAcousticGuitarFractionFeature\n\n\nAmountOfArpeggiationFeature\nAmountOfArpeggiationFeature\nAmountOfArpeggiationFeature.process()\n\n\n\n\nAverageMelodicIntervalFeature\nAverageMelodicIntervalFeature\nAverageMelodicIntervalFeature.process()\n\n\n\n\nAverageNoteDurationFeature\nAverageNoteDurationFeature\nAverageNoteDurationFeature.process()\n\n\n\n\nAverageNoteToNoteDynamicsChangeFeature\nAverageNoteToNoteDynamicsChangeFeature\n\n\nAverageNumberOfIndependentVoicesFeature\nAverageNumberOfIndependentVoicesFeature\nAverageNumberOfIndependentVoicesFeature.process()\n\n\n\n\nAverageRangeOfGlissandosFeature\nAverageRangeOfGlissandosFeature\nAverageRangeOfGlissandosFeature.process()\n\n\n\n\nAverageTimeBetweenAttacksFeature\nAverageTimeBetweenAttacksFeature\nAverageTimeBetweenAttacksFeature.process()\n\n\n\n\nAverageTimeBetweenAttacksForEachVoiceFeature\nAverageTimeBetweenAttacksForEachVoiceFeature\nAverageTimeBetweenAttacksForEachVoiceFeature.process()\n\n\n\n\nAverageVariabilityOfTimeBetweenAttacksForEachVoiceFeature\nAverageVariabilityOfTimeBetweenAttacksForEachVoiceFeature\nAverageVariabilityOfTimeBetweenAttacksForEachVoiceFeature.process()\n\n\n\n\nBasicPitchHistogramFeature\nBasicPitchHistogramFeature\nBasicPitchHistogramFeature.process()\n\n\n\n\nBeatHistogramFeature\nBeatHistogramFeature\nBeatHistogramFeature.process()\n\n\n\n\nBrassFractionFeature\nBrassFractionFeature\n\n\nChangesOfMeterFeature\nChangesOfMeterFeature\nChangesOfMeterFeature.process()\n\n\n\n\nChromaticMotionFeature\nChromaticMotionFeature\nChromaticMotionFeature.process()\n\n\n\n\nCombinedStrengthOfTwoStrongestRhythmicPulsesFeature\nCombinedStrengthOfTwoStrongestRhythmicPulsesFeature\nCombinedStrengthOfTwoStrongestRhythmicPulsesFeature.process()\n\n\n\n\nCompoundOrSimpleMeterFeature\nCompoundOrSimpleMeterFeature\nCompoundOrSimpleMeterFeature.process()\n\n\n\n\nDirectionOfMotionFeature\nDirectionOfMotionFeature\nDirectionOfMotionFeature.process()\n\n\n\n\nDistanceBetweenMostCommonMelodicIntervalsFeature\nDistanceBetweenMostCommonMelodicIntervalsFeature\nDistanceBetweenMostCommonMelodicIntervalsFeature.process()\n\n\n\n\nDominantSpreadFeature\nDominantSpreadFeature\nDominantSpreadFeature.process()\n\n\n\n\nDurationFeature\nDurationFeature\nDurationFeature.process()\n\n\n\n\nDurationOfMelodicArcsFeature\nDurationOfMelodicArcsFeature\nDurationOfMelodicArcsFeature.process()\n\n\n\n\nElectricGuitarFractionFeature\nElectricGuitarFractionFeature\n\n\nElectricInstrumentFractionFeature\nElectricInstrumentFractionFeature\n\n\nFifthsPitchHistogramFeature\nFifthsPitchHistogramFeature\nFifthsPitchHistogramFeature.process()\n\n\n\n\nGlissandoPrevalenceFeature\nGlissandoPrevalenceFeature\nGlissandoPrevalenceFeature.process()\n\n\n\n\nHarmonicityOfTwoStrongestRhythmicPulsesFeature\nHarmonicityOfTwoStrongestRhythmicPulsesFeature\nHarmonicityOfTwoStrongestRhythmicPulsesFeature.process()\n\n\n\n\nImportanceOfBassRegisterFeature\nImportanceOfBassRegisterFeature\nImportanceOfBassRegisterFeature.process()\n\n\n\n\nImportanceOfHighRegisterFeature\nImportanceOfHighRegisterFeature\nImportanceOfHighRegisterFeature.process()\n\n\n\n\nImportanceOfLoudestVoiceFeature\nImportanceOfLoudestVoiceFeature\n\n\nImportanceOfMiddleRegisterFeature\nImportanceOfMiddleRegisterFeature\nImportanceOfMiddleRegisterFeature.process()\n\n\n\n\nInitialTempoFeature\nInitialTempoFeature\nInitialTempoFeature.process()\n\n\n\n\nInitialTimeSignatureFeature\nInitialTimeSignatureFeature\nInitialTimeSignatureFeature.process()\n\n\n\n\nInstrumentFractionFeature\nInstrumentFractionFeature\nInstrumentFractionFeature.process()\n\n\n\n\nIntervalBetweenStrongestPitchClassesFeature\nIntervalBetweenStrongestPitchClassesFeature\nIntervalBetweenStrongestPitchClassesFeature.process()\n\n\n\n\nIntervalBetweenStrongestPitchesFeature\nIntervalBetweenStrongestPitchesFeature\nIntervalBetweenStrongestPitchesFeature.process()\n\n\n\n\nMaximumNoteDurationFeature\nMaximumNoteDurationFeature\nMaximumNoteDurationFeature.process()\n\n\n\n\nMaximumNumberOfIndependentVoicesFeature\nMaximumNumberOfIndependentVoicesFeature\nMaximumNumberOfIndependentVoicesFeature.process()\n\n\n\n\nMelodicFifthsFeature\nMelodicFifthsFeature\nMelodicFifthsFeature.process()\n\n\n\n\nMelodicIntervalHistogramFeature\nMelodicIntervalHistogramFeature\nMelodicIntervalHistogramFeature.process()\n\n\n\n\nMelodicIntervalsInLowestLineFeature\nMelodicIntervalsInLowestLineFeature\n\n\nMelodicOctavesFeature\nMelodicOctavesFeature\nMelodicOctavesFeature.process()\n\n\n\n\nMelodicThirdsFeature\nMelodicThirdsFeature\nMelodicThirdsFeature.process()\n\n\n\n\nMelodicTritonesFeature\nMelodicTritonesFeature\nMelodicTritonesFeature.process()\n\n\n\n\nMinimumNoteDurationFeature\nMinimumNoteDurationFeature\nMinimumNoteDurationFeature.process()\n\n\n\n\nMostCommonMelodicIntervalFeature\nMostCommonMelodicIntervalFeature\nMostCommonMelodicIntervalFeature.process()\n\n\n\n\nMostCommonMelodicIntervalPrevalenceFeature\nMostCommonMelodicIntervalPrevalenceFeature\nMostCommonMelodicIntervalPrevalenceFeature.process()\n\n\n\n\nMostCommonPitchClassFeature\nMostCommonPitchClassFeature\nMostCommonPitchClassFeature.process()\n\n\n\n\nMostCommonPitchClassPrevalenceFeature\nMostCommonPitchClassPrevalenceFeature\nMostCommonPitchClassPrevalenceFeature.process()\n\n\n\n\nMostCommonPitchFeature\nMostCommonPitchFeature\nMostCommonPitchFeature.process()\n\n\n\n\nMostCommonPitchPrevalenceFeature\nMostCommonPitchPrevalenceFeature\nMostCommonPitchPrevalenceFeature.process()\n\n\n\n\nNoteDensityFeature\nNoteDensityFeature\nNoteDensityFeature.process()\n\n\n\n\nNotePrevalenceOfPitchedInstrumentsFeature\nNotePrevalenceOfPitchedInstrumentsFeature\nNotePrevalenceOfPitchedInstrumentsFeature.process()\n\n\n\n\nNotePrevalenceOfUnpitchedInstrumentsFeature\nNotePrevalenceOfUnpitchedInstrumentsFeature\n\n\nNumberOfCommonMelodicIntervalsFeature\nNumberOfCommonMelodicIntervalsFeature\nNumberOfCommonMelodicIntervalsFeature.process()\n\n\n\n\nNumberOfCommonPitchesFeature\nNumberOfCommonPitchesFeature\nNumberOfCommonPitchesFeature.process()\n\n\n\n\nNumberOfModeratePulsesFeature\nNumberOfModeratePulsesFeature\nNumberOfModeratePulsesFeature.process()\n\n\n\n\nNumberOfPitchedInstrumentsFeature\nNumberOfPitchedInstrumentsFeature\nNumberOfPitchedInstrumentsFeature.process()\n\n\n\n\nNumberOfRelativelyStrongPulsesFeature\nNumberOfRelativelyStrongPulsesFeature\n\n\nNumberOfStrongPulsesFeature\nNumberOfStrongPulsesFeature\nNumberOfStrongPulsesFeature.process()\n\n\n\n\nNumberOfUnpitchedInstrumentsFeature\nNumberOfUnpitchedInstrumentsFeature\n\n\nOrchestralStringsFractionFeature\nOrchestralStringsFractionFeature\n\n\nOverallDynamicRangeFeature\nOverallDynamicRangeFeature\n\n\nPercussionPrevalenceFeature\nPercussionPrevalenceFeature\n\n\nPitchClassDistributionFeature\nPitchClassDistributionFeature\nPitchClassDistributionFeature.process()\n\n\n\n\nPitchClassVarietyFeature\nPitchClassVarietyFeature\nPitchClassVarietyFeature.process()\n\n\n\n\nPitchVarietyFeature\nPitchVarietyFeature\nPitchVarietyFeature.process()\n\n\n\n\nPitchedInstrumentsPresentFeature\nPitchedInstrumentsPresentFeature\nPitchedInstrumentsPresentFeature.process()\n\n\n\n\nPolyrhythmsFeature\nPolyrhythmsFeature\nPolyrhythmsFeature.process()\n\n\n\n\nPrevalenceOfMicrotonesFeature\nPrevalenceOfMicrotonesFeature\nPrevalenceOfMicrotonesFeature.process()\n\n\n\n\nPrimaryRegisterFeature\nPrimaryRegisterFeature\nPrimaryRegisterFeature.process()\n\n\n\n\nQualityFeature\nQualityFeature\nQualityFeature.process()\n\n\n\n\nQuintupleMeterFeature\nQuintupleMeterFeature\nQuintupleMeterFeature.process()\n\n\n\n\nRangeFeature\nRangeFeature\nRangeFeature.process()\n\n\n\n\nRangeOfHighestLineFeature\nRangeOfHighestLineFeature\n\n\nRelativeNoteDensityOfHighestLineFeature\nRelativeNoteDensityOfHighestLineFeature\n\n\nRelativeRangeOfLoudestVoiceFeature\nRelativeRangeOfLoudestVoiceFeature\n\n\nRelativeStrengthOfMostCommonIntervalsFeature\nRelativeStrengthOfMostCommonIntervalsFeature\nRelativeStrengthOfMostCommonIntervalsFeature.process()\n\n\n\n\nRelativeStrengthOfTopPitchClassesFeature\nRelativeStrengthOfTopPitchClassesFeature\nRelativeStrengthOfTopPitchClassesFeature.process()\n\n\n\n\nRelativeStrengthOfTopPitchesFeature\nRelativeStrengthOfTopPitchesFeature\nRelativeStrengthOfTopPitchesFeature.process()\n\n\n\n\nRepeatedNotesFeature\nRepeatedNotesFeature\nRepeatedNotesFeature.process()\n\n\n\n\nRhythmicLoosenessFeature\nRhythmicLoosenessFeature\nRhythmicLoosenessFeature.process()\n\n\n\n\nRhythmicVariabilityFeature\nRhythmicVariabilityFeature\nRhythmicVariabilityFeature.process()\n\n\n\n\nSaxophoneFractionFeature\nSaxophoneFractionFeature\n\n\nSecondStrongestRhythmicPulseFeature\nSecondStrongestRhythmicPulseFeature\nSecondStrongestRhythmicPulseFeature.process()\n\n\n\n\nSizeOfMelodicArcsFeature\nSizeOfMelodicArcsFeature\nSizeOfMelodicArcsFeature.process()\n\n\n\n\nStaccatoIncidenceFeature\nStaccatoIncidenceFeature\nStaccatoIncidenceFeature.process()\n\n\n\n\nStepwiseMotionFeature\nStepwiseMotionFeature\nStepwiseMotionFeature.process()\n\n\n\n\nStrengthOfSecondStrongestRhythmicPulseFeature\nStrengthOfSecondStrongestRhythmicPulseFeature\nStrengthOfSecondStrongestRhythmicPulseFeature.process()\n\n\n\n\nStrengthOfStrongestRhythmicPulseFeature\nStrengthOfStrongestRhythmicPulseFeature\nStrengthOfStrongestRhythmicPulseFeature.process()\n\n\n\n\nStrengthRatioOfTwoStrongestRhythmicPulsesFeature\nStrengthRatioOfTwoStrongestRhythmicPulsesFeature\nStrengthRatioOfTwoStrongestRhythmicPulsesFeature.process()\n\n\n\n\nStringEnsembleFractionFeature\nStringEnsembleFractionFeature\n\n\nStringKeyboardFractionFeature\nStringKeyboardFractionFeature\n\n\nStrongTonalCentresFeature\nStrongTonalCentresFeature\nStrongTonalCentresFeature.process()\n\n\n\n\nStrongestRhythmicPulseFeature\nStrongestRhythmicPulseFeature\nStrongestRhythmicPulseFeature.process()\n\n\n\n\nTimePrevalenceOfPitchedInstrumentsFeature\nTimePrevalenceOfPitchedInstrumentsFeature\n\n\nTripleMeterFeature\nTripleMeterFeature\nTripleMeterFeature.process()\n\n\n\n\nUnpitchedInstrumentsPresentFeature\nUnpitchedInstrumentsPresentFeature\nUnpitchedInstrumentsPresentFeature.process()\n\n\n\n\nVariabilityOfNoteDurationFeature\nVariabilityOfNoteDurationFeature\nVariabilityOfNoteDurationFeature.process()\n\n\n\n\nVariabilityOfNotePrevalenceOfPitchedInstrumentsFeature\nVariabilityOfNotePrevalenceOfPitchedInstrumentsFeature\nVariabilityOfNotePrevalenceOfPitchedInstrumentsFeature.process()\n\n\n\n\nVariabilityOfNotePrevalenceOfUnpitchedInstrumentsFeature\nVariabilityOfNotePrevalenceOfUnpitchedInstrumentsFeature\n\n\nVariabilityOfNumberOfIndependentVoicesFeature\nVariabilityOfNumberOfIndependentVoicesFeature\nVariabilityOfNumberOfIndependentVoicesFeature.process()\n\n\n\n\nVariabilityOfTimeBetweenAttacksFeature\nVariabilityOfTimeBetweenAttacksFeature\nVariabilityOfTimeBetweenAttacksFeature.process()\n\n\n\n\nVariationOfDynamicsFeature\nVariationOfDynamicsFeature\n\n\nVariationOfDynamicsInEachVoiceFeature\nVariationOfDynamicsInEachVoiceFeature\n\n\nVibratoPrevalenceFeature\nVibratoPrevalenceFeature\nVibratoPrevalenceFeature.process()\n\n\n\n\nViolinFractionFeature\nViolinFractionFeature\n\n\nVoiceEqualityDynamicsFeature\nVoiceEqualityDynamicsFeature\n\n\nVoiceEqualityMelodicLeapsFeature\nVoiceEqualityMelodicLeapsFeature\n\n\nVoiceEqualityNoteDurationFeature\nVoiceEqualityNoteDurationFeature\n\n\nVoiceEqualityNumberOfNotesFeature\nVoiceEqualityNumberOfNotesFeature\n\n\nVoiceEqualityRangeFeature\nVoiceEqualityRangeFeature\n\n\nVoiceSeparationFeature\nVoiceSeparationFeature\n\n\nWoodwindsFractionFeature\nWoodwindsFractionFeature\n\n\nFunctions\ngetCompletionStats()\ngetExtractorByTypeAndNumber()",
        "type": "ListItem"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "About music21",
        "type": "ListItem"
    },
    {
        "text": "User's Guide",
        "type": "ListItem"
    },
    {
        "text": "Module Reference",
        "type": "ListItem"
    },
    {
        "text": "Installation",
        "type": "ListItem"
    },
    {
        "text": "Developer Reference",
        "type": "ListItem"
    },
    {
        "text": "Documentation and tests in progress",
        "type": "ListItem"
    },
    {
        "text": "Quick search",
        "type": "Title"
    },
    {
        "text": "This Page",
        "type": "Title"
    },
    {
        "text": "Show Source",
        "type": "ListItem"
    },
    {
        "text": "music21.features.jSymbolic\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "The features implemented here are based on those found in jSymbolic and\ndefined in Cory McKay's MA Thesis, \u009cAutomatic Genre Classification of MIDI Recordings\u009d",
        "type": "NarrativeText"
    },
    {
        "text": "AcousticGuitarFractionFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "AcousticGuitarFractionFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A feature extractor that extracts the fraction of all Note Ons belonging to\nacoustic guitar patches (General MIDI patches 25 and 26).\n>>> s1 = stream.Stream()\n>>> s1.append(instrument.AcousticGuitar())\n>>> s1.repeatAppend(note.Note(), 3)\n>>> s1.append(instrument.Tuba())\n>>> s1.append(note.Note())\n>>> fe = features.jSymbolic.AcousticGuitarFractionFeature(s1)\n>>> fe.extract().vector\n[0.75]",
        "type": "ListItem"
    },
    {
        "text": "AcousticGuitarFractionFeature bases",
        "type": "Title"
    },
    {
        "text": "InstrumentFractionFeature",
        "type": "ListItem"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "AcousticGuitarFractionFeature methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from InstrumentFractionFeature:",
        "type": "NarrativeText"
    },
    {
        "text": "process()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "AmountOfArpeggiationFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "AmountOfArpeggiationFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Fraction of horizontal intervals that are repeated notes, minor thirds, major thirds,\nperfect fifths, minor sevenths, major sevenths, octaves, minor tenths or major tenths.\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.AmountOfArpeggiationFeature(s)\n>>> f = fe.extract()\n>>> f.name\n'Amount of Arpeggiation'\n>>> f.vector\n[0.333...]",
        "type": "ListItem"
    },
    {
        "text": "AmountOfArpeggiationFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "AmountOfArpeggiationFeature methods",
        "type": "Title"
    },
    {
        "text": "AmountOfArpeggiationFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "AverageMelodicIntervalFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "AverageMelodicIntervalFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Average melodic interval (in semitones).\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.AverageMelodicIntervalFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[2.44...]",
        "type": "ListItem"
    },
    {
        "text": "AverageMelodicIntervalFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "AverageMelodicIntervalFeature methods",
        "type": "Title"
    },
    {
        "text": "AverageMelodicIntervalFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "AverageNoteDurationFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "AverageNoteDurationFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Average duration of notes in seconds.\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.AverageNoteDurationFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[0.552...]\n\n\n>>> s.insert(0, tempo.MetronomeMark(number=240))\n>>> fe = features.jSymbolic.AverageNoteDurationFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[0.220858...]",
        "type": "ListItem"
    },
    {
        "text": "AverageNoteDurationFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "AverageNoteDurationFeature methods",
        "type": "Title"
    },
    {
        "text": "AverageNoteDurationFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "AverageNoteToNoteDynamicsChangeFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "AverageNoteToNoteDynamicsChangeFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not implemented\nAverage change of loudness from one note to the next note in the\nsame channel (in MIDI velocity units).\nTODO: implement",
        "type": "ListItem"
    },
    {
        "text": "AverageNoteToNoteDynamicsChangeFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "AverageNoteToNoteDynamicsChangeFeature methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() process() setData()",
        "type": "Table"
    },
    {
        "text": "AverageNumberOfIndependentVoicesFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "AverageNumberOfIndependentVoicesFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Average number of different channels in which notes have sounded simultaneously.\nRests are not included in this calculation. Here, Parts are treated as voices\n>>> s = corpus.parse('handel/rinaldo/lascia_chio_pianga')\n>>> fe = features.jSymbolic.AverageNumberOfIndependentVoicesFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[1.528...]\n\n\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.AverageNumberOfIndependentVoicesFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[3.90...]",
        "type": "ListItem"
    },
    {
        "text": "AverageNumberOfIndependentVoicesFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "AverageNumberOfIndependentVoicesFeature methods",
        "type": "Title"
    },
    {
        "text": "AverageNumberOfIndependentVoicesFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "AverageRangeOfGlissandosFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "AverageRangeOfGlissandosFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not yet implemented in music21\nAverage range of MIDI Pitch Bends, where \u009crange\u009d is defined\nas the greatest value of the absolute difference between 64 and the\nsecond data byte of all MIDI Pitch Bend messages falling between the\nNote On and Note Off messages of any note",
        "type": "ListItem"
    },
    {
        "text": "AverageRangeOfGlissandosFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "AverageRangeOfGlissandosFeature methods",
        "type": "Title"
    },
    {
        "text": "AverageRangeOfGlissandosFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "AverageTimeBetweenAttacksFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "AverageTimeBetweenAttacksFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Average time in seconds between Note On events (regardless of channel).\n>>> s = corpus.parse('bwv66.6')\n>>> for p in s.parts:\n...     p.insert(0, tempo.MetronomeMark(number=120))\n>>> fe = features.jSymbolic.AverageTimeBetweenAttacksFeature(s)\n>>> f = fe.extract()\n>>> print(f.vector)\n[0.35]",
        "type": "ListItem"
    },
    {
        "text": "AverageTimeBetweenAttacksFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "AverageTimeBetweenAttacksFeature methods",
        "type": "Title"
    },
    {
        "text": "AverageTimeBetweenAttacksFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "AverageTimeBetweenAttacksForEachVoiceFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "AverageTimeBetweenAttacksForEachVoiceFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Average of average times in seconds between Note On events on individual channels\nthat contain at least one note.\n>>> s = corpus.parse('bwv66.6')\n>>> for p in s.parts:\n...     p.insert(0, tempo.MetronomeMark(number=120))\n>>> fe = features.jSymbolic.AverageTimeBetweenAttacksForEachVoiceFeature(s)\n>>> f = fe.extract()\n>>> print(f.vector[0])\n0.442...",
        "type": "ListItem"
    },
    {
        "text": "AverageTimeBetweenAttacksForEachVoiceFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "AverageTimeBetweenAttacksForEachVoiceFeature methods",
        "type": "Title"
    },
    {
        "text": "AverageTimeBetweenAttacksForEachVoiceFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "AverageVariabilityOfTimeBetweenAttacksForEachVoiceFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "AverageVariabilityOfTimeBetweenAttacksForEachVoiceFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Average standard deviation, in seconds, of time between Note On events on individual\nchannels that contain at least one note.\n>>> s = corpus.parse('bwv66.6')\n>>> for p in s.parts:\n...     p.insert(0, tempo.MetronomeMark(number=120))\n>>> fe = features.jSymbolic.AverageVariabilityOfTimeBetweenAttacksForEachVoiceFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[0.177...]",
        "type": "ListItem"
    },
    {
        "text": "AverageVariabilityOfTimeBetweenAttacksForEachVoiceFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "AverageVariabilityOfTimeBetweenAttacksForEachVoiceFeature methods",
        "type": "Title"
    },
    {
        "text": "AverageVariabilityOfTimeBetweenAttacksForEachVoiceFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "BasicPitchHistogramFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "BasicPitchHistogramFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A feature extractor that finds a features array with bins corresponding\nto the values of the basic pitch histogram.\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.BasicPitchHistogramFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n 0.0, 0.0, 0.0, 0.006..., 0.0, 0.0, 0.006..., 0.006..., 0.030...,\n 0.0, 0.036..., 0.012..., 0.0, 0.006..., 0.018..., 0.061..., 0.0,\n 0.042..., 0.073..., 0.012..., 0.092..., 0.0, 0.116..., 0.061...,\n 0.006..., 0.085..., 0.018..., 0.110..., 0.0, 0.042..., 0.055...,\n 0.0, 0.049..., 0.0, 0.042..., 0.0, 0.0, 0.006..., 0.0, 0.0, 0.0,\n 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]",
        "type": "ListItem"
    },
    {
        "text": "BasicPitchHistogramFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "BasicPitchHistogramFeature methods",
        "type": "Title"
    },
    {
        "text": "BasicPitchHistogramFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "BeatHistogramFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "BeatHistogramFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not yet implemented\nA feature extractor that finds a feature array with entries corresponding to the frequency\nvalues of each of the bins of the beat histogram (except the first 40 empty ones).",
        "type": "ListItem"
    },
    {
        "text": "BeatHistogramFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "BeatHistogramFeature methods",
        "type": "Title"
    },
    {
        "text": "BeatHistogramFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "BrassFractionFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "BrassFractionFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A feature extractor that extracts the fraction of all Note Ons\nbelonging to brass patches (General MIDI patches 57 through 68).\nTODO: Conflict in source: only does 57-62?\n>>> s1 = stream.Stream()\n>>> s1.append(instrument.SopranoSaxophone())\n>>> s1.repeatAppend(note.Note(), 6)\n>>> s1.append(instrument.Tuba())\n>>> s1.repeatAppend(note.Note(), 4)\n>>> fe = features.jSymbolic.BrassFractionFeature(s1)\n>>> print(fe.extract().vector[0])\n0.4",
        "type": "ListItem"
    },
    {
        "text": "BrassFractionFeature bases",
        "type": "Title"
    },
    {
        "text": "InstrumentFractionFeature",
        "type": "ListItem"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "BrassFractionFeature methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from InstrumentFractionFeature:",
        "type": "NarrativeText"
    },
    {
        "text": "process()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "ChangesOfMeterFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "ChangesOfMeterFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns 1 if the time signature is changed one or more\ntimes during the recording.\n>>> s1 = stream.Stream()\n>>> s1.append(meter.TimeSignature('3/4'))\n>>> fe = features.jSymbolic.ChangesOfMeterFeature(s1)\n>>> fe.extract().vector\n[0]\n\n\n>>> s2 = stream.Stream()\n>>> s2.append(meter.TimeSignature('3/4'))\n>>> s2.append(meter.TimeSignature('4/4'))\n>>> fe.setData(s2)  # change the data\n>>> fe.extract().vector\n[1]\n\n\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.ChangesOfMeterFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[0]",
        "type": "ListItem"
    },
    {
        "text": "ChangesOfMeterFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "ChangesOfMeterFeature methods",
        "type": "Title"
    },
    {
        "text": "ChangesOfMeterFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "ChromaticMotionFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "ChromaticMotionFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Fraction of melodic intervals corresponding to a semitone.\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.ChromaticMotionFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[0.220...]",
        "type": "ListItem"
    },
    {
        "text": "ChromaticMotionFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "ChromaticMotionFeature methods",
        "type": "Title"
    },
    {
        "text": "ChromaticMotionFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "CombinedStrengthOfTwoStrongestRhythmicPulsesFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "CombinedStrengthOfTwoStrongestRhythmicPulsesFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The sum of the frequencies of the two beat bins of the peaks with the highest frequencies.\n>>> sch = corpus.parse('schoenberg/opus19', 2)\n>>> for p in sch.parts:\n...     p.insert(0, tempo.MetronomeMark('Langsam', 70))\n>>> fe = features.jSymbolic.CombinedStrengthOfTwoStrongestRhythmicPulsesFeature(sch)\n>>> fe.extract().vector[0]\n0.975...",
        "type": "ListItem"
    },
    {
        "text": "CombinedStrengthOfTwoStrongestRhythmicPulsesFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "CombinedStrengthOfTwoStrongestRhythmicPulsesFeature methods",
        "type": "Title"
    },
    {
        "text": "CombinedStrengthOfTwoStrongestRhythmicPulsesFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "CompoundOrSimpleMeterFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "CompoundOrSimpleMeterFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Set to 1 if the initial meter is compound (numerator of time signature\nis greater than or equal to 6 and is evenly divisible by 3) and to 0 if it is simple\n(if the above condition is not fulfilled).\n>>> s1 = stream.Stream()\n>>> s1.append(meter.TimeSignature('3/4'))\n>>> fe = features.jSymbolic.CompoundOrSimpleMeterFeature(s1)\n>>> fe.extract().vector\n[0]\n\n\n>>> s2 = stream.Stream()\n>>> s2.append(meter.TimeSignature('9/8'))\n>>> fe.setData(s2)  # change the data\n>>> fe.extract().vector\n[1]\n\n\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.CompoundOrSimpleMeterFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[0]",
        "type": "ListItem"
    },
    {
        "text": "CompoundOrSimpleMeterFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "CompoundOrSimpleMeterFeature methods",
        "type": "Title"
    },
    {
        "text": "CompoundOrSimpleMeterFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "DirectionOfMotionFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "DirectionOfMotionFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns the fraction of melodic intervals that are rising rather than falling.\nUnisons are omitted.\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.DirectionOfMotionFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[0.470...]",
        "type": "ListItem"
    },
    {
        "text": "DirectionOfMotionFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "DirectionOfMotionFeature methods",
        "type": "Title"
    },
    {
        "text": "DirectionOfMotionFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "DistanceBetweenMostCommonMelodicIntervalsFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "DistanceBetweenMostCommonMelodicIntervalsFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": ">>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.DistanceBetweenMostCommonMelodicIntervalsFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[1]",
        "type": "ListItem"
    },
    {
        "text": "DistanceBetweenMostCommonMelodicIntervalsFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "DistanceBetweenMostCommonMelodicIntervalsFeature methods",
        "type": "Title"
    },
    {
        "text": "DistanceBetweenMostCommonMelodicIntervalsFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "DominantSpreadFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "DominantSpreadFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not implemented\nLargest number of consecutive pitch classes separated by perfect\n5ths that accounted for at least 9% each of the notes.",
        "type": "ListItem"
    },
    {
        "text": "DominantSpreadFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "DominantSpreadFeature methods",
        "type": "Title"
    },
    {
        "text": "DominantSpreadFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "DurationFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "DurationFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A feature extractor that extracts the duration of the piece in seconds.\n>>> s = corpus.parse('bwv66.6')\n>>> for p in s.parts:\n...     p.insert(0, tempo.MetronomeMark(number=120))\n>>> fe = features.jSymbolic.DurationFeature(s)\n>>> f = fe.extract()\n>>> f.vector[0]\n18.0",
        "type": "ListItem"
    },
    {
        "text": "DurationFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "DurationFeature methods",
        "type": "Title"
    },
    {
        "text": "DurationFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "DurationOfMelodicArcsFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "DurationOfMelodicArcsFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Average number of notes that separate melodic peaks and troughs\nin any part. This is calculated as the total number of intervals\n(not counting unisons) divided by the number of times the melody\nchanges direction.\nExample: C D E D C D E C C\nIntervals: [0] 2 2 -2 -2 2 2 -4 0\nChanges direction (equivalent to +/- sign) three times.\nThere are seven non-unison (nonzero) intervals.\nThus, the duration of arcs is 7/3 ~= 2.333\u2026\n>>> s = converter.parse(\"tinyNotation: c' d' e' d' c' d' e'2 c'2 c'2\")\n>>> fe = features.jSymbolic.DurationOfMelodicArcsFeature(s)\n>>> fe.extract().vector\n[2.333...]\n\n\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.DurationOfMelodicArcsFeature(s)\n>>> fe.extract().vector\n[1.74...]",
        "type": "ListItem"
    },
    {
        "text": "DurationOfMelodicArcsFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "DurationOfMelodicArcsFeature methods",
        "type": "Title"
    },
    {
        "text": "DurationOfMelodicArcsFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "ElectricGuitarFractionFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "ElectricGuitarFractionFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": ">>> s1 = stream.Stream()\n>>> s1.append(instrument.ElectricGuitar())\n>>> s1.repeatAppend(note.Note(), 4)\n>>> s1.append(instrument.Tuba())\n>>> s1.repeatAppend(note.Note(), 4)\n>>> fe = features.jSymbolic.ElectricGuitarFractionFeature(s1)\n>>> fe.extract().vector\n[0.5]",
        "type": "ListItem"
    },
    {
        "text": "ElectricGuitarFractionFeature bases",
        "type": "Title"
    },
    {
        "text": "InstrumentFractionFeature",
        "type": "ListItem"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "ElectricGuitarFractionFeature methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from InstrumentFractionFeature:",
        "type": "NarrativeText"
    },
    {
        "text": "process()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "ElectricInstrumentFractionFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "ElectricInstrumentFractionFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Fraction of all Note Ons belonging to electric instrument patches\n(General MIDI patches 5, 6, 17, 19, 27 through 32, 24 through 40).\n>>> s1 = stream.Stream()\n>>> s1.append(instrument.ElectricOrgan())\n>>> s1.repeatAppend(note.Note(), 8)\n>>> s1.append(instrument.Tuba())\n>>> s1.repeatAppend(note.Note(), 2)\n>>> fe = features.jSymbolic.ElectricInstrumentFractionFeature(s1)\n>>> print(fe.extract().vector[0])\n0.8",
        "type": "ListItem"
    },
    {
        "text": "ElectricInstrumentFractionFeature bases",
        "type": "Title"
    },
    {
        "text": "InstrumentFractionFeature",
        "type": "ListItem"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "ElectricInstrumentFractionFeature methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from InstrumentFractionFeature:",
        "type": "NarrativeText"
    },
    {
        "text": "process()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "FifthsPitchHistogramFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "FifthsPitchHistogramFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A feature array with bins corresponding to the values of the 5ths pitch class\nhistogram. Instead of the bins being arranged according to semitones \u2014\n[C, C#, D\u2026] \u2014 they are arranged according to the circle of fifths:\n[C, G, D, A, E, B, F#, C#, G#, D#, A#, F]. Viewing such a histogram\nmay draw attention to the prevalence of a tonal center, including the\nprevalence of dominant relationships in the piece.\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.FifthsPitchHistogramFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[0.0, 0.0, 0.073..., 0.134..., 0.098..., 0.171..., 0.177..., 0.196...,\n 0.085..., 0.006..., 0.018..., 0.036...]",
        "type": "ListItem"
    },
    {
        "text": "FifthsPitchHistogramFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "FifthsPitchHistogramFeature methods",
        "type": "Title"
    },
    {
        "text": "FifthsPitchHistogramFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "GlissandoPrevalenceFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "GlissandoPrevalenceFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not yet implemented in music21\nNumber of Note Ons that have at least one MIDI Pitch Bend associated\nwith them divided by total number of pitched Note Ons.",
        "type": "ListItem"
    },
    {
        "text": "GlissandoPrevalenceFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "GlissandoPrevalenceFeature methods",
        "type": "Title"
    },
    {
        "text": "GlissandoPrevalenceFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "HarmonicityOfTwoStrongestRhythmicPulsesFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "HarmonicityOfTwoStrongestRhythmicPulsesFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The bin label of the higher (in terms of bin label) of the two beat bins of the\npeaks with the highest frequency divided by the bin label of the lower.\n>>> sch = corpus.parse('schoenberg/opus19', 2)\n>>> for p in sch.parts:\n...     p.insert(0, tempo.MetronomeMark('Langsam', 70))\n>>> fe = features.jSymbolic.HarmonicityOfTwoStrongestRhythmicPulsesFeature(sch)\n>>> f = fe.extract()\n>>> f.vector[0]\n2.0\n\n\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.HarmonicityOfTwoStrongestRhythmicPulsesFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[0.5]",
        "type": "ListItem"
    },
    {
        "text": "HarmonicityOfTwoStrongestRhythmicPulsesFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "HarmonicityOfTwoStrongestRhythmicPulsesFeature methods",
        "type": "Title"
    },
    {
        "text": "HarmonicityOfTwoStrongestRhythmicPulsesFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "ImportanceOfBassRegisterFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "ImportanceOfBassRegisterFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Fraction of Notes between MIDI pitches 0 and 54.\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.ImportanceOfBassRegisterFeature(s)\n>>> fe.extract().vector\n[0.184...]",
        "type": "ListItem"
    },
    {
        "text": "ImportanceOfBassRegisterFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "ImportanceOfBassRegisterFeature methods",
        "type": "Title"
    },
    {
        "text": "ImportanceOfBassRegisterFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "ImportanceOfHighRegisterFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "ImportanceOfHighRegisterFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Fraction of Notes between MIDI pitches 73 and 127.\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.ImportanceOfHighRegisterFeature(s)\n>>> fe.extract().vector\n[0.049...]",
        "type": "ListItem"
    },
    {
        "text": "ImportanceOfHighRegisterFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "ImportanceOfHighRegisterFeature methods",
        "type": "Title"
    },
    {
        "text": "ImportanceOfHighRegisterFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "ImportanceOfLoudestVoiceFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "ImportanceOfLoudestVoiceFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not implemented\nTODO: implement",
        "type": "ListItem"
    },
    {
        "text": "ImportanceOfLoudestVoiceFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "ImportanceOfLoudestVoiceFeature methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() process() setData()",
        "type": "Table"
    },
    {
        "text": "ImportanceOfMiddleRegisterFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "ImportanceOfMiddleRegisterFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Fraction of Notes between MIDI pitches 55 and 72\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.ImportanceOfMiddleRegisterFeature(s)\n>>> fe.extract().vector\n[0.766...]",
        "type": "ListItem"
    },
    {
        "text": "ImportanceOfMiddleRegisterFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "ImportanceOfMiddleRegisterFeature methods",
        "type": "Title"
    },
    {
        "text": "ImportanceOfMiddleRegisterFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "InitialTempoFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "InitialTempoFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Tempo in beats per minute at the start of the recording.\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.InitialTempoFeature(s)\n>>> f = fe.extract()\n>>> f.vector  # a default\n[96.0]",
        "type": "ListItem"
    },
    {
        "text": "InitialTempoFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "InitialTempoFeature methods",
        "type": "Title"
    },
    {
        "text": "InitialTempoFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "InitialTimeSignatureFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "InitialTimeSignatureFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A feature array with two elements. The first is the numerator of the first occurring\ntime signature and the second is the denominator of the first occurring time signature.\nBoth are set to 0 if no time signature is present.\n>>> s1 = stream.Stream()\n>>> s1.append(meter.TimeSignature('3/4'))\n>>> fe = features.jSymbolic.InitialTimeSignatureFeature(s1)\n>>> fe.extract().vector\n[3, 4]\n\n\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.InitialTimeSignatureFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[4, 4]",
        "type": "ListItem"
    },
    {
        "text": "InitialTimeSignatureFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "InitialTimeSignatureFeature methods",
        "type": "Title"
    },
    {
        "text": "InitialTimeSignatureFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "InstrumentFractionFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "InstrumentFractionFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "TODO: Add description of feature\nThis subclass is in-turn subclassed by all FeatureExtractors that\nlook at the proportional usage of an Instrument",
        "type": "ListItem"
    },
    {
        "text": "InstrumentFractionFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "InstrumentFractionFeature methods",
        "type": "Title"
    },
    {
        "text": "InstrumentFractionFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "IntervalBetweenStrongestPitchClassesFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "IntervalBetweenStrongestPitchClassesFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": ">>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.IntervalBetweenStrongestPitchClassesFeature(s)\n>>> fe.extract().vector\n[5]",
        "type": "ListItem"
    },
    {
        "text": "IntervalBetweenStrongestPitchClassesFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "IntervalBetweenStrongestPitchClassesFeature methods",
        "type": "Title"
    },
    {
        "text": "IntervalBetweenStrongestPitchClassesFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "IntervalBetweenStrongestPitchesFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "IntervalBetweenStrongestPitchesFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Absolute value of the difference between the pitches of the two most common MIDI pitches.\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.IntervalBetweenStrongestPitchesFeature(s)\n>>> fe.extract().vector\n[5]",
        "type": "ListItem"
    },
    {
        "text": "IntervalBetweenStrongestPitchesFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "IntervalBetweenStrongestPitchesFeature methods",
        "type": "Title"
    },
    {
        "text": "IntervalBetweenStrongestPitchesFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "MaximumNoteDurationFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "MaximumNoteDurationFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Duration of the longest note (in seconds).\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.MaximumNoteDurationFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[1.25]",
        "type": "ListItem"
    },
    {
        "text": "MaximumNoteDurationFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "MaximumNoteDurationFeature methods",
        "type": "Title"
    },
    {
        "text": "MaximumNoteDurationFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "MaximumNumberOfIndependentVoicesFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "MaximumNumberOfIndependentVoicesFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Maximum number of different channels in which notes have sounded simultaneously.\nHere, Parts are treated as channels.\n>>> s = corpus.parse('handel/rinaldo/lascia_chio_pianga')\n>>> fe = features.jSymbolic.MaximumNumberOfIndependentVoicesFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[3]\n\n\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.MaximumNumberOfIndependentVoicesFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[4]",
        "type": "ListItem"
    },
    {
        "text": "MaximumNumberOfIndependentVoicesFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "MaximumNumberOfIndependentVoicesFeature methods",
        "type": "Title"
    },
    {
        "text": "MaximumNumberOfIndependentVoicesFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "MelodicFifthsFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "MelodicFifthsFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Fraction of melodic intervals that are perfect fifths\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.MelodicFifthsFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[0.056...]",
        "type": "ListItem"
    },
    {
        "text": "MelodicFifthsFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "MelodicFifthsFeature methods",
        "type": "Title"
    },
    {
        "text": "MelodicFifthsFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "MelodicIntervalHistogramFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "MelodicIntervalHistogramFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A features array with bins corresponding to the values of the melodic interval histogram.\n128 dimensions\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.MelodicIntervalHistogramFeature(s)\n>>> f = fe.extract()\n>>> f.vector[0:5]\n[0.144..., 0.220..., 0.364..., 0.062..., 0.050...]",
        "type": "ListItem"
    },
    {
        "text": "MelodicIntervalHistogramFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "MelodicIntervalHistogramFeature methods",
        "type": "Title"
    },
    {
        "text": "MelodicIntervalHistogramFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "MelodicIntervalsInLowestLineFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "MelodicIntervalsInLowestLineFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not implemented\nTODO: implement",
        "type": "ListItem"
    },
    {
        "text": "MelodicIntervalsInLowestLineFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "MelodicIntervalsInLowestLineFeature methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() process() setData()",
        "type": "Table"
    },
    {
        "text": "MelodicOctavesFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "MelodicOctavesFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Fraction of melodic intervals that are octaves\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.MelodicOctavesFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[0.018...]",
        "type": "ListItem"
    },
    {
        "text": "MelodicOctavesFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "MelodicOctavesFeature methods",
        "type": "Title"
    },
    {
        "text": "MelodicOctavesFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "MelodicThirdsFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "MelodicThirdsFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Fraction of melodic intervals that are major or minor thirds\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.MelodicThirdsFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[0.113...]",
        "type": "ListItem"
    },
    {
        "text": "MelodicThirdsFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "MelodicThirdsFeature methods",
        "type": "Title"
    },
    {
        "text": "MelodicThirdsFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "MelodicTritonesFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "MelodicTritonesFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Fraction of melodic intervals that are tritones\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.MelodicTritonesFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[0.012...]",
        "type": "ListItem"
    },
    {
        "text": "MelodicTritonesFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "MelodicTritonesFeature methods",
        "type": "Title"
    },
    {
        "text": "MelodicTritonesFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "MinimumNoteDurationFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "MinimumNoteDurationFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Duration of the shortest note (in seconds).\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.MinimumNoteDurationFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[0.3125]",
        "type": "ListItem"
    },
    {
        "text": "MinimumNoteDurationFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "MinimumNoteDurationFeature methods",
        "type": "Title"
    },
    {
        "text": "MinimumNoteDurationFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "MostCommonMelodicIntervalFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "MostCommonMelodicIntervalFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": ">>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.MostCommonMelodicIntervalFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[2]",
        "type": "ListItem"
    },
    {
        "text": "MostCommonMelodicIntervalFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "MostCommonMelodicIntervalFeature methods",
        "type": "Title"
    },
    {
        "text": "MostCommonMelodicIntervalFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "MostCommonMelodicIntervalPrevalenceFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "MostCommonMelodicIntervalPrevalenceFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Fraction of melodic intervals that belong to the most common interval.\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.MostCommonMelodicIntervalPrevalenceFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[0.364...]",
        "type": "ListItem"
    },
    {
        "text": "MostCommonMelodicIntervalPrevalenceFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "MostCommonMelodicIntervalPrevalenceFeature methods",
        "type": "Title"
    },
    {
        "text": "MostCommonMelodicIntervalPrevalenceFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "MostCommonPitchClassFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "MostCommonPitchClassFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Bin label of the most common pitch class.\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.MostCommonPitchClassFeature(s)\n>>> fe.extract().vector\n[1]",
        "type": "ListItem"
    },
    {
        "text": "MostCommonPitchClassFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "MostCommonPitchClassFeature methods",
        "type": "Title"
    },
    {
        "text": "MostCommonPitchClassFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "MostCommonPitchClassPrevalenceFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "MostCommonPitchClassPrevalenceFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Fraction of Notes corresponding to the most common pitch class.\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.MostCommonPitchClassPrevalenceFeature(s)\n>>> fe.extract().vector\n[0.196...]",
        "type": "ListItem"
    },
    {
        "text": "MostCommonPitchClassPrevalenceFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "MostCommonPitchClassPrevalenceFeature methods",
        "type": "Title"
    },
    {
        "text": "MostCommonPitchClassPrevalenceFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "MostCommonPitchFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "MostCommonPitchFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Bin label of the most common pitch.\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.MostCommonPitchFeature(s)\n>>> fe.extract().vector\n[61]",
        "type": "ListItem"
    },
    {
        "text": "MostCommonPitchFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "MostCommonPitchFeature methods",
        "type": "Title"
    },
    {
        "text": "MostCommonPitchFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "MostCommonPitchPrevalenceFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "MostCommonPitchPrevalenceFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Fraction of Notes corresponding to the most common pitch.\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.MostCommonPitchPrevalenceFeature(s)\n>>> fe.extract().vector[0]\n0.116...",
        "type": "ListItem"
    },
    {
        "text": "MostCommonPitchPrevalenceFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "MostCommonPitchPrevalenceFeature methods",
        "type": "Title"
    },
    {
        "text": "MostCommonPitchPrevalenceFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "NoteDensityFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "NoteDensityFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Gives the average number of notes per second, taking into account\nthe tempo at any moment in the piece.  Unlike jSymbolic, music21\nquantizes notes from MIDI somewhat before running this test; this\nfunction is meant to be run on encoded MIDI scores rather than\nrecorded MIDI performances.\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.NoteDensityFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[7.244...]",
        "type": "ListItem"
    },
    {
        "text": "NoteDensityFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "NoteDensityFeature methods",
        "type": "Title"
    },
    {
        "text": "NoteDensityFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "NotePrevalenceOfPitchedInstrumentsFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "NotePrevalenceOfPitchedInstrumentsFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": ">>> s1 = stream.Stream()\n>>> s1.append(instrument.AcousticGuitar())\n>>> s1.repeatAppend(note.Note(), 4)\n>>> s1.append(instrument.Tuba())\n>>> s1.append(note.Note())\n>>> fe = features.jSymbolic.NotePrevalenceOfPitchedInstrumentsFeature(s1)\n>>> fe.extract().vector\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n 0.8..., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2...,\n 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n\n.midiProgram cannot be None:\n>>> s1.getInstruments().first().midiProgram = None\n>>> fe2 = features.jSymbolic.NotePrevalenceOfPitchedInstrumentsFeature(s1)\n>>> fe2.extract()\nTraceback (most recent call last):\nmusic21.features.jSymbolic.JSymbolicFeatureException: Acoustic Guitar lacks a midiProgram",
        "type": "ListItem"
    },
    {
        "text": "NotePrevalenceOfPitchedInstrumentsFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "NotePrevalenceOfPitchedInstrumentsFeature methods",
        "type": "Title"
    },
    {
        "text": "NotePrevalenceOfPitchedInstrumentsFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "NotePrevalenceOfUnpitchedInstrumentsFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "NotePrevalenceOfUnpitchedInstrumentsFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not implemented\nTODO: implement",
        "type": "ListItem"
    },
    {
        "text": "NotePrevalenceOfUnpitchedInstrumentsFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "NotePrevalenceOfUnpitchedInstrumentsFeature methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() process() setData()",
        "type": "Table"
    },
    {
        "text": "NumberOfCommonMelodicIntervalsFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "NumberOfCommonMelodicIntervalsFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Number of melodic intervals that represent at least 9% of all melodic intervals.\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.NumberOfCommonMelodicIntervalsFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[3]",
        "type": "ListItem"
    },
    {
        "text": "NumberOfCommonMelodicIntervalsFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "NumberOfCommonMelodicIntervalsFeature methods",
        "type": "Title"
    },
    {
        "text": "NumberOfCommonMelodicIntervalsFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "NumberOfCommonPitchesFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "NumberOfCommonPitchesFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Number of pitches that account individually for at least 9% of all notes.\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.NumberOfCommonPitchesFeature(s)\n>>> fe.extract().vector\n[3]",
        "type": "ListItem"
    },
    {
        "text": "NumberOfCommonPitchesFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "NumberOfCommonPitchesFeature methods",
        "type": "Title"
    },
    {
        "text": "NumberOfCommonPitchesFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "NumberOfModeratePulsesFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "NumberOfModeratePulsesFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not yet implemented\nNumber of beat peaks with normalized frequencies over 0.01.",
        "type": "ListItem"
    },
    {
        "text": "NumberOfModeratePulsesFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "NumberOfModeratePulsesFeature methods",
        "type": "Title"
    },
    {
        "text": "NumberOfModeratePulsesFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "NumberOfPitchedInstrumentsFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "NumberOfPitchedInstrumentsFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Total number of General MIDI patches that are used to play at least one note.\n>>> s1 = stream.Stream()\n>>> s1.append(instrument.AcousticGuitar())\n>>> s1.append(note.Note())\n>>> s1.append(instrument.Tuba())\n>>> s1.append(note.Note())\n>>> fe = features.jSymbolic.NumberOfPitchedInstrumentsFeature(s1)\n>>> fe.extract().vector\n[2]",
        "type": "ListItem"
    },
    {
        "text": "NumberOfPitchedInstrumentsFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "NumberOfPitchedInstrumentsFeature methods",
        "type": "Title"
    },
    {
        "text": "NumberOfPitchedInstrumentsFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "NumberOfRelativelyStrongPulsesFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "NumberOfRelativelyStrongPulsesFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "not yet implemented\nNumber of beat peaks with frequencies at least 30% as high as the\nfrequency of the bin with the highest frequency.",
        "type": "ListItem"
    },
    {
        "text": "NumberOfRelativelyStrongPulsesFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "NumberOfRelativelyStrongPulsesFeature methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() process() setData()",
        "type": "Table"
    },
    {
        "text": "NumberOfStrongPulsesFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "NumberOfStrongPulsesFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not yet implemented\nNumber of beat peaks with normalized frequencies over 0.1.",
        "type": "ListItem"
    },
    {
        "text": "NumberOfStrongPulsesFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "NumberOfStrongPulsesFeature methods",
        "type": "Title"
    },
    {
        "text": "NumberOfStrongPulsesFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "NumberOfUnpitchedInstrumentsFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "NumberOfUnpitchedInstrumentsFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not implemented\nNumber of distinct MIDI Percussion Key Map patches that were used to play at\nleast one note. It should be noted that only instruments 35 to 81 are\nincluded here, as they are the ones that are included in the official standard.\nTODO: implement",
        "type": "ListItem"
    },
    {
        "text": "NumberOfUnpitchedInstrumentsFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "NumberOfUnpitchedInstrumentsFeature methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() process() setData()",
        "type": "Table"
    },
    {
        "text": "OrchestralStringsFractionFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "OrchestralStringsFractionFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Fraction of all Note Ons belonging to orchestral strings patches\n(General MIDI patches 41 or 47).\n>>> s1 = stream.Stream()\n>>> s1.append(instrument.Violoncello())\n>>> s1.repeatAppend(note.Note(), 4)\n>>> s1.append(instrument.Tuba())\n>>> s1.repeatAppend(note.Note(), 6)\n>>> fe = features.jSymbolic.OrchestralStringsFractionFeature(s1)\n>>> print(fe.extract().vector[0])\n0.4",
        "type": "ListItem"
    },
    {
        "text": "OrchestralStringsFractionFeature bases",
        "type": "Title"
    },
    {
        "text": "InstrumentFractionFeature",
        "type": "ListItem"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "OrchestralStringsFractionFeature methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from InstrumentFractionFeature:",
        "type": "NarrativeText"
    },
    {
        "text": "process()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "OverallDynamicRangeFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "OverallDynamicRangeFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not implemented\nThe maximum loudness minus the minimum loudness value.\nTODO: implement",
        "type": "ListItem"
    },
    {
        "text": "OverallDynamicRangeFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "OverallDynamicRangeFeature methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() process() setData()",
        "type": "Table"
    },
    {
        "text": "PercussionPrevalenceFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "PercussionPrevalenceFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not implemented\nTotal number of Note Ons corresponding to unpitched percussion instruments\ndivided by the total number of Note Ons in the recording.",
        "type": "ListItem"
    },
    {
        "text": "PercussionPrevalenceFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "PercussionPrevalenceFeature methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() process() setData()",
        "type": "Table"
    },
    {
        "text": "PitchClassDistributionFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "PitchClassDistributionFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A feature array with 12 entries where the first holds the frequency\nof the bin of the pitch class histogram with the highest frequency,\nand the following entries holding the successive bins of the histogram,\nwrapping around if necessary.\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.PitchClassDistributionFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[0.196..., 0.073..., 0.006..., 0.098..., 0.036..., 0.177..., 0.0,\n 0.085..., 0.134..., 0.018..., 0.171..., 0.0]",
        "type": "ListItem"
    },
    {
        "text": "PitchClassDistributionFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "PitchClassDistributionFeature methods",
        "type": "Title"
    },
    {
        "text": "PitchClassDistributionFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "PitchClassVarietyFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "PitchClassVarietyFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Number of pitch classes used at least once.\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.PitchClassVarietyFeature(s)\n>>> fe.extract().vector\n[10]",
        "type": "ListItem"
    },
    {
        "text": "PitchClassVarietyFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "PitchClassVarietyFeature methods",
        "type": "Title"
    },
    {
        "text": "PitchClassVarietyFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "PitchVarietyFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "PitchVarietyFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Number of pitches used at least once.\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.PitchVarietyFeature(s)\n>>> fe.extract().vector\n[24]",
        "type": "ListItem"
    },
    {
        "text": "PitchVarietyFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "PitchVarietyFeature methods",
        "type": "Title"
    },
    {
        "text": "PitchVarietyFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "PitchedInstrumentsPresentFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "PitchedInstrumentsPresentFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Which pitched General MIDI Instruments are present. There is one entry\nfor each instrument, which is set to 1.0 if there is at least one Note On\nin the recording corresponding to the instrument and to 0.0 if there is not.\n>>> s1 = stream.Stream()\n>>> s1.append(instrument.AcousticGuitar())\n>>> s1.append(note.Note())\n>>> s1.append(instrument.Tuba())\n>>> s1.append(note.Note())\n>>> fe = features.jSymbolic.PitchedInstrumentsPresentFeature(s1)\n>>> fe.extract().vector\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n\nDefault instruments will lack a .midiProgram, so they raise exceptions:\n>>> i = instrument.Instrument()\n>>> i.midiProgram is None\nTrue\n>>> s2 = stream.Stream()\n>>> s2.append(i)\n>>> s2.append(note.Note())\n>>> fe2 = features.jSymbolic.PitchedInstrumentsPresentFeature(s2)\n>>> fe2.extract()\nTraceback (most recent call last):\nmusic21.features.jSymbolic.JSymbolicFeatureException:\n<music21.instrument.Instrument ''> lacks a midiProgram",
        "type": "ListItem"
    },
    {
        "text": "PitchedInstrumentsPresentFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "PitchedInstrumentsPresentFeature methods",
        "type": "Title"
    },
    {
        "text": "PitchedInstrumentsPresentFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "PolyrhythmsFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "PolyrhythmsFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not yet implemented\nNumber of beat peaks with frequencies at least 30% of the highest frequency\nwhose bin labels are not integer multiples or factors\n(using only multipliers of 1, 2, 3, 4, 6 and 8) (with an accepted\nerror of +/- 3 bins) of the bin label of the peak with the highest frequency.\nThis number is then divided by the total number of beat bins with frequencies\nover 30% of the highest frequency.",
        "type": "ListItem"
    },
    {
        "text": "PolyrhythmsFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "PolyrhythmsFeature methods",
        "type": "Title"
    },
    {
        "text": "PolyrhythmsFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "PrevalenceOfMicrotonesFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "PrevalenceOfMicrotonesFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "not yet implemented\nNumber of Note Ons that are preceded by isolated MIDI Pitch Bend\nmessages as a fraction of the total number of Note Ons.'",
        "type": "ListItem"
    },
    {
        "text": "PrevalenceOfMicrotonesFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "PrevalenceOfMicrotonesFeature methods",
        "type": "Title"
    },
    {
        "text": "PrevalenceOfMicrotonesFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "PrimaryRegisterFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "PrimaryRegisterFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Average MIDI pitch.\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.PrimaryRegisterFeature(s)\n>>> fe.extract().vector\n[61.12...]",
        "type": "ListItem"
    },
    {
        "text": "PrimaryRegisterFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "PrimaryRegisterFeature methods",
        "type": "Title"
    },
    {
        "text": "PrimaryRegisterFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "QualityFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "QualityFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Set to 0 if the key signature indicates that\na recording is major, set to 1 if it indicates\nthat it is minor.  In jSymbolic, this is set to 0 if key signature is unknown.\nSee features.native.QualityFeature for a music21 improvement on this method\nExample: Handel, Rinaldo Aria (musicxml) is explicitly encoded as being in Major:\n>>> s = corpus.parse('handel/rinaldo/lascia_chio_pianga')\n>>> fe = features.jSymbolic.QualityFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[0]\n\n\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.QualityFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[1]",
        "type": "ListItem"
    },
    {
        "text": "QualityFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "QualityFeature methods",
        "type": "Title"
    },
    {
        "text": "QualityFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "QuintupleMeterFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "QuintupleMeterFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Set to 1 if numerator of initial time signature is 5, set to 0 otherwise.\n>>> s1 = stream.Stream()\n>>> s1.append(meter.TimeSignature('5/4'))\n>>> fe = features.jSymbolic.QuintupleMeterFeature(s1)\n>>> fe.extract().vector\n[1]\n\n\n>>> s2 = stream.Stream()\n>>> s2.append(meter.TimeSignature('3/4'))\n>>> fe.setData(s2)  # change the data\n>>> fe.extract().vector\n[0]\n\n\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.QuintupleMeterFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[0]",
        "type": "ListItem"
    },
    {
        "text": "QuintupleMeterFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "QuintupleMeterFeature methods",
        "type": "Title"
    },
    {
        "text": "QuintupleMeterFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "RangeFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "RangeFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Difference between highest and lowest pitches. In semitones\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.RangeFeature(s)\n>>> fe.extract().vector\n[34]",
        "type": "ListItem"
    },
    {
        "text": "RangeFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "RangeFeature methods",
        "type": "Title"
    },
    {
        "text": "RangeFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "RangeOfHighestLineFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "RangeOfHighestLineFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not implemented\nTODO: implement",
        "type": "ListItem"
    },
    {
        "text": "RangeOfHighestLineFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "RangeOfHighestLineFeature methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() process() setData()",
        "type": "Table"
    },
    {
        "text": "RelativeNoteDensityOfHighestLineFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "RelativeNoteDensityOfHighestLineFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not implemented\nTODO: implement",
        "type": "ListItem"
    },
    {
        "text": "RelativeNoteDensityOfHighestLineFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "RelativeNoteDensityOfHighestLineFeature methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() process() setData()",
        "type": "Table"
    },
    {
        "text": "RelativeRangeOfLoudestVoiceFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "RelativeRangeOfLoudestVoiceFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not implemented\nTODO: implement",
        "type": "ListItem"
    },
    {
        "text": "RelativeRangeOfLoudestVoiceFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "RelativeRangeOfLoudestVoiceFeature methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() process() setData()",
        "type": "Table"
    },
    {
        "text": "RelativeStrengthOfMostCommonIntervalsFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "RelativeStrengthOfMostCommonIntervalsFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": ">>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.RelativeStrengthOfMostCommonIntervalsFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[0.603...]",
        "type": "ListItem"
    },
    {
        "text": "RelativeStrengthOfMostCommonIntervalsFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "RelativeStrengthOfMostCommonIntervalsFeature methods",
        "type": "Title"
    },
    {
        "text": "RelativeStrengthOfMostCommonIntervalsFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "RelativeStrengthOfTopPitchClassesFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "RelativeStrengthOfTopPitchClassesFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": ">>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.RelativeStrengthOfTopPitchClassesFeature(s)\n>>> fe.extract().vector\n[0.906...]",
        "type": "ListItem"
    },
    {
        "text": "RelativeStrengthOfTopPitchClassesFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "RelativeStrengthOfTopPitchClassesFeature methods",
        "type": "Title"
    },
    {
        "text": "RelativeStrengthOfTopPitchClassesFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "RelativeStrengthOfTopPitchesFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "RelativeStrengthOfTopPitchesFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The frequency of the 2nd most common pitch divided by the frequency of the most common pitch.\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.RelativeStrengthOfTopPitchesFeature(s)\n>>> fe.extract().vector\n[0.947...]",
        "type": "ListItem"
    },
    {
        "text": "RelativeStrengthOfTopPitchesFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "RelativeStrengthOfTopPitchesFeature methods",
        "type": "Title"
    },
    {
        "text": "RelativeStrengthOfTopPitchesFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "RepeatedNotesFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "RepeatedNotesFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Fraction of notes that are repeated melodically\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.RepeatedNotesFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[0.144...]",
        "type": "ListItem"
    },
    {
        "text": "RepeatedNotesFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "RepeatedNotesFeature methods",
        "type": "Title"
    },
    {
        "text": "RepeatedNotesFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "RhythmicLoosenessFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "RhythmicLoosenessFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "not yet implemented\nAverage width of beat histogram peaks (in beats per minute).\nWidth is measured for all peaks with frequencies at least 30% as high as the highest peak,\nand is defined by the distance between the points on the peak in question that are\n30% of the height of the peak.",
        "type": "ListItem"
    },
    {
        "text": "RhythmicLoosenessFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "RhythmicLoosenessFeature methods",
        "type": "Title"
    },
    {
        "text": "RhythmicLoosenessFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "RhythmicVariabilityFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "RhythmicVariabilityFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not yet implemented\nStandard deviation of the bin values (except the first 40 empty ones).",
        "type": "ListItem"
    },
    {
        "text": "RhythmicVariabilityFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "RhythmicVariabilityFeature methods",
        "type": "Title"
    },
    {
        "text": "RhythmicVariabilityFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "SaxophoneFractionFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "SaxophoneFractionFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Fraction of all Note Ons belonging to saxophone patches (General MIDI\npatches 65 through 68).\n# NOTE: incorrect\n>>> s1 = stream.Stream()\n>>> s1.append(instrument.SopranoSaxophone())\n>>> s1.repeatAppend(note.Note(), 6)\n>>> s1.append(instrument.Tuba())\n>>> s1.repeatAppend(note.Note(), 4)\n>>> fe = features.jSymbolic.SaxophoneFractionFeature(s1)\n>>> print(fe.extract().vector[0])\n0.6",
        "type": "ListItem"
    },
    {
        "text": "SaxophoneFractionFeature bases",
        "type": "Title"
    },
    {
        "text": "InstrumentFractionFeature",
        "type": "ListItem"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "SaxophoneFractionFeature methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from InstrumentFractionFeature:",
        "type": "NarrativeText"
    },
    {
        "text": "process()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "SecondStrongestRhythmicPulseFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "SecondStrongestRhythmicPulseFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Bin label of the beat bin of the peak with the second-highest frequency.\n>>> sch = corpus.parse('schoenberg/opus19', 2)\n>>> for p in sch.parts:\n...     p.insert(0, tempo.MetronomeMark('Langsam', 70))\n>>> fe = features.jSymbolic.SecondStrongestRhythmicPulseFeature(sch)\n>>> f = fe.extract()\n>>> f.vector[0]\n70\n\n\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.SecondStrongestRhythmicPulseFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[192]",
        "type": "ListItem"
    },
    {
        "text": "SecondStrongestRhythmicPulseFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "SecondStrongestRhythmicPulseFeature methods",
        "type": "Title"
    },
    {
        "text": "SecondStrongestRhythmicPulseFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "SizeOfMelodicArcsFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "SizeOfMelodicArcsFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Average span (in semitones) between melodic peaks and troughs\nin any part. Each time the melody changes direction begins a\nnew arc. The average size of melodic arcs is defined as the\ntotal size of melodic intervals between changes of directions -\nor between the start of the melody and the first change of\ndirection - divided by the number of direction changes.\nExample: C D E D C E D C C\nIntervals: [0] 2 2 -2 -2 2 2 -4 0\nChanges direction (equivalent to +/- sign) three times.\nThe total sum of interval distance up to the last change\nof direction is 12. We don't count the last interval,\nthe descending major third, because it is not between\nchanges of direction.\nThus, the average size of melodic arcs is 12/3 = 4.\n>>> s = converter.parse(\"tinyNotation: c' d' e' d' c' d' e'2 c'2 c'2\")\n>>> fe = features.jSymbolic.SizeOfMelodicArcsFeature(s)\n>>> fe.extract().vector\n[4.0]\n\n\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.SizeOfMelodicArcsFeature(s)\n>>> fe.extract().vector\n[4.84...]",
        "type": "ListItem"
    },
    {
        "text": "SizeOfMelodicArcsFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "SizeOfMelodicArcsFeature methods",
        "type": "Title"
    },
    {
        "text": "SizeOfMelodicArcsFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "StaccatoIncidenceFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "StaccatoIncidenceFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Number of notes with durations of less than a 10th of a second divided by\nthe total number of notes in the recording.\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.StaccatoIncidenceFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[0.0]",
        "type": "ListItem"
    },
    {
        "text": "StaccatoIncidenceFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "StaccatoIncidenceFeature methods",
        "type": "Title"
    },
    {
        "text": "StaccatoIncidenceFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "StepwiseMotionFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "StepwiseMotionFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Fraction of melodic intervals that corresponded to a minor or major second\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.StepwiseMotionFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[0.584...]",
        "type": "ListItem"
    },
    {
        "text": "StepwiseMotionFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "StepwiseMotionFeature methods",
        "type": "Title"
    },
    {
        "text": "StepwiseMotionFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "StrengthOfSecondStrongestRhythmicPulseFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "StrengthOfSecondStrongestRhythmicPulseFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Frequency of the beat bin of the peak with the second-highest frequency.\n>>> sch = corpus.parse('schoenberg/opus19', 2)\n>>> for p in sch.parts:\n...     p.insert(0, tempo.MetronomeMark('Langsam', 70))\n>>> fe = features.jSymbolic.StrengthOfSecondStrongestRhythmicPulseFeature(sch)\n>>> fe.extract().vector[0]\n0.121...",
        "type": "ListItem"
    },
    {
        "text": "StrengthOfSecondStrongestRhythmicPulseFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "StrengthOfSecondStrongestRhythmicPulseFeature methods",
        "type": "Title"
    },
    {
        "text": "StrengthOfSecondStrongestRhythmicPulseFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "StrengthOfStrongestRhythmicPulseFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "StrengthOfStrongestRhythmicPulseFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Frequency of the beat bin with the highest frequency.\n>>> sch = corpus.parse('schoenberg/opus19', 2)\n>>> for p in sch.parts:\n...     p.insert(0, tempo.MetronomeMark('Langsam', 70))\n>>> fe = features.jSymbolic.StrengthOfStrongestRhythmicPulseFeature(sch)\n>>> fe.extract().vector[0]\n0.853...",
        "type": "ListItem"
    },
    {
        "text": "StrengthOfStrongestRhythmicPulseFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "StrengthOfStrongestRhythmicPulseFeature methods",
        "type": "Title"
    },
    {
        "text": "StrengthOfStrongestRhythmicPulseFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "StrengthRatioOfTwoStrongestRhythmicPulsesFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "StrengthRatioOfTwoStrongestRhythmicPulsesFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The frequency of the higher (in terms of frequency) of the two beat bins\ncorresponding to the peaks with the highest frequency divided by the frequency of the lower.\n>>> sch = corpus.parse('schoenberg/opus19', 2)\n>>> for p in sch.parts:\n...     p.insert(0, tempo.MetronomeMark('Langsam', 70))\n>>> fe = features.jSymbolic.StrengthRatioOfTwoStrongestRhythmicPulsesFeature(sch)\n>>> fe.extract().vector[0]\n7.0",
        "type": "ListItem"
    },
    {
        "text": "StrengthRatioOfTwoStrongestRhythmicPulsesFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "StrengthRatioOfTwoStrongestRhythmicPulsesFeature methods",
        "type": "Title"
    },
    {
        "text": "StrengthRatioOfTwoStrongestRhythmicPulsesFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "StringEnsembleFractionFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "StringEnsembleFractionFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not implemented\nFraction of all Note Ons belonging to string ensemble patches\n(General MIDI patches 49 to 52).",
        "type": "ListItem"
    },
    {
        "text": "StringEnsembleFractionFeature bases",
        "type": "Title"
    },
    {
        "text": "InstrumentFractionFeature",
        "type": "ListItem"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "StringEnsembleFractionFeature methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from InstrumentFractionFeature:",
        "type": "NarrativeText"
    },
    {
        "text": "process()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "StringKeyboardFractionFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "StringKeyboardFractionFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Fraction of all Note Ons belonging to string keyboard patches\n(General MIDI patches 1 to 8).\n>>> s1 = stream.Stream()\n>>> s1.append(instrument.Piano())\n>>> s1.repeatAppend(note.Note(), 9)\n>>> s1.append(instrument.Tuba())\n>>> s1.append(note.Note())\n>>> fe = features.jSymbolic.StringKeyboardFractionFeature(s1)\n>>> fe.extract().vector\n[0.9...]",
        "type": "ListItem"
    },
    {
        "text": "StringKeyboardFractionFeature bases",
        "type": "Title"
    },
    {
        "text": "InstrumentFractionFeature",
        "type": "ListItem"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "StringKeyboardFractionFeature methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from InstrumentFractionFeature:",
        "type": "NarrativeText"
    },
    {
        "text": "process()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "StrongTonalCentresFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "StrongTonalCentresFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not implemented\nNumber of peaks in the fifths pitch histogram that each account\nfor at least 9% of all Note Ons.",
        "type": "ListItem"
    },
    {
        "text": "StrongTonalCentresFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "StrongTonalCentresFeature methods",
        "type": "Title"
    },
    {
        "text": "StrongTonalCentresFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "StrongestRhythmicPulseFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "StrongestRhythmicPulseFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Bin label of the beat bin of the peak with the highest frequency.\n>>> sch = corpus.parse('schoenberg/opus19', 2)\n>>> for p in sch.parts:\n...     p.insert(0, tempo.MetronomeMark('Langsam', 70))\n>>> fe = features.jSymbolic.StrongestRhythmicPulseFeature(sch)\n>>> f = fe.extract()\n>>> f.vector[0]\n140\n\n\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.StrongestRhythmicPulseFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[96]",
        "type": "ListItem"
    },
    {
        "text": "StrongestRhythmicPulseFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "StrongestRhythmicPulseFeature methods",
        "type": "Title"
    },
    {
        "text": "StrongestRhythmicPulseFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "TimePrevalenceOfPitchedInstrumentsFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "TimePrevalenceOfPitchedInstrumentsFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not implemented\nThe fraction of the total time of the recording in\nwhich a note was sounding for each (pitched) General\nMIDI Instrument. There is one entry for each instrument,\nwhich is set to the total time in seconds during which a\ngiven instrument was sounding one or more notes divided by the total length\nin seconds of the piece.'\nTODO: implement",
        "type": "ListItem"
    },
    {
        "text": "TimePrevalenceOfPitchedInstrumentsFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "TimePrevalenceOfPitchedInstrumentsFeature methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() process() setData()",
        "type": "Table"
    },
    {
        "text": "TripleMeterFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "TripleMeterFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Set to 1 if numerator of initial time signature is 3, set to 0 otherwise.\n>>> s1 = stream.Stream()\n>>> s1.append(meter.TimeSignature('5/4'))\n>>> fe = features.jSymbolic.TripleMeterFeature(s1)\n>>> fe.extract().vector\n[0]\n\n\n>>> s2 = stream.Stream()\n>>> s2.append(meter.TimeSignature('3/4'))\n>>> fe.setData(s2)  # change the data\n>>> fe.extract().vector\n[1]\n\n\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.TripleMeterFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[0]",
        "type": "ListItem"
    },
    {
        "text": "TripleMeterFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "TripleMeterFeature methods",
        "type": "Title"
    },
    {
        "text": "TripleMeterFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "UnpitchedInstrumentsPresentFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "UnpitchedInstrumentsPresentFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not yet implemented\nWhich unpitched MIDI Percussion Key Map instruments are present.\nThere is one entry for each instrument, which is set to 1.0 if there is\nat least one Note On in the recording corresponding to the instrument and to\n0.0 if there is not. It should be noted that only instruments 35 to 81 are included here,\nas they are the ones that meet the official standard. They are numbered in this\narray from 0 to 46.",
        "type": "ListItem"
    },
    {
        "text": "UnpitchedInstrumentsPresentFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "UnpitchedInstrumentsPresentFeature methods",
        "type": "Title"
    },
    {
        "text": "UnpitchedInstrumentsPresentFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "VariabilityOfNoteDurationFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "VariabilityOfNoteDurationFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Standard deviation of note durations in seconds.\n# In this piece, we have:\n#     9 half notes or tied pair of quarters\n#     98 untied quarters or tied pair of eighths\n#     56 untied eighths\n# BPM = 120 means a half note is a second.\n# Mean duration should thus be 0.44171779141104295\n# and standard deviation should be  0.17854763448902145\n>>> s = corpus.parse('bwv66.6')\n>>> for p in s.parts:\n...     p.insert(0, tempo.MetronomeMark(number=120))\n>>> fe = features.jSymbolic.VariabilityOfNoteDurationFeature(s)\n>>> f = fe.extract()\n>>> f.vector[0]\n0.178...",
        "type": "ListItem"
    },
    {
        "text": "VariabilityOfNoteDurationFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "VariabilityOfNoteDurationFeature methods",
        "type": "Title"
    },
    {
        "text": "VariabilityOfNoteDurationFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "VariabilityOfNotePrevalenceOfPitchedInstrumentsFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "VariabilityOfNotePrevalenceOfPitchedInstrumentsFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Standard deviation of the fraction of Note Ons played\nby each (pitched) General MIDI instrument that is\nused to play at least one note.\n>>> s1 = stream.Stream()\n>>> s1.append(instrument.AcousticGuitar())\n>>> s1.repeatAppend(note.Note(), 5)\n>>> s1.append(instrument.Tuba())\n>>> s1.append(note.Note())\n>>> fe = features.jSymbolic.VariabilityOfNotePrevalenceOfPitchedInstrumentsFeature(s1)\n>>> fe.extract().vector\n[0.33333...]",
        "type": "ListItem"
    },
    {
        "text": "VariabilityOfNotePrevalenceOfPitchedInstrumentsFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "VariabilityOfNotePrevalenceOfPitchedInstrumentsFeature methods",
        "type": "Title"
    },
    {
        "text": "VariabilityOfNotePrevalenceOfPitchedInstrumentsFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "VariabilityOfNotePrevalenceOfUnpitchedInstrumentsFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "VariabilityOfNotePrevalenceOfUnpitchedInstrumentsFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not implemented\nStandard deviation of the fraction of Note Ons played by each (unpitched) MIDI Percussion Key\nMap instrument that is used to play at least one note. It should be noted that only\ninstruments 35 to 81 are included here, as they are the ones that are included in the\nofficial standard.\nTODO: implement",
        "type": "ListItem"
    },
    {
        "text": "VariabilityOfNotePrevalenceOfUnpitchedInstrumentsFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "VariabilityOfNotePrevalenceOfUnpitchedInstrumentsFeature methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() process() setData()",
        "type": "Table"
    },
    {
        "text": "VariabilityOfNumberOfIndependentVoicesFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "VariabilityOfNumberOfIndependentVoicesFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Standard deviation of number of different channels in which notes have sounded simultaneously.\nRests are not included in this calculation.\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.VariabilityOfNumberOfIndependentVoicesFeature(s)\n>>> f = fe.extract()\n>>> f.vector\n[0.449...]",
        "type": "ListItem"
    },
    {
        "text": "VariabilityOfNumberOfIndependentVoicesFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "VariabilityOfNumberOfIndependentVoicesFeature methods",
        "type": "Title"
    },
    {
        "text": "VariabilityOfNumberOfIndependentVoicesFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "VariabilityOfTimeBetweenAttacksFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "VariabilityOfTimeBetweenAttacksFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Standard deviation of the times, in seconds, between Note On events (regardless of channel).\n>>> s = corpus.parse('bwv66.6')\n>>> fe = features.jSymbolic.VariabilityOfTimeBetweenAttacksFeature(s)\n>>> f = fe.extract()\n>>> print(f.vector)\n[0.1875]",
        "type": "ListItem"
    },
    {
        "text": "VariabilityOfTimeBetweenAttacksFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "VariabilityOfTimeBetweenAttacksFeature methods",
        "type": "Title"
    },
    {
        "text": "VariabilityOfTimeBetweenAttacksFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "VariationOfDynamicsFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "VariationOfDynamicsFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not implemented\nStandard deviation of loudness levels of all notes.\nTODO: implement",
        "type": "ListItem"
    },
    {
        "text": "VariationOfDynamicsFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "VariationOfDynamicsFeature methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() process() setData()",
        "type": "Table"
    },
    {
        "text": "VariationOfDynamicsInEachVoiceFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "VariationOfDynamicsInEachVoiceFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not implemented\nThe average of the standard deviations of loudness levels within each\nchannel that contains at least one note.\nTODO: implement",
        "type": "ListItem"
    },
    {
        "text": "VariationOfDynamicsInEachVoiceFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "VariationOfDynamicsInEachVoiceFeature methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() process() setData()",
        "type": "Table"
    },
    {
        "text": "VibratoPrevalenceFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "VibratoPrevalenceFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not yet implemented in music21\nNumber of notes for which Pitch Bend messages change direction at least twice divided by\ntotal number of notes that have Pitch Bend messages associated with them.",
        "type": "ListItem"
    },
    {
        "text": "VibratoPrevalenceFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "VibratoPrevalenceFeature methods",
        "type": "Title"
    },
    {
        "text": "VibratoPrevalenceFeature.",
        "type": "Title"
    },
    {
        "text": "process",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Do processing necessary, storing result in _feature.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "ViolinFractionFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "ViolinFractionFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Fraction of all Note Ons belonging to violin patches (General MIDI\npatches 41 or 111).\n>>> s1 = stream.Stream()\n>>> s1.append(instrument.Violin())\n>>> s1.repeatAppend(note.Note(), 2)\n>>> s1.append(instrument.Tuba())\n>>> s1.repeatAppend(note.Note(), 8)\n>>> fe = features.jSymbolic.ViolinFractionFeature(s1)\n>>> fe.extract().vector\n[0.2...]",
        "type": "ListItem"
    },
    {
        "text": "ViolinFractionFeature bases",
        "type": "Title"
    },
    {
        "text": "InstrumentFractionFeature",
        "type": "ListItem"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "ViolinFractionFeature methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from InstrumentFractionFeature:",
        "type": "NarrativeText"
    },
    {
        "text": "process()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "VoiceEqualityDynamicsFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "VoiceEqualityDynamicsFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not implemented\nTODO: implement",
        "type": "ListItem"
    },
    {
        "text": "VoiceEqualityDynamicsFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "VoiceEqualityDynamicsFeature methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() process() setData()",
        "type": "Table"
    },
    {
        "text": "VoiceEqualityMelodicLeapsFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "VoiceEqualityMelodicLeapsFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not implemented\nTODO: implement",
        "type": "ListItem"
    },
    {
        "text": "VoiceEqualityMelodicLeapsFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "VoiceEqualityMelodicLeapsFeature methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() process() setData()",
        "type": "Table"
    },
    {
        "text": "VoiceEqualityNoteDurationFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "VoiceEqualityNoteDurationFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not implemented\nTODO: implement",
        "type": "ListItem"
    },
    {
        "text": "VoiceEqualityNoteDurationFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "VoiceEqualityNoteDurationFeature methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() process() setData()",
        "type": "Table"
    },
    {
        "text": "VoiceEqualityNumberOfNotesFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "VoiceEqualityNumberOfNotesFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not implemented\nTODO: implement\nStandard deviation of the total number of Note Ons in each channel\nthat contains at least one note.",
        "type": "ListItem"
    },
    {
        "text": "VoiceEqualityNumberOfNotesFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "VoiceEqualityNumberOfNotesFeature methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() process() setData()",
        "type": "Table"
    },
    {
        "text": "VoiceEqualityRangeFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "VoiceEqualityRangeFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not implemented\nStandard deviation of the differences between the highest and lowest\npitches in each channel that contains at least one note.",
        "type": "ListItem"
    },
    {
        "text": "VoiceEqualityRangeFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "VoiceEqualityRangeFeature methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() process() setData()",
        "type": "Table"
    },
    {
        "text": "VoiceSeparationFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "VoiceSeparationFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Not implemented\nAverage separation in semitones between the average pitches of consecutive\nchannels (after sorting based/non-average pitch) that contain at least one note.",
        "type": "ListItem"
    },
    {
        "text": "VoiceSeparationFeature bases",
        "type": "Title"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "VoiceSeparationFeature methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() process() setData()",
        "type": "Table"
    },
    {
        "text": "WoodwindsFractionFeature\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "WoodwindsFractionFeature",
        "type": "Title"
    },
    {
        "text": "dataOrStream",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Fraction of all Note Ons belonging to woodwind patches\n(General MIDI patches 69 through 76).\nTODO: Conflict in source: does 69-79?\n>>> s1 = stream.Stream()\n>>> s1.append(instrument.Flute())\n>>> s1.repeatAppend(note.Note(), 3)\n>>> s1.append(instrument.Tuba())\n>>> s1.repeatAppend(note.Note(), 7)\n>>> fe = features.jSymbolic.WoodwindsFractionFeature(s1)\n>>> print(fe.extract().vector[0])\n0.3",
        "type": "ListItem"
    },
    {
        "text": "WoodwindsFractionFeature bases",
        "type": "Title"
    },
    {
        "text": "InstrumentFractionFeature",
        "type": "ListItem"
    },
    {
        "text": "FeatureExtractor",
        "type": "ListItem"
    },
    {
        "text": "WoodwindsFractionFeature methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from InstrumentFractionFeature:",
        "type": "NarrativeText"
    },
    {
        "text": "process()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from FeatureExtractor:",
        "type": "NarrativeText"
    },
    {
        "text": "extract() fillFeatureAttributes() getAttributeLabels() getBlankFeature() prepareFeature() setData()",
        "type": "Table"
    },
    {
        "text": "Functions\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "getCompletionStats",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": ">>> features.jSymbolic.getCompletionStats()\ncompletion stats: 72/112 (0.6428...)",
        "type": "ListItem"
    },
    {
        "text": "music21.features.jSymbolic.",
        "type": "Title"
    },
    {
        "text": "getExtractorByTypeAndNumber",
        "type": "Title"
    },
    {
        "text": "extractorType",
        "type": "Title"
    },
    {
        "text": "number",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Typical usage:\n>>> t5 = features.jSymbolic.getExtractorByTypeAndNumber('T', 5)\n>>> t5.__name__\n'VoiceEqualityNoteDurationFeature'\n>>> bachExample = corpus.parse('bach/bwv66.6')\n>>> fe = t5(bachExample)\n\n\nFeatures unimplemented in jSymbolic but documented in the dissertation return None\n>>> features.jSymbolic.getExtractorByTypeAndNumber('C', 20) is None\nTrue\n\n\nTotally unknown features return an exception:\n>>> features.jSymbolic.getExtractorByTypeAndNumber('L', 900)\nTraceback (most recent call last):\nmusic21.features.jSymbolic.JSymbolicFeatureException: Could not find\n    any jSymbolic features of type L\n\n\n>>> features.jSymbolic.getExtractorByTypeAndNumber('C', 200)\nTraceback (most recent call last):\nmusic21.features.jSymbolic.JSymbolicFeatureException: jSymbolic\n    features of type C do not have number 200\n\n\nYou could also find all the feature extractors this way:\n>>> fs = features.jSymbolic.extractorsById\n>>> for k in fs:\n...     for i in range(len(fs[k])):\n...       if fs[k][i] is not None:\n...         n = fs[k][i].__name__\n...         if fs[k][i] not in features.jSymbolic.featureExtractors:\n...            n += ' (not implemented)'\n...         print(f'{k} {i} {n}')\nD 1 OverallDynamicRangeFeature (not implemented)\nD 2 VariationOfDynamicsFeature (not implemented)\nD 3 VariationOfDynamicsInEachVoiceFeature (not implemented)\nD 4 AverageNoteToNoteDynamicsChangeFeature (not implemented)\nI 1 PitchedInstrumentsPresentFeature\nI 2 UnpitchedInstrumentsPresentFeature (not implemented)\nI 3 NotePrevalenceOfPitchedInstrumentsFeature\nI 4 NotePrevalenceOfUnpitchedInstrumentsFeature (not implemented)\nI 5 TimePrevalenceOfPitchedInstrumentsFeature (not implemented)\nI 6 VariabilityOfNotePrevalenceOfPitchedInstrumentsFeature\nI 7 VariabilityOfNotePrevalenceOfUnpitchedInstrumentsFeature (not implemented)\nI 8 NumberOfPitchedInstrumentsFeature\nI 9 NumberOfUnpitchedInstrumentsFeature (not implemented)\nI 10 PercussionPrevalenceFeature (not implemented)\nI 11 StringKeyboardFractionFeature\nI 12 AcousticGuitarFractionFeature\nI 13 ElectricGuitarFractionFeature\nI 14 ViolinFractionFeature\nI 15 SaxophoneFractionFeature\nI 16 BrassFractionFeature\nI 17 WoodwindsFractionFeature\nI 18 OrchestralStringsFractionFeature\nI 19 StringEnsembleFractionFeature\nI 20 ElectricInstrumentFractionFeature\nM 1 MelodicIntervalHistogramFeature\nM 2 AverageMelodicIntervalFeature\nM 3 MostCommonMelodicIntervalFeature\nM 4 DistanceBetweenMostCommonMelodicIntervalsFeature\nM 5 MostCommonMelodicIntervalPrevalenceFeature\nM 6 RelativeStrengthOfMostCommonIntervalsFeature\nM 7 NumberOfCommonMelodicIntervalsFeature\nM 8 AmountOfArpeggiationFeature\nM 9 RepeatedNotesFeature\nM 10 ChromaticMotionFeature\nM 11 StepwiseMotionFeature\nM 12 MelodicThirdsFeature\nM 13 MelodicFifthsFeature\nM 14 MelodicTritonesFeature\nM 15 MelodicOctavesFeature\nM 17 DirectionOfMotionFeature\nM 18 DurationOfMelodicArcsFeature\nM 19 SizeOfMelodicArcsFeature\nP 1 MostCommonPitchPrevalenceFeature\nP 2 MostCommonPitchClassPrevalenceFeature\nP 3 RelativeStrengthOfTopPitchesFeature\nP 4 RelativeStrengthOfTopPitchClassesFeature\nP 5 IntervalBetweenStrongestPitchesFeature\nP 6 IntervalBetweenStrongestPitchClassesFeature\nP 7 NumberOfCommonPitchesFeature\nP 8 PitchVarietyFeature\nP 9 PitchClassVarietyFeature\nP 10 RangeFeature\nP 11 MostCommonPitchFeature\nP 12 PrimaryRegisterFeature\nP 13 ImportanceOfBassRegisterFeature\nP 14 ImportanceOfMiddleRegisterFeature\nP 15 ImportanceOfHighRegisterFeature\nP 16 MostCommonPitchClassFeature\nP 17 DominantSpreadFeature (not implemented)\nP 18 StrongTonalCentresFeature (not implemented)\nP 19 BasicPitchHistogramFeature\nP 20 PitchClassDistributionFeature\nP 21 FifthsPitchHistogramFeature\nP 22 QualityFeature\nP 23 GlissandoPrevalenceFeature (not implemented)\nP 24 AverageRangeOfGlissandosFeature (not implemented)\nP 25 VibratoPrevalenceFeature (not implemented)\nR 1 StrongestRhythmicPulseFeature (not implemented)\nR 2 SecondStrongestRhythmicPulseFeature (not implemented)\nR 3 HarmonicityOfTwoStrongestRhythmicPulsesFeature (not implemented)\nR 4 StrengthOfStrongestRhythmicPulseFeature (not implemented)\nR 5 StrengthOfSecondStrongestRhythmicPulseFeature (not implemented)\nR 6 StrengthRatioOfTwoStrongestRhythmicPulsesFeature (not implemented)\nR 7 CombinedStrengthOfTwoStrongestRhythmicPulsesFeature (not implemented)\nR 8 NumberOfStrongPulsesFeature (not implemented)\nR 9 NumberOfModeratePulsesFeature (not implemented)\nR 10 NumberOfRelativelyStrongPulsesFeature (not implemented)\nR 11 RhythmicLoosenessFeature (not implemented)\nR 12 PolyrhythmsFeature (not implemented)\nR 13 RhythmicVariabilityFeature (not implemented)\nR 14 BeatHistogramFeature (not implemented)\nR 15 NoteDensityFeature\nR 17 AverageNoteDurationFeature\nR 18 VariabilityOfNoteDurationFeature\nR 19 MaximumNoteDurationFeature\nR 20 MinimumNoteDurationFeature\nR 21 StaccatoIncidenceFeature\nR 22 AverageTimeBetweenAttacksFeature\nR 23 VariabilityOfTimeBetweenAttacksFeature\nR 24 AverageTimeBetweenAttacksForEachVoiceFeature\nR 25 AverageVariabilityOfTimeBetweenAttacksForEachVoiceFeature\nR 30 InitialTempoFeature\nR 31 InitialTimeSignatureFeature\nR 32 CompoundOrSimpleMeterFeature\nR 33 TripleMeterFeature\nR 34 QuintupleMeterFeature\nR 35 ChangesOfMeterFeature\nR 36 DurationFeature\nT 1 MaximumNumberOfIndependentVoicesFeature\nT 2 AverageNumberOfIndependentVoicesFeature\nT 3 VariabilityOfNumberOfIndependentVoicesFeature\nT 4 VoiceEqualityNumberOfNotesFeature (not implemented)\nT 5 VoiceEqualityNoteDurationFeature (not implemented)\nT 6 VoiceEqualityDynamicsFeature (not implemented)\nT 7 VoiceEqualityMelodicLeapsFeature (not implemented)\nT 8 VoiceEqualityRangeFeature (not implemented)\nT 9 ImportanceOfLoudestVoiceFeature (not implemented)\nT 10 RelativeRangeOfLoudestVoiceFeature (not implemented)\nT 12 RangeOfHighestLineFeature (not implemented)\nT 13 RelativeNoteDensityOfHighestLineFeature (not implemented)\nT 15 MelodicIntervalsInLowestLineFeature (not implemented)\nT 20 VoiceSeparationFeature (not implemented)",
        "type": "ListItem"
    },
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.features.jSymbolic",
        "type": "ListItem"
    },
    {
        "text": "\u00a9 Copyright 2006-2023 Michael Scott Asato Cuthbert.\n      Last updated on Jun 12, 2023.",
        "type": "NarrativeText"
    }
]