[
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.figuredBass.realizer",
        "type": "ListItem"
    },
    {
        "text": "Previous topic",
        "type": "Title"
    },
    {
        "text": "music21.figuredBass.possibility",
        "type": "Title"
    },
    {
        "text": "Next topic",
        "type": "Title"
    },
    {
        "text": "music21.figuredBass.realizerScale",
        "type": "Title"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "music21.figuredBass.realizer\nFiguredBassLine\nFiguredBassLine\nFiguredBassLine.addElement()\nFiguredBassLine.generateBassLine()\nFiguredBassLine.overlayPart()\nFiguredBassLine.realize()\nFiguredBassLine.retrieveSegments()\nFiguredBassLine.inKey\nFiguredBassLine.inTime\n\n\n\n\nRealization\nRealization\nRealization.generateAllRealizations()\nRealization.generateRandomRealization()\nRealization.generateRandomRealizations()\nRealization.generateRealizationFromPossibilityProgression()\nRealization.getAllPossibilityProgressions()\nRealization.getNumSolutions()\nRealization.getRandomPossibilityProgression()\nRealization.keyboardStyleOutput\n\n\n\n\nFunctions\nfiguredBassFromStream()\naddLyricsToBassNote()",
        "type": "ListItem"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "About music21",
        "type": "ListItem"
    },
    {
        "text": "User's Guide",
        "type": "ListItem"
    },
    {
        "text": "Module Reference",
        "type": "ListItem"
    },
    {
        "text": "Installation",
        "type": "ListItem"
    },
    {
        "text": "Developer Reference",
        "type": "ListItem"
    },
    {
        "text": "Documentation and tests in progress",
        "type": "ListItem"
    },
    {
        "text": "Quick search",
        "type": "Title"
    },
    {
        "text": "This Page",
        "type": "Title"
    },
    {
        "text": "Show Source",
        "type": "ListItem"
    },
    {
        "text": "music21.figuredBass.realizer\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "This module, the heart of fbRealizer, is all about realizing\na bass line of (bassNote, notationString)\npairs. All it takes to create well-formed realizations of a\nbass line is a few lines of music21 code,\nfrom start to finish. See FiguredBassLine for more details.",
        "type": "NarrativeText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "from",
        "type": "Title"
    },
    {
        "text": "music21.figuredBass",
        "type": "Title"
    },
    {
        "text": "import",
        "type": "Title"
    },
    {
        "text": "realizer",
        "type": "Title"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "fbLine",
        "type": "Title"
    },
    {
        "text": "realizer",
        "type": "Title"
    },
    {
        "text": "FiguredBassLine",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "fbLine",
        "type": "Title"
    },
    {
        "text": "addElement",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "'C3'",
        "type": "UncategorizedText"
    },
    {
        "text": "))",
        "type": "UncategorizedText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "fbLine",
        "type": "Title"
    },
    {
        "text": "addElement",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "'D3'",
        "type": "UncategorizedText"
    },
    {
        "text": "),",
        "type": "UncategorizedText"
    },
    {
        "text": "'4,3'",
        "type": "UncategorizedText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "fbLine",
        "type": "Title"
    },
    {
        "text": "addElement",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "'C3'",
        "type": "UncategorizedText"
    },
    {
        "text": "quarterLength",
        "type": "Title"
    },
    {
        "text": "2.0",
        "type": "UncategorizedText"
    },
    {
        "text": "))",
        "type": "UncategorizedText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "allSols",
        "type": "Title"
    },
    {
        "text": "fbLine",
        "type": "Title"
    },
    {
        "text": "realize",
        "type": "NarrativeText"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "allSols",
        "type": "Title"
    },
    {
        "text": "getNumSolutions",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "30",
        "type": "UncategorizedText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "allSols",
        "type": "Title"
    },
    {
        "text": "generateRandomRealizations",
        "type": "Title"
    },
    {
        "text": "14",
        "type": "UncategorizedText"
    },
    {
        "text": "show",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "The same can be accomplished by taking the notes and notations\nfrom a Stream.\nSee figuredBassFromStream() for more details.",
        "type": "NarrativeText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "converter",
        "type": "Title"
    },
    {
        "text": "parse",
        "type": "Title"
    },
    {
        "text": "'tinynotation: C4 D4_4,3 C2'",
        "type": "Title"
    },
    {
        "text": "makeNotation",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "fbLine",
        "type": "Title"
    },
    {
        "text": "realizer",
        "type": "Title"
    },
    {
        "text": "figuredBassFromStream",
        "type": "Title"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "allSols2",
        "type": "Title"
    },
    {
        "text": "fbLine",
        "type": "Title"
    },
    {
        "text": "realize",
        "type": "NarrativeText"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "allSols2",
        "type": "Title"
    },
    {
        "text": "getNumSolutions",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "30",
        "type": "UncategorizedText"
    },
    {
        "text": "FiguredBassLine\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.figuredBass.realizer.",
        "type": "Title"
    },
    {
        "text": "FiguredBassLine",
        "type": "Title"
    },
    {
        "text": "inKey",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "inTime",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A FiguredBassLine is an interface for realization of a line of (bassNote, notationString) pairs.\nCurrently, only 1:1 realization is supported, meaning that every bassNote is realized and the\nquarterLength or duration of a realization above a bassNote\nis identical to that of the bassNote.\ninKey defaults to C major.\ninTime defaults to 4/4.\n>>> from music21.figuredBass import realizer\n>>> fbLine = realizer.FiguredBassLine(key.Key('B'), meter.TimeSignature('3/4'))\n>>> fbLine.inKey\n<music21.key.Key of B major>\n>>> fbLine.inTime\n<music21.meter.TimeSignature 3/4>",
        "type": "ListItem"
    },
    {
        "text": "FiguredBassLine methods",
        "type": "Title"
    },
    {
        "text": "FiguredBassLine.",
        "type": "Title"
    },
    {
        "text": "addElement",
        "type": "Title"
    },
    {
        "text": "bassObject",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "notationString",
        "type": "NarrativeText"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Use this method to add (bassNote, notationString) pairs to the bass line. Elements\nare realized in the order they are added.\n>>> from music21.figuredBass import realizer\n>>> fbLine = realizer.FiguredBassLine(key.Key('B'), meter.TimeSignature('3/4'))\n>>> fbLine.addElement(note.Note('B2'))\n>>> fbLine.addElement(note.Note('C#3'), '6')\n>>> fbLine.addElement(note.Note('D#3'), '6')\n>>> fbLine.generateBassLine().show()",
        "type": "ListItem"
    },
    {
        "text": "FiguredBassLine.",
        "type": "Title"
    },
    {
        "text": "generateBassLine",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Generates the bass line as a Score.\n>>> from music21.figuredBass import realizer\n>>> fbLine = realizer.FiguredBassLine(key.Key('B'), meter.TimeSignature('3/4'))\n>>> fbLine.addElement(note.Note('B2'))\n>>> fbLine.addElement(note.Note('C#3'), '6')\n>>> fbLine.addElement(note.Note('D#3'), '6')\n>>> fbLine.generateBassLine().show()\n\n\n\n>>> sBach = corpus.parse('bach/bwv307')\n>>> sBach.parts.last().measure(0).show('text')\n{0.0} ...\n{0.0} <music21.clef.BassClef>\n{0.0} <music21.key.Key of B- major>\n{0.0} <music21.meter.TimeSignature 4/4>\n{0.0} <music21.note.Note B->\n{0.5} <music21.note.Note C>\n\n\n>>> fbLine = realizer.figuredBassFromStream(sBach.parts.last())\n>>> fbLine.generateBassLine().measure(1).show('text')\n{0.0} <music21.clef.BassClef>\n{0.0} <music21.key.KeySignature of 2 flats>\n{0.0} <music21.meter.TimeSignature 4/4>\n{3.0} <music21.note.Note B->\n{3.5} <music21.note.Note C>",
        "type": "ListItem"
    },
    {
        "text": "FiguredBassLine.",
        "type": "Title"
    },
    {
        "text": "overlayPart",
        "type": "Title"
    },
    {
        "text": "music21Part",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "FiguredBassLine.",
        "type": "Title"
    },
    {
        "text": "realize",
        "type": "NarrativeText"
    },
    {
        "text": "fbRules",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "numParts",
        "type": "Title"
    },
    {
        "text": "maxPitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Creates a Segment\nfor each (bassNote, notationString) pair\nadded using addElement().\nEach Segment is associated\nwith the Rules object provided, meaning that rules are\nuniversally applied across all Segments. The number of parts in a realization\n(including the bass) can be controlled through numParts, and the maximum pitch can\nlikewise be controlled through maxPitch.\nReturns a Realization.\nIf this method is called without having provided any (bassNote, notationString) pairs,\na FiguredBassLineException is raised. If only one pair is provided, the Realization will\ncontain allCorrectConsecutivePossibilities()\nfor the one note.\nif fbRules is None, creates a new rules.Rules() object\nif maxPitch is None, uses pitch.Pitch(\u0098B5')\n>>> from music21.figuredBass import realizer\n>>> from music21.figuredBass import rules\n>>> fbLine = realizer.FiguredBassLine(key.Key('B'), meter.TimeSignature('3/4'))\n>>> fbLine.addElement(note.Note('B2'))\n>>> fbLine.addElement(note.Note('C#3'), '6')\n>>> fbLine.addElement(note.Note('D#3'), '6')\n>>> fbRules = rules.Rules()\n>>> r1 = fbLine.realize(fbRules)\n>>> r1.getNumSolutions()\n208\n>>> fbRules.forbidVoiceOverlap = False\n>>> r2 = fbLine.realize(fbRules)\n>>> r2.getNumSolutions()\n7908",
        "type": "ListItem"
    },
    {
        "text": "FiguredBassLine.",
        "type": "Title"
    },
    {
        "text": "retrieveSegments",
        "type": "Title"
    },
    {
        "text": "fbRules",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "numParts",
        "type": "Title"
    },
    {
        "text": "maxPitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "generates the segmentList from an fbList, including any overlaid Segments\nif fbRules is None, creates a new rules.Rules() object\nif maxPitch is None, uses pitch.Pitch(\u0098B5')",
        "type": "ListItem"
    },
    {
        "text": "FiguredBassLine instance variables",
        "type": "Title"
    },
    {
        "text": "FiguredBassLine.",
        "type": "Title"
    },
    {
        "text": "inKey",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A Key which implies a scale value,\nscale mode, and key signature for a\nFiguredBassScale.",
        "type": "ListItem"
    },
    {
        "text": "FiguredBassLine.",
        "type": "Title"
    },
    {
        "text": "inTime",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A TimeSignature which specifies the\ntime signature of realizations outputted to a\nScore.",
        "type": "ListItem"
    },
    {
        "text": "Realization\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.figuredBass.realizer.",
        "type": "Title"
    },
    {
        "text": "Realization",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "fbLineOutputs",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returned by FiguredBassLine after calling\nrealize(). Allows for the\ngeneration of realizations as a Score.\n\nSee the examples module for examples on the generation\nof realizations.\nA possibility progression is a valid progression through a string of\nSegment instances.\nSee possibility for more details on possibilities.",
        "type": "ListItem"
    },
    {
        "text": "Realization methods",
        "type": "Title"
    },
    {
        "text": "Realization.",
        "type": "Title"
    },
    {
        "text": "generateAllRealizations",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Generates all unique realizations as a Score.\n\nWarning\nThis method is unoptimized, and may take a prohibitive amount\nof time for a Realization which has more than 100 solutions.",
        "type": "ListItem"
    },
    {
        "text": "Realization.",
        "type": "Title"
    },
    {
        "text": "generateRandomRealization",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Generates a random unique realization as a Score.",
        "type": "ListItem"
    },
    {
        "text": "Realization.",
        "type": "Title"
    },
    {
        "text": "generateRandomRealizations",
        "type": "Title"
    },
    {
        "text": "amountToGenerate",
        "type": "Title"
    },
    {
        "text": "20",
        "type": "UncategorizedText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Generates amountToGenerate unique realizations as a Score.\n\nWarning\nThis method is unoptimized, and may take a prohibitive amount\nof time if amountToGenerate is more than 100.",
        "type": "ListItem"
    },
    {
        "text": "Realization.",
        "type": "Title"
    },
    {
        "text": "generateRealizationFromPossibilityProgression",
        "type": "Title"
    },
    {
        "text": "possibilityProgression",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Generates a realization as a Score given a possibility progression.",
        "type": "ListItem"
    },
    {
        "text": "Realization.",
        "type": "Title"
    },
    {
        "text": "getAllPossibilityProgressions",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Compiles each unique possibility progression, adding\nit to a master list. Returns the master list.\n\nWarning\nThis method is unoptimized, and may take a prohibitive amount\nof time for a Realization which has more than 200,000 solutions.",
        "type": "ListItem"
    },
    {
        "text": "Realization.",
        "type": "Title"
    },
    {
        "text": "getNumSolutions",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns the number of solutions (unique realizations) to a Realization by calculating\nthe total number of paths through a string of Segment\nmovements. This is faster and more efficient than compiling each unique realization into a\nlist, adding it to a master list, and then taking the length of the master list.\n>>> from music21.figuredBass import examples\n>>> fbLine = examples.exampleB()\n>>> fbRealization = fbLine.realize()\n>>> fbRealization.getNumSolutions()\n422\n>>> fbLine2 = examples.exampleC()\n>>> fbRealization2 = fbLine2.realize()\n>>> fbRealization2.getNumSolutions()\n833",
        "type": "ListItem"
    },
    {
        "text": "Realization.",
        "type": "Title"
    },
    {
        "text": "getRandomPossibilityProgression",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns a random unique possibility progression.",
        "type": "ListItem"
    },
    {
        "text": "Realization instance variables",
        "type": "Title"
    },
    {
        "text": "Realization.",
        "type": "Title"
    },
    {
        "text": "keyboardStyleOutput",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "True by default. If True, generated realizations\nare represented in keyboard style, with two staves. If False,\nrealizations are represented in chorale style with n staves,\nwhere n is the number of parts. SATB if n = 4.",
        "type": "ListItem"
    },
    {
        "text": "Functions\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "music21.figuredBass.realizer.",
        "type": "Title"
    },
    {
        "text": "figuredBassFromStream",
        "type": "Title"
    },
    {
        "text": "streamPart",
        "type": "Title"
    },
    {
        "text": "Stream",
        "type": "Title"
    },
    {
        "text": "\u2192 FiguredBassLine",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Takes a Part (or another Stream subclass)\nand returns a FiguredBassLine object whose bass notes\nhave notations taken from the lyrics in the source stream. This method along with the\nrealize() method provide the easiest\nway of converting from a notated version of a figured bass (such as in a MusicXML file) to\na realized version of the same line.\n>>> s = converter.parse('tinynotation: 4/4 C4 D8_6 E8_6 F4 G4_7 c1', makeNotation=False)\n>>> fb = figuredBass.realizer.figuredBassFromStream(s)\n>>> fb\n<music21.figuredBass.realizer.FiguredBassLine object at 0x...>\n\n\n>>> fbRules = figuredBass.rules.Rules()\n>>> fbRules.partMovementLimits = [(1, 2), (2, 12), (3, 12)]\n>>> fbRealization = fb.realize(fbRules)\n>>> fbRealization.getNumSolutions()\n13\n>>> fbRealization.generateRandomRealizations(8).show()\n\n\n\n\nChanged in v7.3: multiple figures in same lyric (e.g. \u009864') now supported.",
        "type": "ListItem"
    },
    {
        "text": "music21.figuredBass.realizer.",
        "type": "Title"
    },
    {
        "text": "addLyricsToBassNote",
        "type": "Title"
    },
    {
        "text": "bassNote",
        "type": "Title"
    },
    {
        "text": "notationString",
        "type": "NarrativeText"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Takes in a bassNote and a corresponding notationString as arguments.\nAdds the parsed notationString as lyrics to the bassNote, which is\nuseful when displaying the figured bass in external software.\n>>> from music21.figuredBass import realizer\n>>> n1 = note.Note('G3')\n>>> realizer.addLyricsToBassNote(n1, '6,4')\n>>> n1.lyrics[0].text\n'6'\n>>> n1.lyrics[1].text\n'4'\n>>> n1.show()",
        "type": "ListItem"
    },
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.figuredBass.realizer",
        "type": "ListItem"
    },
    {
        "text": "\u00a9 Copyright 2006-2023 Michael Scott Asato Cuthbert.\n      Last updated on Jun 12, 2023.",
        "type": "NarrativeText"
    }
]