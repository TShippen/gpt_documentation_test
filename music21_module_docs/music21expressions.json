[
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.expressions",
        "type": "ListItem"
    },
    {
        "text": "Previous topic",
        "type": "Title"
    },
    {
        "text": "music21.environment",
        "type": "Title"
    },
    {
        "text": "Next topic",
        "type": "Title"
    },
    {
        "text": "music21.features.base",
        "type": "Title"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "music21.expressions\nTextExpression\nTextExpression\nTextExpression.content\nTextExpression.enclosure\nTextExpression.getRepeatExpression()\nTextExpression.getTempoText()\nTextExpression.placement\n\n\n\n\nAppoggiatura\nAppoggiatura\n\n\nArpeggioMark\nArpeggioMark\n\n\nArpeggioMarkSpanner\nArpeggioMarkSpanner\nArpeggioMarkSpanner.noteExtremes()\n\n\n\n\nExpression\nExpression\nExpression.name\n\n\n\n\nFermata\nFermata\n\n\nGeneralAppoggiatura\nGeneralAppoggiatura\nGeneralAppoggiatura.realize()\n\n\n\n\nGeneralMordent\nGeneralMordent\nGeneralMordent.direction\nGeneralMordent.name\nGeneralMordent.ornamentalPitch\nGeneralMordent.ornamentalPitches\nGeneralMordent.accidental\nGeneralMordent.getSize()\nGeneralMordent.realize()\nGeneralMordent.resolveOrnamentalPitches()\nGeneralMordent.updateAccidentalDisplay()\n\n\n\n\nHalfStepAppoggiatura\nHalfStepAppoggiatura\n\n\nHalfStepInvertedAppoggiatura\nHalfStepInvertedAppoggiatura\n\n\nHalfStepInvertedMordent\nHalfStepInvertedMordent\nHalfStepInvertedMordent.accidental\nHalfStepInvertedMordent.getSize()\n\n\n\n\nHalfStepMordent\nHalfStepMordent\nHalfStepMordent.accidental\nHalfStepMordent.getSize()\n\n\n\n\nHalfStepTrill\nHalfStepTrill\nHalfStepTrill.accidental\nHalfStepTrill.getSize()\n\n\n\n\nInvertedAppoggiatura\nInvertedAppoggiatura\n\n\nInvertedMordent\nInvertedMordent\n\n\nInvertedTrill\nInvertedTrill\n\n\nInvertedTurn\nInvertedTurn\n\n\nMordent\nMordent\n\n\nOrnament\nOrnament\nOrnament.ornamentalPitches\nOrnament.fillListOfRealizedNotes()\nOrnament.realize()\nOrnament.resolveOrnamentalPitches()\nOrnament.updateAccidentalDisplay()\n\n\n\n\nRehearsalMark\nRehearsalMark\nRehearsalMark.nextContent()\nRehearsalMark.nextMark()\n\n\n\n\nSchleifer\nSchleifer\n\n\nShake\nShake\n\n\nTremolo\nTremolo\nTremolo.numberOfMarks\nTremolo.realize()\n\n\n\n\nTremoloSpanner\nTremoloSpanner\nTremoloSpanner.numberOfMarks\n\n\n\n\nTrill\nTrill\nTrill.direction\nTrill.name\nTrill.ornamentalPitch\nTrill.ornamentalPitches\nTrill.accidental\nTrill.getSize()\nTrill.realize()\nTrill.resolveOrnamentalPitches()\nTrill.splitClient()\nTrill.updateAccidentalDisplay()\n\n\n\n\nTrillExtension\nTrillExtension\nTrillExtension.placement\n\n\n\n\nTurn\nTurn\nTurn.isDelayed\nTurn.lowerOrnamentalPitch\nTurn.name\nTurn.ornamentalPitches\nTurn.upperOrnamentalPitch\nTurn.delay\nTurn.lowerAccidental\nTurn.upperAccidental\nTurn.getSize()\nTurn.realize()\nTurn.resolveOrnamentalPitches()\nTurn.updateAccidentalDisplay()\n\n\n\n\nWholeStepAppoggiatura\nWholeStepAppoggiatura\n\n\nWholeStepInvertedAppoggiatura\nWholeStepInvertedAppoggiatura\n\n\nWholeStepInvertedMordent\nWholeStepInvertedMordent\nWholeStepInvertedMordent.accidental\nWholeStepInvertedMordent.getSize()\n\n\n\n\nWholeStepMordent\nWholeStepMordent\nWholeStepMordent.accidental\nWholeStepMordent.getSize()\n\n\n\n\nWholeStepTrill\nWholeStepTrill\nWholeStepTrill.accidental\nWholeStepTrill.getSize()\n\n\n\n\nFunctions\nisUnison()\nrealizeOrnaments()",
        "type": "ListItem"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "About music21",
        "type": "ListItem"
    },
    {
        "text": "User's Guide",
        "type": "ListItem"
    },
    {
        "text": "Module Reference",
        "type": "ListItem"
    },
    {
        "text": "Installation",
        "type": "ListItem"
    },
    {
        "text": "Developer Reference",
        "type": "ListItem"
    },
    {
        "text": "Documentation and tests in progress",
        "type": "ListItem"
    },
    {
        "text": "Quick search",
        "type": "Title"
    },
    {
        "text": "This Page",
        "type": "Title"
    },
    {
        "text": "Show Source",
        "type": "ListItem"
    },
    {
        "text": "music21.expressions\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "This module provides object representations of expressions, that is\nnotational symbols such as Fermatas, Mordents, Trills, Turns, etc.\nwhich are stored under a Music21Object's .expressions attribute.",
        "type": "NarrativeText"
    },
    {
        "text": "A sub-category of Expressions are Ornaments.",
        "type": "Title"
    },
    {
        "text": "Unlike articulations, expressions can be attached to the Stream itself.\nFor instance, TextExpressions.",
        "type": "NarrativeText"
    },
    {
        "text": "TextExpression\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "TextExpression",
        "type": "Title"
    },
    {
        "text": "content",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A TextExpression is a word, phrase, or similar\nbit of text that is positioned in a Stream or Measure.\nConventional expressive indications are text\nlike \u009cagitato\u009d or \u009ccon fuoco.\u009d\n>>> te = expressions.TextExpression('Con fuoco')\n>>> te.content\n'Con fuoco'\n\n\nMost configuration of style is done\non the .style TextStyle object\nitself.\n>>> te.style.fontSize = 24.0\n>>> te.style.fontSize\n24\n>>> te.style.fontStyle = 'italic'\n>>> te.style.fontWeight = 'bold'\n>>> te.style.letterSpacing = 0.5",
        "type": "ListItem"
    },
    {
        "text": "TextExpression bases",
        "type": "Title"
    },
    {
        "text": "Expression",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "TextExpression read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Expression:",
        "type": "NarrativeText"
    },
    {
        "text": "name",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "TextExpression read/write properties",
        "type": "Title"
    },
    {
        "text": "TextExpression.",
        "type": "Title"
    },
    {
        "text": "content",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get or set the content.\n>>> te = expressions.TextExpression('dolce')\n>>> te.content\n'dolce'\n>>> te.content = 'sweeter'\n>>> te\n<music21.expressions.TextExpression 'sweeter'>",
        "type": "ListItem"
    },
    {
        "text": "TextExpression.",
        "type": "Title"
    },
    {
        "text": "enclosure",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns or sets the enclosure on the Style object\nstored on .style.\nExposed directly on the expression for backwards\ncompatibility.  Does not create a .style object if\none does not exist and the value is None.\n>>> te = expressions.TextExpression('Bridge')\n>>> te.enclosure is None\nTrue\n>>> te.enclosure = style.Enclosure.RECTANGLE\n>>> te.enclosure\n<Enclosure.RECTANGLE>\n\n\nNote that this is also set on .style.\n>>> te.style.enclosure\n<Enclosure.RECTANGLE>",
        "type": "ListItem"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "TextExpression methods",
        "type": "Title"
    },
    {
        "text": "TextExpression.",
        "type": "Title"
    },
    {
        "text": "getRepeatExpression",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "If this TextExpression can be a RepeatExpression,\nreturn a new RepeatExpression.\nobject, otherwise, return None.",
        "type": "ListItem"
    },
    {
        "text": "TextExpression.",
        "type": "Title"
    },
    {
        "text": "getTempoText",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "TextExpression instance variables",
        "type": "Title"
    },
    {
        "text": "TextExpression.",
        "type": "Title"
    },
    {
        "text": "placement",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Staff placement: \u0098above', \u0098below', or None.\nA setting of None implies that the placement will be determined\nby notation software and no particular placement is demanded.\nThis is not placed in the .style property, since for some\nexpressions, the placement above or below an object has semantic\nmeaning and is not purely presentational.",
        "type": "ListItem"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "Appoggiatura\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "Appoggiatura",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Appoggiatura bases",
        "type": "Title"
    },
    {
        "text": "GeneralAppoggiatura",
        "type": "ListItem"
    },
    {
        "text": "Ornament",
        "type": "ListItem"
    },
    {
        "text": "Expression",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "Appoggiatura read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "ornamentalPitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Expression:",
        "type": "NarrativeText"
    },
    {
        "text": "name",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "Appoggiatura read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "Appoggiatura methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from GeneralAppoggiatura:",
        "type": "NarrativeText"
    },
    {
        "text": "realize()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "fillListOfRealizedNotes() resolveOrnamentalPitches() updateAccidentalDisplay()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "Appoggiatura instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "ArpeggioMark\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "ArpeggioMark",
        "type": "Title"
    },
    {
        "text": "arpeggioType",
        "type": "Title"
    },
    {
        "text": "str | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "ArpeggioMark must be applied to a Chord (not to a single Note).\nThe parameter arpeggioType can be \u0098normal' (a squiggly line), \u0098up' (a squiggly line\nwith an up arrow), \u0098down' (a squiggly line with a down arrow), or \u0098non-arpeggio' (a\nbracket instead of a squiggly line, used to indicate a non-arpeggiated chord\nintervening in a sequence of arpeggiated ones).\n>>> am = expressions.ArpeggioMark('normal')\n>>> am.type\n'normal'\n\n\n>>> am = expressions.ArpeggioMark('down')\n>>> am.type\n'down'",
        "type": "ListItem"
    },
    {
        "text": "ArpeggioMark bases",
        "type": "Title"
    },
    {
        "text": "Expression",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "ArpeggioMark read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Expression:",
        "type": "NarrativeText"
    },
    {
        "text": "name",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "ArpeggioMark read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "ArpeggioMark methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "ArpeggioMark instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "ArpeggioMarkSpanner\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "ArpeggioMarkSpanner",
        "type": "Title"
    },
    {
        "text": "spannedElements",
        "type": "Title"
    },
    {
        "text": "arpeggioType",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "'normal'",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "ArpeggioMarkSpanner is a multi-staff or multi-voice (i.e. multi-chord) arpeggio.\nThe spanner should contain all the simultaneous Chords that are to be\narpeggiated together.  If there is only one arpeggiated note in a particular staff\nor voice (i.e. the rest are in other staves/voices), then in that case only the\nspanner can contain a Note.  Do not ever put a Note that is within a Chord into a\nspanner; put the Chord in instead.  And do not ever put an ArpeggioMark in a note\nor chord's .expressions.\nThe parameter arpeggioType can be \u0098normal' (a squiggly line), \u0098up' (a squiggly line\nwith an up arrow), \u0098down' (a squiggly line with a down arrow), or \u0098non-arpeggio' (a\nbracket instead of a squiggly line, used to indicate a non-arpeggiated multi-chord\nintervening in a sequence of arpeggiated ones).\n>>> ams = expressions.ArpeggioMarkSpanner(arpeggioType='non-arpeggio')\n>>> c1 = chord.Chord('C3 E3 G3')\n>>> c2 = chord.Chord('C4 E4 G4')\n>>> ams.addSpannedElements([c1, c2])\n>>> ams.type\n'non-arpeggio'\n>>> ams\n<music21.expressions.ArpeggioMarkSpanner\n <music21.chord.Chord C3 E3 G3><music21.chord.Chord C4 E4 G4>>",
        "type": "ListItem"
    },
    {
        "text": "ArpeggioMarkSpanner bases",
        "type": "Title"
    },
    {
        "text": "Spanner",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "ArpeggioMarkSpanner read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "ArpeggioMarkSpanner read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "ArpeggioMarkSpanner methods",
        "type": "Title"
    },
    {
        "text": "ArpeggioMarkSpanner.",
        "type": "Title"
    },
    {
        "text": "noteExtremes",
        "type": "Title"
    },
    {
        "text": "\u2192 tuple[note.Note | None, note.Note | None]",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return the lowest and highest note spanned by the element,\nextracting them from Chords if need be.\n>>> ch = chord.Chord(['C4', 'E4', 'G4'])\n>>> n = note.Note('C#3')\n>>> nonArp = expressions.ArpeggioMarkSpanner([ch, n])\n>>> nonArp.noteExtremes()\n(<music21.note.Note C#>, <music21.note.Note G>)",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from Spanner:",
        "type": "NarrativeText"
    },
    {
        "text": "__getitem__() addSpannedElements() fill() getFirst() getLast() getSpannedElementIds() getSpannedElements() getSpannedElementsByClass() hasSpannedElement() isFirst() isLast() purgeLocations() purgeOrphans() replaceSpannedElement()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "ArpeggioMarkSpanner instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "Expression\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "Expression",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "This base class is inherited by many diverse expressions.",
        "type": "ListItem"
    },
    {
        "text": "Expression bases",
        "type": "Title"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "Expression read-only properties",
        "type": "Title"
    },
    {
        "text": "Expression.",
        "type": "Title"
    },
    {
        "text": "name",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "returns the name of the expression, which is generally the\nclass name lowercased and spaces where a new capital occurs.\nSubclasses can override this as necessary.\n>>> sc = expressions.Schleifer()\n>>> sc.name\n'schleifer'\n\n\n>>> iTurn = expressions.InvertedTurn()\n>>> iTurn.name\n'inverted turn'",
        "type": "ListItem"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "Expression read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "Expression methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "Expression instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "Fermata\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "Fermata",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Fermatas by default get appended to the last\nnote if a note is split because of measures.\nTo override this (for Fermatas or for any\nexpression) set .tieAttach to \u0098all' or \u0098first'\ninstead of \u0098last'.\n>>> p1 = stream.Part()\n>>> p1.append(meter.TimeSignature('6/8'))\n>>> n1 = note.Note('D-2')\n>>> n1.quarterLength = 6\n>>> n1.expressions.append(expressions.Fermata())\n>>> p1.append(n1)\n>>> p1.show()\n.. image:: images/expressionsFermata.*\n     :width: 193",
        "type": "ListItem"
    },
    {
        "text": "Fermata bases",
        "type": "Title"
    },
    {
        "text": "Expression",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "Fermata read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Expression:",
        "type": "NarrativeText"
    },
    {
        "text": "name",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "Fermata read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "Fermata methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "Fermata instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "GeneralAppoggiatura\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "GeneralAppoggiatura",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "GeneralAppoggiatura bases",
        "type": "Title"
    },
    {
        "text": "Ornament",
        "type": "ListItem"
    },
    {
        "text": "Expression",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "GeneralAppoggiatura read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "ornamentalPitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Expression:",
        "type": "NarrativeText"
    },
    {
        "text": "name",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "GeneralAppoggiatura read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "GeneralAppoggiatura methods",
        "type": "Title"
    },
    {
        "text": "GeneralAppoggiatura.",
        "type": "Title"
    },
    {
        "text": "realize",
        "type": "NarrativeText"
    },
    {
        "text": "srcObj",
        "type": "Title"
    },
    {
        "text": "note.Note | note.Unpitched",
        "type": "Title"
    },
    {
        "text": "keySig",
        "type": "Title"
    },
    {
        "text": "key.KeySignature | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "inPlace",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "\u2192 tuple[list[note.Note | note.Unpitched], note.Note | note.Unpitched | None, list[note.Note | note.Unpitched]]",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "realize an appoggiatura\nreturns a three-element tuple.\nThe first is the list of notes that the grace note was converted to.\nThe second is the rest of the note\nThe third is an empty list (since there are no notes at the end of an appoggiatura)\n>>> n1 = note.Note('C4')\n>>> n1.quarterLength = 0.5\n>>> a1 = expressions.Appoggiatura()\n>>> a1.realize(n1)\n([<music21.note.Note D>], <music21.note.Note C>, [])\n\n\n>>> n2 = note.Note('C4')\n>>> n2.quarterLength = 1\n>>> a2 = expressions.HalfStepInvertedAppoggiatura()\n>>> a2.realize(n2)\n([<music21.note.Note B>], <music21.note.Note C>, [])",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "fillListOfRealizedNotes() resolveOrnamentalPitches() updateAccidentalDisplay()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "GeneralAppoggiatura instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "GeneralMordent\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "GeneralMordent",
        "type": "Title"
    },
    {
        "text": "accidental",
        "type": "Title"
    },
    {
        "text": "Accidental | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Base class for all Mordent types.",
        "type": "ListItem"
    },
    {
        "text": "GeneralMordent bases",
        "type": "Title"
    },
    {
        "text": "Ornament",
        "type": "ListItem"
    },
    {
        "text": "Expression",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "GeneralMordent read-only properties",
        "type": "Title"
    },
    {
        "text": "GeneralMordent.",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The direction of the mordent's ornamental pitch from the main note.\nCan be \u0098up' or \u0098down'.",
        "type": "ListItem"
    },
    {
        "text": "GeneralMordent.",
        "type": "Title"
    },
    {
        "text": "name",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "returns the name of the Mordent/InvertedMordent, which is generally\nthe class name lowercased, with spaces where a new capital occurs. The\nname also will include any accidental, if it exists.\nSubclasses can override this as necessary.\n>>> mordent = expressions.Mordent()\n>>> mordent.name\n'mordent'\n\n\n>>> sharp = pitch.Accidental('sharp')\n>>> invertedMordent = expressions.InvertedMordent(accidental=sharp)\n>>> invertedMordent.name\n'inverted mordent (sharp)'",
        "type": "ListItem"
    },
    {
        "text": "GeneralMordent.",
        "type": "Title"
    },
    {
        "text": "ornamentalPitch",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns the mordent's ornamentalPitch.  If resolveOrnamentalPitches\nhas not yet been called, None is returned.",
        "type": "ListItem"
    },
    {
        "text": "GeneralMordent.",
        "type": "Title"
    },
    {
        "text": "ornamentalPitches",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns any ornamental pitch that has been resolved (see\nresolveOrnamentalPitches, which must be called first, or an\nempty tuple will be returned).",
        "type": "ListItem"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "GeneralMordent read/write properties",
        "type": "Title"
    },
    {
        "text": "GeneralMordent.",
        "type": "Title"
    },
    {
        "text": "accidental",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "This is the GeneralMordent's accidental.",
        "type": "ListItem"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "GeneralMordent methods",
        "type": "Title"
    },
    {
        "text": "GeneralMordent.",
        "type": "Title"
    },
    {
        "text": "getSize",
        "type": "Title"
    },
    {
        "text": "srcObj",
        "type": "Title"
    },
    {
        "text": "note.GeneralNote",
        "type": "Title"
    },
    {
        "text": "keySig",
        "type": "Title"
    },
    {
        "text": "key.KeySignature | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u2192 interval.IntervalBase",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns the size of the mordent's interval, given a source note and\nan optional key signature.  If the key signature is not specified, the\nsource note's context is searched for the current key signature, and if\nthere is no such key signature, a key signature with no sharps and no flats\nwill be used.  Any accidental that has been set on the mordent will also\nbe taken into account.  If no accidental has been set, the appropriate\naccidental from the key signature will be used.\nIf keySig is specified, this can be considered to be a theoretical question:\n\u009cIf this particular mordent were to be attached to this note, in this key,\nwhat would the size of the mordent interval be?\u009d",
        "type": "ListItem"
    },
    {
        "text": "GeneralMordent.",
        "type": "Title"
    },
    {
        "text": "realize",
        "type": "NarrativeText"
    },
    {
        "text": "srcObj",
        "type": "Title"
    },
    {
        "text": "note.Note | note.Unpitched",
        "type": "Title"
    },
    {
        "text": "keySig",
        "type": "Title"
    },
    {
        "text": "key.KeySignature | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "inPlace",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "\u2192 tuple[list[note.Note | note.Unpitched], note.Note | note.Unpitched | None, list[note.Note | note.Unpitched]]",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Realize a mordent.\nreturns a three-element tuple.\nThe first is a list of the two notes that the beginning of the note were converted to.\nThe second is the rest of the note.\nThe third is an empty list (since there are no notes at the end of a mordent).\n>>> n1 = note.Note('C4')\n>>> n1.quarterLength = 0.5\n>>> m1 = expressions.Mordent()\n>>> m1.realize(n1)\n([<music21.note.Note C>, <music21.note.Note B>], <music21.note.Note C>, [])\n\n\nNote: use one of the subclasses, not the GeneralMordent class\n>>> n2 = note.Note('C4')\n>>> n2.quarterLength = 0.125\n>>> m2 = expressions.GeneralMordent()\n>>> m2.realize(n2)\nTraceback (most recent call last):\nmusic21.expressions.ExpressionException: Cannot realize a mordent if I do not\n    know its direction",
        "type": "ListItem"
    },
    {
        "text": "GeneralMordent.",
        "type": "Title"
    },
    {
        "text": "resolveOrnamentalPitches",
        "type": "Title"
    },
    {
        "text": "srcObj",
        "type": "Title"
    },
    {
        "text": "note.GeneralNote",
        "type": "Title"
    },
    {
        "text": "keySig",
        "type": "Title"
    },
    {
        "text": "key.KeySignature | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Computes and stores the ornamental pitch for a GeneralMordent, given the srcObj\n(can be any kind of ornamented GeneralNote) and an optional keySig.\nIf keySig is None, srcNote's context will be searched for a key signature.\nIf no key signature is found, a key signature with no sharps and no flats\nwill be used.\nA mordent on a G in a key with no sharps or flats (ornamental pitch will be F).\n>>> noSharpsOrFlats = key.KeySignature(sharps=0)\n>>> n1 = note.Note('G4')\n>>> mordent = expressions.Mordent()\n>>> mordent.resolveOrnamentalPitches(n1, keySig=noSharpsOrFlats)\n>>> mordent.ornamentalPitches\n(<music21.pitch.Pitch F4>,)\n>>> mordent.ornamentalPitch\n<music21.pitch.Pitch F4>\n\n\ne.g. A mordent on a G in a key with one sharp (ornamental pitch will be F#).\n>>> oneSharp = key.KeySignature(sharps=1)\n>>> mordent.resolveOrnamentalPitches(n1, keySig=oneSharp)\n>>> mordent.ornamentalPitches\n(<music21.pitch.Pitch F#4>,)\n>>> mordent.ornamentalPitch\n<music21.pitch.Pitch F#4>\n\n\ne.g. A mordent with a natural, on a G, in a key with one sharp\n(ornamental pitch will be F).\n>>> mordent.accidental = pitch.Accidental('natural')\n>>> mordent.resolveOrnamentalPitches(n1, keySig=oneSharp)\n>>> mordent.ornamentalPitches\n(<music21.pitch.Pitch F4>,)\n>>> mordent.ornamentalPitch\n<music21.pitch.Pitch F4>",
        "type": "ListItem"
    },
    {
        "text": "GeneralMordent.",
        "type": "Title"
    },
    {
        "text": "updateAccidentalDisplay",
        "type": "Title"
    },
    {
        "text": "pitchPast",
        "type": "Title"
    },
    {
        "text": "list",
        "type": "Title"
    },
    {
        "text": "music21.pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "pitchPastMeasure",
        "type": "Title"
    },
    {
        "text": "list",
        "type": "Title"
    },
    {
        "text": "music21.pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "otherSimultaneousPitches",
        "type": "Title"
    },
    {
        "text": "list",
        "type": "Title"
    },
    {
        "text": "music21.pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "alteredPitches",
        "type": "Title"
    },
    {
        "text": "list",
        "type": "Title"
    },
    {
        "text": "music21.pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "cautionaryPitchClass",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "cautionaryAll",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "overrideStatus",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "cautionaryNotImmediateRepeat",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Updates accidental display for a GeneralMordent's ornamental pitch.\nDefined exactly like Pitch.updateAccidentalDisplay, with two changes:\nInstead of self being the pitch to update, self is a GeneralMordent whose\nornamentalPitch is to be updated; and we pay no attention to ties,\nsince ornamental notes cannot be tied.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "fillListOfRealizedNotes()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "GeneralMordent instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "HalfStepAppoggiatura\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "HalfStepAppoggiatura",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "HalfStepAppoggiatura bases",
        "type": "Title"
    },
    {
        "text": "Appoggiatura",
        "type": "ListItem"
    },
    {
        "text": "GeneralAppoggiatura",
        "type": "ListItem"
    },
    {
        "text": "Ornament",
        "type": "ListItem"
    },
    {
        "text": "Expression",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "HalfStepAppoggiatura read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "ornamentalPitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Expression:",
        "type": "NarrativeText"
    },
    {
        "text": "name",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "HalfStepAppoggiatura read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "HalfStepAppoggiatura methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from GeneralAppoggiatura:",
        "type": "NarrativeText"
    },
    {
        "text": "realize()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "fillListOfRealizedNotes() resolveOrnamentalPitches() updateAccidentalDisplay()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "HalfStepAppoggiatura instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "HalfStepInvertedAppoggiatura\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "HalfStepInvertedAppoggiatura",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "HalfStepInvertedAppoggiatura bases",
        "type": "Title"
    },
    {
        "text": "InvertedAppoggiatura",
        "type": "ListItem"
    },
    {
        "text": "GeneralAppoggiatura",
        "type": "ListItem"
    },
    {
        "text": "Ornament",
        "type": "ListItem"
    },
    {
        "text": "Expression",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "HalfStepInvertedAppoggiatura read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "ornamentalPitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Expression:",
        "type": "NarrativeText"
    },
    {
        "text": "name",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "HalfStepInvertedAppoggiatura read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "HalfStepInvertedAppoggiatura methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from GeneralAppoggiatura:",
        "type": "NarrativeText"
    },
    {
        "text": "realize()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "fillListOfRealizedNotes() resolveOrnamentalPitches() updateAccidentalDisplay()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "HalfStepInvertedAppoggiatura instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "HalfStepInvertedMordent\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "HalfStepInvertedMordent",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A half-step inverted Mordent.\n>>> m = expressions.HalfStepInvertedMordent()\n>>> m.direction\n'up'\n>>> m.getSize(note.Note('C4'))\n<music21.interval.Interval m2>",
        "type": "ListItem"
    },
    {
        "text": "HalfStepInvertedMordent bases",
        "type": "Title"
    },
    {
        "text": "InvertedMordent",
        "type": "ListItem"
    },
    {
        "text": "GeneralMordent",
        "type": "ListItem"
    },
    {
        "text": "Ornament",
        "type": "ListItem"
    },
    {
        "text": "Expression",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "HalfStepInvertedMordent read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from GeneralMordent:",
        "type": "NarrativeText"
    },
    {
        "text": "direction name ornamentalPitch ornamentalPitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "HalfStepInvertedMordent read/write properties",
        "type": "Title"
    },
    {
        "text": "HalfStepInvertedMordent.",
        "type": "Title"
    },
    {
        "text": "accidental",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "HalfStepInvertedMordent methods",
        "type": "Title"
    },
    {
        "text": "HalfStepInvertedMordent.",
        "type": "Title"
    },
    {
        "text": "getSize",
        "type": "Title"
    },
    {
        "text": "srcObj",
        "type": "Title"
    },
    {
        "text": "note.GeneralNote",
        "type": "Title"
    },
    {
        "text": "keySig",
        "type": "Title"
    },
    {
        "text": "key.KeySignature | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u2192 interval.IntervalBase",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns the size of the mordent's interval, given a source note and\nan optional key signature.  If the key signature is not specified, the\nsource note's context is searched for the current key signature, and if\nthere is no such key signature, a key signature with no sharps and no flats\nwill be used.  Any accidental that has been set on the mordent will also\nbe taken into account.  If no accidental has been set, the appropriate\naccidental from the key signature will be used.\nIf keySig is specified, this can be considered to be a theoretical question:\n\u009cIf this particular mordent were to be attached to this note, in this key,\nwhat would the size of the mordent interval be?\u009d",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from GeneralMordent:",
        "type": "NarrativeText"
    },
    {
        "text": "realize() resolveOrnamentalPitches() updateAccidentalDisplay()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "fillListOfRealizedNotes()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "HalfStepInvertedMordent instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "HalfStepMordent\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "HalfStepMordent",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A half step normal Mordent.\n>>> m = expressions.HalfStepMordent()\n>>> m.direction\n'down'\n>>> m.getSize(note.Note('C4'))\n<music21.interval.Interval m-2>",
        "type": "ListItem"
    },
    {
        "text": "HalfStepMordent bases",
        "type": "Title"
    },
    {
        "text": "Mordent",
        "type": "ListItem"
    },
    {
        "text": "GeneralMordent",
        "type": "ListItem"
    },
    {
        "text": "Ornament",
        "type": "ListItem"
    },
    {
        "text": "Expression",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "HalfStepMordent read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from GeneralMordent:",
        "type": "NarrativeText"
    },
    {
        "text": "direction name ornamentalPitch ornamentalPitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "HalfStepMordent read/write properties",
        "type": "Title"
    },
    {
        "text": "HalfStepMordent.",
        "type": "Title"
    },
    {
        "text": "accidental",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "HalfStepMordent methods",
        "type": "Title"
    },
    {
        "text": "HalfStepMordent.",
        "type": "Title"
    },
    {
        "text": "getSize",
        "type": "Title"
    },
    {
        "text": "srcObj",
        "type": "Title"
    },
    {
        "text": "note.GeneralNote",
        "type": "Title"
    },
    {
        "text": "keySig",
        "type": "Title"
    },
    {
        "text": "key.KeySignature | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u2192 interval.IntervalBase",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns the size of the mordent's interval, given a source note and\nan optional key signature.  If the key signature is not specified, the\nsource note's context is searched for the current key signature, and if\nthere is no such key signature, a key signature with no sharps and no flats\nwill be used.  Any accidental that has been set on the mordent will also\nbe taken into account.  If no accidental has been set, the appropriate\naccidental from the key signature will be used.\nIf keySig is specified, this can be considered to be a theoretical question:\n\u009cIf this particular mordent were to be attached to this note, in this key,\nwhat would the size of the mordent interval be?\u009d",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from GeneralMordent:",
        "type": "NarrativeText"
    },
    {
        "text": "realize() resolveOrnamentalPitches() updateAccidentalDisplay()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "fillListOfRealizedNotes()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "HalfStepMordent instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "HalfStepTrill\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "HalfStepTrill",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A trill confined to half steps.\n>>> halfTrill = expressions.HalfStepTrill()\n>>> halfTrill.placement\n'above'\n>>> halfTrill.getSize(note.Note('C4'))\n<music21.interval.Interval m2>\n\n\nHere the key signature of 2 sharps will not affect the trill:\n>>> n = note.Note('B4', type='eighth')\n>>> m = stream.Measure()\n>>> m.insert(0, key.KeySignature(2))\n>>> m.append(n)\n>>> halfTrill.realize(n)\n([<music21.note.Note B>,\n  <music21.note.Note C>,\n  <music21.note.Note B>,\n  <music21.note.Note C>], None, [])",
        "type": "ListItem"
    },
    {
        "text": "HalfStepTrill bases",
        "type": "Title"
    },
    {
        "text": "Trill",
        "type": "ListItem"
    },
    {
        "text": "Ornament",
        "type": "ListItem"
    },
    {
        "text": "Expression",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "HalfStepTrill read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Trill:",
        "type": "NarrativeText"
    },
    {
        "text": "direction name ornamentalPitch ornamentalPitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "HalfStepTrill read/write properties",
        "type": "Title"
    },
    {
        "text": "HalfStepTrill.",
        "type": "Title"
    },
    {
        "text": "accidental",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "HalfStepTrill methods",
        "type": "Title"
    },
    {
        "text": "HalfStepTrill.",
        "type": "Title"
    },
    {
        "text": "getSize",
        "type": "Title"
    },
    {
        "text": "srcObj",
        "type": "Title"
    },
    {
        "text": "note.GeneralNote",
        "type": "Title"
    },
    {
        "text": "keySig",
        "type": "Title"
    },
    {
        "text": "key.KeySignature | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u2192 interval.IntervalBase",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns the size of the trill's interval, given a source note and\nan optional key signature.  If the key signature is not specified, the\nsource note's context is searched for the current key signature, and if\nthere is no such key signature, a key signature with no sharps and no flats\nwill be used.  Any accidental that has been set on the trill will also\nbe taken into account.\nIf keySig is specified, this can be considered to be a theoretical question:\n\u009cIf this particular trill were to be attached to this note, in this key,\nwhat would the size of the trill interval be?\u009d",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from Trill:",
        "type": "NarrativeText"
    },
    {
        "text": "realize() resolveOrnamentalPitches() splitClient() updateAccidentalDisplay()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "fillListOfRealizedNotes()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "HalfStepTrill instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "InvertedAppoggiatura\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "InvertedAppoggiatura",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "InvertedAppoggiatura bases",
        "type": "Title"
    },
    {
        "text": "GeneralAppoggiatura",
        "type": "ListItem"
    },
    {
        "text": "Ornament",
        "type": "ListItem"
    },
    {
        "text": "Expression",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "InvertedAppoggiatura read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "ornamentalPitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Expression:",
        "type": "NarrativeText"
    },
    {
        "text": "name",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "InvertedAppoggiatura read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "InvertedAppoggiatura methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from GeneralAppoggiatura:",
        "type": "NarrativeText"
    },
    {
        "text": "realize()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "fillListOfRealizedNotes() resolveOrnamentalPitches() updateAccidentalDisplay()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "InvertedAppoggiatura instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "InvertedMordent\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "InvertedMordent",
        "type": "Title"
    },
    {
        "text": "accidental",
        "type": "Title"
    },
    {
        "text": "Accidental | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An inverted Mordent \u2014 goes upwards and has no line through it.\nNote that some computer terminology calls this one a (normal) mordent, but this\nis a modern term.    See Apel, Harvard Dictionary of Music,\n\u009cInverted Mordent\u009d:\nAn 18th-century ornament involving alternation of the\nwritten note with the note immediately above it.\n\n\nAn inverted mordent has the size of a second, of some form, depending on the note\nthat will have the mordent, the current key signature in that note's context, as\nwell as any accidental on the mordent itself.\n>>> m = expressions.InvertedMordent()\n>>> m.direction\n'up'\n>>> m.getSize(note.Note('C4'))\n<music21.interval.Interval M2>\n>>> m.getSize(note.Note('B3'))\n<music21.interval.Interval m2>\n\n\n>>> mSharp = expressions.InvertedMordent(accidental=pitch.Accidental('sharp'))\n>>> mSharp.direction\n'up'\n>>> mSharp.getSize(note.Note('C4'))\n<music21.interval.Interval A2>\n>>> mSharp.getSize(note.Note('B3'))\n<music21.interval.Interval M2>\n\n\n\nChanged in v7: InvertedMordent sizes are GenericIntervals \u2014 as was originally\nintended but programmed incorrectly.\nChanged in v9: Support an accidental on InvertedMordent. This also adds the concept of\nan ornamental pitch that is processed by makeAccidentals.\nThe size property has been removed and replaced with .getSize() (which requires\na srcObj and optional keySig param).  Added optional keySig param to\n.realize() as well.",
        "type": "ListItem"
    },
    {
        "text": "InvertedMordent bases",
        "type": "Title"
    },
    {
        "text": "GeneralMordent",
        "type": "ListItem"
    },
    {
        "text": "Ornament",
        "type": "ListItem"
    },
    {
        "text": "Expression",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "InvertedMordent read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from GeneralMordent:",
        "type": "NarrativeText"
    },
    {
        "text": "direction name ornamentalPitch ornamentalPitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "InvertedMordent read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from GeneralMordent:",
        "type": "NarrativeText"
    },
    {
        "text": "accidental",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "InvertedMordent methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from GeneralMordent:",
        "type": "NarrativeText"
    },
    {
        "text": "getSize() realize() resolveOrnamentalPitches() updateAccidentalDisplay()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "fillListOfRealizedNotes()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "InvertedMordent instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "InvertedTrill\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "InvertedTrill",
        "type": "Title"
    },
    {
        "text": "accidental",
        "type": "Title"
    },
    {
        "text": "Accidental | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "InvertedTrill bases",
        "type": "Title"
    },
    {
        "text": "Trill",
        "type": "ListItem"
    },
    {
        "text": "Ornament",
        "type": "ListItem"
    },
    {
        "text": "Expression",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "InvertedTrill read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Trill:",
        "type": "NarrativeText"
    },
    {
        "text": "direction name ornamentalPitch ornamentalPitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "InvertedTrill read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Trill:",
        "type": "NarrativeText"
    },
    {
        "text": "accidental",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "InvertedTrill methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from Trill:",
        "type": "NarrativeText"
    },
    {
        "text": "getSize() realize() resolveOrnamentalPitches() splitClient() updateAccidentalDisplay()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "fillListOfRealizedNotes()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "InvertedTrill instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "InvertedTurn\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "InvertedTurn",
        "type": "Title"
    },
    {
        "text": "delay",
        "type": "Title"
    },
    {
        "text": "OrnamentDelay",
        "type": "Title"
    },
    {
        "text": "float",
        "type": "Title"
    },
    {
        "text": "Fraction",
        "type": "Title"
    },
    {
        "text": "OrnamentDelay.NO_DELAY",
        "type": "Title"
    },
    {
        "text": "upperAccidental",
        "type": "Title"
    },
    {
        "text": "Accidental | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "lowerAccidental",
        "type": "Title"
    },
    {
        "text": "Accidental | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "InvertedTurn bases",
        "type": "Title"
    },
    {
        "text": "Turn",
        "type": "ListItem"
    },
    {
        "text": "Ornament",
        "type": "ListItem"
    },
    {
        "text": "Expression",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "InvertedTurn read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Turn:",
        "type": "NarrativeText"
    },
    {
        "text": "isDelayed lowerOrnamentalPitch name ornamentalPitches upperOrnamentalPitch",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "InvertedTurn read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Turn:",
        "type": "NarrativeText"
    },
    {
        "text": "delay lowerAccidental upperAccidental",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "InvertedTurn methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from Turn:",
        "type": "NarrativeText"
    },
    {
        "text": "getSize() realize() resolveOrnamentalPitches() updateAccidentalDisplay()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "fillListOfRealizedNotes()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "InvertedTurn instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "Mordent\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "Mordent",
        "type": "Title"
    },
    {
        "text": "accidental",
        "type": "Title"
    },
    {
        "text": "Accidental | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A normal Mordent \u2014 goes downwards and has a line through it.\nNote that some computer terminology calls this one an inverted mordent, but this\nis a modern term.  See Apel, Harvard Dictionary of Music, \u009cMordent\u009d:\nA musical ornament consisting of the alternation of the written note\nwith the note immediately below it.\n\n\nA mordent has the size of a second, of some form, depending on the note\nthat will have the mordent, the current key signature in that note's context, as\nwell as any accidental on the mordent itself.\ne.g. Mordent without accidentals in default key (no flats or sharps)\n>>> m = expressions.Mordent()\n>>> m.direction\n'down'\n>>> m.getSize(note.Note('C4'))\n<music21.interval.Interval m-2>\n>>> m.getSize(note.Note('B3'))\n<music21.interval.Interval M-2>\n\n\ne.g. Mordent with flat, in default key (no flats or sharps)\n>>> mFlat = expressions.Mordent(accidental=pitch.Accidental('flat'))\n>>> mFlat.direction\n'down'\n>>> mFlat.getSize(note.Note('C4'))\n<music21.interval.Interval M-2>\n>>> mFlat.getSize(note.Note('B3'))\n<music21.interval.Interval A-2>\n\n\ne.g. Mordent without accidentals, in key with one flat\n>>> oneFlat = key.KeySignature(-1)\n>>> mNotFlat = expressions.Mordent()\n>>> mNotFlat.direction\n'down'\n>>> mNotFlat.getSize(note.Note('C4'), keySig=oneFlat)\n<music21.interval.Interval M-2>\n>>> mNotFlat.getSize(note.Note('B3'), keySig=oneFlat)\n<music21.interval.Interval M-2>\n\n\ne.g. Mordent without accidentals, with a key from context with one flat (same results)\n>>> noteC4 = note.Note('C4')\n>>> noteB3 = note.Note('B3')\n>>> measure = stream.Measure([oneFlat, noteC4, noteB3])\n>>> mNotFlatWithKeyFromContext = expressions.Mordent()\n>>> mNotFlatWithKeyFromContext.direction\n'down'\n>>> mNotFlatWithKeyFromContext.getSize(noteC4)\n<music21.interval.Interval M-2>\n>>> mNotFlatWithKeyFromContext.getSize(noteB3)\n<music21.interval.Interval M-2>\n\n\n\nChanged in v7: Mordent sizes are GenericIntervals \u2014 as was originally\nintended but programmed incorrectly.\nChanged in v9: Support an accidental on Mordent. This also adds the concept of\nan ornamental pitch that is processed by makeAccidentals.\nThe size property has been removed and replaced with .getSize() (which requires\na srcObj and optional keySig param).  Added optional keySig param to\n.realize() as well.",
        "type": "ListItem"
    },
    {
        "text": "Mordent bases",
        "type": "Title"
    },
    {
        "text": "GeneralMordent",
        "type": "ListItem"
    },
    {
        "text": "Ornament",
        "type": "ListItem"
    },
    {
        "text": "Expression",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "Mordent read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from GeneralMordent:",
        "type": "NarrativeText"
    },
    {
        "text": "direction name ornamentalPitch ornamentalPitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "Mordent read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from GeneralMordent:",
        "type": "NarrativeText"
    },
    {
        "text": "accidental",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "Mordent methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from GeneralMordent:",
        "type": "NarrativeText"
    },
    {
        "text": "getSize() realize() resolveOrnamentalPitches() updateAccidentalDisplay()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "fillListOfRealizedNotes()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "Mordent instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "Ornament\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "Ornament",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An Ornament is a type of Expression that, when attached to a Note\n(in the future: Notes) can transform into the main note.\nAll ornaments have an .autoScale boolean which determines\nwhether to shrink (not currently to expand) the ornament if the\nnote it is attached to is too short to realize.",
        "type": "ListItem"
    },
    {
        "text": "Ornament bases",
        "type": "Title"
    },
    {
        "text": "Expression",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "Ornament read-only properties",
        "type": "Title"
    },
    {
        "text": "Ornament.",
        "type": "Title"
    },
    {
        "text": "ornamentalPitches",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Only implemented in Turn, GeneralMordent, and Trill.",
        "type": "ListItem"
    },
    {
        "text": "Read-only properties inherited from Expression:",
        "type": "NarrativeText"
    },
    {
        "text": "name",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "Ornament read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "Ornament methods",
        "type": "Title"
    },
    {
        "text": "Ornament.",
        "type": "Title"
    },
    {
        "text": "fillListOfRealizedNotes",
        "type": "Title"
    },
    {
        "text": "srcObj",
        "type": "Title"
    },
    {
        "text": "note.Note | note.Unpitched",
        "type": "Title"
    },
    {
        "text": "fillObjects",
        "type": "Title"
    },
    {
        "text": "list",
        "type": "Title"
    },
    {
        "text": "note.Note",
        "type": "Title"
    },
    {
        "text": "note.Unpitched",
        "type": "Title"
    },
    {
        "text": "transposeInterval",
        "type": "Title"
    },
    {
        "text": "interval.IntervalBase",
        "type": "Title"
    },
    {
        "text": "useQL",
        "type": "Title"
    },
    {
        "text": "OffsetQL | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u2192 None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Used by trills and mordents to fill out their realization.",
        "type": "ListItem"
    },
    {
        "text": "Ornament.",
        "type": "Title"
    },
    {
        "text": "realize",
        "type": "NarrativeText"
    },
    {
        "text": "srcObj",
        "type": "Title"
    },
    {
        "text": "note.Note | note.Unpitched",
        "type": "Title"
    },
    {
        "text": "keySig",
        "type": "Title"
    },
    {
        "text": "key.KeySignature | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "inPlace",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "\u2192 tuple[list[note.Note | note.Unpitched], note.Note | note.Unpitched | None, list[note.Note | note.Unpitched]]",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "subclassable method call that takes a sourceObject and optional keySig\nand returns a three-element tuple of a list of notes before the\n\u009cmain note\u009d or the result of the expression if it gobbles up the entire note,\nthe \u009cmain note\u009d itself (or None) to keep processing for ornaments,\nand a list of notes after the \u009cmain note\u009d.\n\nNew in v8: inPlace boolean; note that some ornaments\nmight not return a Note in the second position at all (such as trills)\nso inPlace does nothing.\nChanged in v9: Optional keySig can be passed in (useful in cases where there\nis no keySig in srcObj's context, or where a different keySig is desired).",
        "type": "ListItem"
    },
    {
        "text": "Ornament.",
        "type": "Title"
    },
    {
        "text": "resolveOrnamentalPitches",
        "type": "Title"
    },
    {
        "text": "srcObj",
        "type": "Title"
    },
    {
        "text": "note.GeneralNote",
        "type": "Title"
    },
    {
        "text": "keySig",
        "type": "Title"
    },
    {
        "text": "key.KeySignature | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Only implemented in Turn, GeneralMordent, and Trill.",
        "type": "ListItem"
    },
    {
        "text": "Ornament.",
        "type": "Title"
    },
    {
        "text": "updateAccidentalDisplay",
        "type": "Title"
    },
    {
        "text": "pitchPast",
        "type": "Title"
    },
    {
        "text": "list",
        "type": "Title"
    },
    {
        "text": "music21.pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "pitchPastMeasure",
        "type": "Title"
    },
    {
        "text": "list",
        "type": "Title"
    },
    {
        "text": "music21.pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "otherSimultaneousPitches",
        "type": "Title"
    },
    {
        "text": "list",
        "type": "Title"
    },
    {
        "text": "music21.pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "alteredPitches",
        "type": "Title"
    },
    {
        "text": "list",
        "type": "Title"
    },
    {
        "text": "music21.pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "cautionaryPitchClass",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "cautionaryAll",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "overrideStatus",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "cautionaryNotImmediateRepeat",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u2192 None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Only implemented in Turn, GeneralMordent, and Trill.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "Ornament instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "RehearsalMark\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "RehearsalMark",
        "type": "Title"
    },
    {
        "text": "content",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "numbering",
        "type": "NarrativeText"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A rehearsal mark is a type of Expression that designates a rehearsal\nmarking, such as A., B., etc.\nTakes two inputs, content (\u0098B', 5, \u0098III') and an optional numbering system which\nis helpful for getting the next rehearsal mark.\n>>> rm = expressions.RehearsalMark('B')\n>>> rm\n<music21.expressions.RehearsalMark 'B'>",
        "type": "ListItem"
    },
    {
        "text": "RehearsalMark bases",
        "type": "Title"
    },
    {
        "text": "Expression",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "RehearsalMark read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Expression:",
        "type": "NarrativeText"
    },
    {
        "text": "name",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "RehearsalMark read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "RehearsalMark methods",
        "type": "Title"
    },
    {
        "text": "RehearsalMark.",
        "type": "Title"
    },
    {
        "text": "nextContent",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return the next content based on the numbering\n>>> expressions.RehearsalMark('A').nextContent()\n'B'\n\n\n>>> expressions.RehearsalMark('II').nextContent()\n'III'\n\n\n>>> expressions.RehearsalMark('IV').nextContent()\n'V'\n\n\n>>> expressions.RehearsalMark(7).nextContent()\n8\n\n\n>>> expressions.RehearsalMark('Z').nextContent()\n'AA'\n\n\nWith rehearsal mark \u0098I' default is to consider it\nas a roman numeral:\n>>> expressions.RehearsalMark('I').nextContent()\n'II'\n\n\nSpecify numbering directly to avoid problems:\n>>> expressions.RehearsalMark('I', numbering='alphabetical').nextContent()\n'J'",
        "type": "ListItem"
    },
    {
        "text": "RehearsalMark.",
        "type": "Title"
    },
    {
        "text": "nextMark",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return the next rehearsal mark.\n>>> rm = expressions.RehearsalMark('C')\n>>> rm.nextMark()\n<music21.expressions.RehearsalMark 'D'>\n\n\n>>> rm = expressions.RehearsalMark('IV', numbering='roman')\n>>> nm = rm.nextMark()\n>>> nm.content\n'V'\n>>> nm.numbering\n'roman'",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "RehearsalMark instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "Schleifer\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "Schleifer",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A slide or culee\n\nChanged in v7: size is a Generic second.  removed unused nachschlag component.",
        "type": "ListItem"
    },
    {
        "text": "Schleifer bases",
        "type": "Title"
    },
    {
        "text": "Ornament",
        "type": "ListItem"
    },
    {
        "text": "Expression",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "Schleifer read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "ornamentalPitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Expression:",
        "type": "NarrativeText"
    },
    {
        "text": "name",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "Schleifer read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "Schleifer methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "fillListOfRealizedNotes() realize() resolveOrnamentalPitches() updateAccidentalDisplay()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "Schleifer instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "Shake\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "Shake",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A slower trill.\n>>> shake = expressions.Shake()\n>>> shake.quarterLength\n0.25",
        "type": "ListItem"
    },
    {
        "text": "Shake bases",
        "type": "Title"
    },
    {
        "text": "Trill",
        "type": "ListItem"
    },
    {
        "text": "Ornament",
        "type": "ListItem"
    },
    {
        "text": "Expression",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "Shake read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Trill:",
        "type": "NarrativeText"
    },
    {
        "text": "direction name ornamentalPitch ornamentalPitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "Shake read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Trill:",
        "type": "NarrativeText"
    },
    {
        "text": "accidental",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "Shake methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from Trill:",
        "type": "NarrativeText"
    },
    {
        "text": "getSize() realize() resolveOrnamentalPitches() splitClient() updateAccidentalDisplay()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "fillListOfRealizedNotes()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "Shake instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "Tremolo\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "Tremolo",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A tremolo ornament represents a single-note tremolo, whether measured or unmeasured.\n>>> n = note.Note(type='quarter')\n>>> trem = expressions.Tremolo()\n>>> trem.measured = True  # default\n>>> trem.numberOfMarks = 3  # default\n\n\n>>> trem.numberOfMarks = 'Hi'\nTraceback (most recent call last):\nmusic21.expressions.TremoloException: Number of marks must be a number from 0 to 8\n\n\n>>> trem.numberOfMarks = -1\nTraceback (most recent call last):\nmusic21.expressions.TremoloException: Number of marks must be a number from 0 to 8\n\n\nTODO: (someday) realize triplet Tremolos, etc. differently from other tremolos.\nTODO: deal with unmeasured tremolos.",
        "type": "ListItem"
    },
    {
        "text": "Tremolo bases",
        "type": "Title"
    },
    {
        "text": "Ornament",
        "type": "ListItem"
    },
    {
        "text": "Expression",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "Tremolo read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "ornamentalPitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Expression:",
        "type": "NarrativeText"
    },
    {
        "text": "name",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "Tremolo read/write properties",
        "type": "Title"
    },
    {
        "text": "Tremolo.",
        "type": "Title"
    },
    {
        "text": "numberOfMarks",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The number of marks on the note.  Currently, completely controls playback.",
        "type": "ListItem"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "Tremolo methods",
        "type": "Title"
    },
    {
        "text": "Tremolo.",
        "type": "Title"
    },
    {
        "text": "realize",
        "type": "NarrativeText"
    },
    {
        "text": "srcObj",
        "type": "Title"
    },
    {
        "text": "note.Note | note.Unpitched",
        "type": "Title"
    },
    {
        "text": "keySig",
        "type": "Title"
    },
    {
        "text": "key.KeySignature | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "inPlace",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "\u2192 tuple[list[note.Note | note.Unpitched], note.Note | note.Unpitched | None, list[note.Note | note.Unpitched]]",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Realize the ornament\n>>> n = note.Note(type='quarter')\n>>> trem = expressions.Tremolo()\n>>> trem.measured = True  # default\n>>> trem.numberOfMarks = 3  # default\n>>> trem.realize(n)\n([<music21.note.Note C>, <music21.note.Note C>, <music21.note.Note C>,\n  <music21.note.Note C>, <music21.note.Note C>, <music21.note.Note C>,\n  <music21.note.Note C>, <music21.note.Note C>], None, [])\n>>> c2 = trem.realize(n)[0]\n>>> [ts.quarterLength for ts in c2]\n[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125]\n\n\nSame thing with Streams:\n>>> n = note.Note(type='quarter')\n>>> trem = expressions.Tremolo()\n>>> n.expressions.append(trem)\n>>> s = stream.Stream()\n>>> s.append(n)\n>>> s.show('text')\n{0.0} <music21.note.Note C>\n\n\n>>> y = stream.makeNotation.realizeOrnaments(s)\n>>> y.show('text')\n{0.0} <music21.note.Note C>\n{0.125} <music21.note.Note C>\n{0.25} <music21.note.Note C>\n{0.375} <music21.note.Note C>\n{0.5} <music21.note.Note C>\n{0.625} <music21.note.Note C>\n{0.75} <music21.note.Note C>\n{0.875} <music21.note.Note C>\n\n\n>>> trem.numberOfMarks = 1\n>>> y = stream.makeNotation.realizeOrnaments(s)\n>>> y.show('text')\n{0.0} <music21.note.Note C>\n{0.5} <music21.note.Note C>",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "fillListOfRealizedNotes() resolveOrnamentalPitches() updateAccidentalDisplay()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "Tremolo instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "TremoloSpanner\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "TremoloSpanner",
        "type": "Title"
    },
    {
        "text": "spannedElements",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A tremolo that spans multiple notes\n>>> ts = expressions.TremoloSpanner()\n>>> n1 = note.Note('C')\n>>> n2 = note.Note('D')\n>>> ts.addSpannedElements([n1, n2])\n>>> ts.numberOfMarks = 2\n>>> ts\n<music21.expressions.TremoloSpanner <music21.note.Note C><music21.note.Note D>>\n\n\n>>> ts.numberOfMarks = -1\nTraceback (most recent call last):\nmusic21.expressions.TremoloException: Number of marks must be a number from 0 to 8",
        "type": "ListItem"
    },
    {
        "text": "TremoloSpanner bases",
        "type": "Title"
    },
    {
        "text": "Spanner",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "TremoloSpanner read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "TremoloSpanner read/write properties",
        "type": "Title"
    },
    {
        "text": "TremoloSpanner.",
        "type": "Title"
    },
    {
        "text": "numberOfMarks",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The number of marks on the note.  Will eventually control playback.",
        "type": "ListItem"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "TremoloSpanner methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from Spanner:",
        "type": "NarrativeText"
    },
    {
        "text": "__getitem__() addSpannedElements() fill() getFirst() getLast() getSpannedElementIds() getSpannedElements() getSpannedElementsByClass() hasSpannedElement() isFirst() isLast() purgeLocations() purgeOrphans() replaceSpannedElement()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "TremoloSpanner instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "Trill\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "Trill",
        "type": "Title"
    },
    {
        "text": "accidental",
        "type": "Title"
    },
    {
        "text": "Accidental | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A basic trill marker without the trill extension\n>>> tr = expressions.Trill()\n>>> tr.placement\n'above'\n>>> tr.getSize(note.Note('C4'))\n<music21.interval.Interval M2>\n>>> tr.getSize(note.Note('B4'))\n<music21.interval.Interval m2>\n\n\nTrills have a .nachschlag attribute which determines whether there\nshould be extra gracenotes at the end of the trill.\n>>> tr.nachschlag\nFalse\n>>> tr.nachschlag = True\n\n\nThe Trill also has a \u009cquarterLength\u009d attribute that sets how long\neach trill note should be.  Defaults to 32nd note:\n>>> tr.quarterLength\n0.125\n>>> tr.quarterLength == duration.Duration('32nd').quarterLength\nTrue\n\n\n\nChanged in v7: the size should be a generic second.\nChanged in v9: Support an accidental on trills. This also adds the concept of\nan ornamental pitch that is processed by makeAccidentals.\nThe size property has been removed and replaced with .getSize() (which requires\na srcObj and optional keySig param).  Added optional keySig param to\n.realize() as well.",
        "type": "ListItem"
    },
    {
        "text": "Trill bases",
        "type": "Title"
    },
    {
        "text": "Ornament",
        "type": "ListItem"
    },
    {
        "text": "Expression",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "Trill read-only properties",
        "type": "Title"
    },
    {
        "text": "Trill.",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The direction of the trill's ornamental pitch from the main note.\nCan be \u0098up' or \u0098down'.",
        "type": "ListItem"
    },
    {
        "text": "Trill.",
        "type": "Title"
    },
    {
        "text": "name",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "returns the name of the Trill, which is generally the class name\nlowercased, with spaces where a new capital occurs. The name also\nwill include the accidental, if it exists.\nSubclasses can override this as necessary.\n>>> trill = expressions.Trill()\n>>> trill.name\n'trill'\n\n\n>>> doubleSharpedTrill = expressions.Trill(accidental=pitch.Accidental('double-sharp'))\n>>> doubleSharpedTrill.name\n'trill (double-sharp)'",
        "type": "ListItem"
    },
    {
        "text": "Trill.",
        "type": "Title"
    },
    {
        "text": "ornamentalPitch",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns the trill's ornamentalPitch.  If resolveOrnamentalPitches\nhas not yet been called, None is returned.",
        "type": "ListItem"
    },
    {
        "text": "Trill.",
        "type": "Title"
    },
    {
        "text": "ornamentalPitches",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns any ornamental pitch that has been resolved (see\nresolveOrnamentalPitches, which must be called first, or an\nempty tuple will be returned).",
        "type": "ListItem"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "Trill read/write properties",
        "type": "Title"
    },
    {
        "text": "Trill.",
        "type": "Title"
    },
    {
        "text": "accidental",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "This is the Trill's accidental.  Whether or not it is visible is dictated by\nthe accidental's displayStatus.",
        "type": "ListItem"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "Trill methods",
        "type": "Title"
    },
    {
        "text": "Trill.",
        "type": "Title"
    },
    {
        "text": "getSize",
        "type": "Title"
    },
    {
        "text": "srcObj",
        "type": "Title"
    },
    {
        "text": "note.GeneralNote",
        "type": "Title"
    },
    {
        "text": "keySig",
        "type": "Title"
    },
    {
        "text": "key.KeySignature | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u2192 interval.IntervalBase",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns the size of the trill's interval, given a source note and\nan optional key signature.  If the key signature is not specified, the\nsource note's context is searched for the current key signature, and if\nthere is no such key signature, a key signature with no sharps and no flats\nwill be used.  Any accidental that has been set on the trill will also\nbe taken into account.\nIf keySig is specified, this can be considered to be a theoretical question:\n\u009cIf this particular trill were to be attached to this note, in this key,\nwhat would the size of the trill interval be?\u009d",
        "type": "ListItem"
    },
    {
        "text": "Trill.",
        "type": "Title"
    },
    {
        "text": "realize",
        "type": "NarrativeText"
    },
    {
        "text": "srcObj",
        "type": "Title"
    },
    {
        "text": "note.Note | note.Unpitched",
        "type": "Title"
    },
    {
        "text": "keySig",
        "type": "Title"
    },
    {
        "text": "key.KeySignature | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "inPlace",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "\u2192 tuple[list[note.Note | note.Unpitched], note.Note | note.Unpitched | None, list[note.Note | note.Unpitched]]",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "realize a trill.\nReturns a three-element tuple:\n\nThe first is a list of the notes that the note was converted to.\nThe second is None because the trill \u009ceats up\u009d the whole note.\nThe third is a list of the notes at the end if nachschlag is True,\nand empty list if False.\n\n>>> n1 = note.Note('C4')\n>>> n1.duration.type = 'eighth'\n>>> t1 = expressions.Trill()\n>>> n1.expressions.append(t1)\n>>> realization = t1.realize(n1)\n>>> realization\n([<music21.note.Note C>,\n  <music21.note.Note D>,\n  <music21.note.Note C>,\n  <music21.note.Note D>], None, [])\n>>> realization[0][0].quarterLength\n0.125\n>>> realization[0][0].pitch.octave\n4\n\n\nWhen inside a stream, the realizations will consult the current key to see\nif it should be a whole-step or half-step trill:\n>>> m = stream.Measure()\n>>> k1 = key.Key('D-')\n>>> m.insert(0, k1)\n>>> m.append(n1)\n>>> t1.realize(n1)\n([<music21.note.Note C>,\n  <music21.note.Note D->,\n  <music21.note.Note C>,\n  <music21.note.Note D->], None, [])\n\n\nNote that if the key contradicts the note of the trill, for instance, here\nhaving a C-natural rather than a C-sharp, we do not correct the C to C#.\n>>> k2 = key.Key('A')\n>>> m.replace(k1, k2)\n>>> t1.realize(n1)\n([<music21.note.Note C>,\n  <music21.note.Note D>,\n  <music21.note.Note C>,\n  <music21.note.Note D>], None, [])\n\n\nThis can lead to certain unusual circumstances such as augmented second trills\nwhich are technically correct, but probably not what a performer exprects.\n>>> k3 = key.Key('E')\n>>> m.replace(k2, k3)\n>>> t1.realize(n1)\n([<music21.note.Note C>,\n  <music21.note.Note D#>,\n  <music21.note.Note C>,\n  <music21.note.Note D#>], None, [])\n\n\nTo avoid this case, create a HalfStepTrill or\nWholeStepTrill.\nIf there is a nachschlag, it will appear in the third element of the list.\n>>> n1.duration.type = 'quarter'\n>>> m.replace(k3, k1)  # back to D-flat major\n>>> t1.nachschlag = True\n>>> t1.realize(n1)\n([<music21.note.Note C>,\n  <music21.note.Note D->,\n  <music21.note.Note C>,\n  <music21.note.Note D->,\n  <music21.note.Note C>,\n  <music21.note.Note D->], None, [<music21.note.Note C>, <music21.note.Note B->])\n\n\nSome notes can be too short to realize if autoscale is off.\n>>> n2 = note.Note('D4')\n>>> n2.duration.type = '32nd'\n>>> t2 = expressions.Trill()\n>>> t2.autoScale = False\n>>> t2.realize(n2)\nTraceback (most recent call last):\nmusic21.expressions.ExpressionException: The note is not long enough to realize a trill\n\n\nA quicker trill makes it possible:\n>>> t2.quarterLength = duration.Duration('64th').quarterLength\n>>> t2.realize(n2)\n([<music21.note.Note D>,\n  <music21.note.Note E>], None, [])\n\n\ninPlace is not used for Trills.",
        "type": "ListItem"
    },
    {
        "text": "Trill.",
        "type": "Title"
    },
    {
        "text": "resolveOrnamentalPitches",
        "type": "Title"
    },
    {
        "text": "srcObj",
        "type": "Title"
    },
    {
        "text": "note.GeneralNote",
        "type": "Title"
    },
    {
        "text": "keySig",
        "type": "Title"
    },
    {
        "text": "key.KeySignature | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Computes and stores the ornamental pitch for a Trill, given the srcObj\n(can be any kind of ornamented GeneralNote) and an optional keySig.\nIf keySig is None, srcNote's context will be searched for a key signature.\nIf no key signature is found, a key signature with no sharps and no flats\nwill be used.\ne.g. A trill on a D in a key with no sharps or flats (ornamental pitch will be E).\n>>> noSharpsOrFlats = key.KeySignature(0)\n>>> n2 = note.Note('D4')\n>>> trill = expressions.Trill()\n>>> trill.resolveOrnamentalPitches(n2, keySig=noSharpsOrFlats)\n>>> trill.ornamentalPitches\n(<music21.pitch.Pitch E4>,)\n>>> trill.ornamentalPitch\n<music21.pitch.Pitch E4>",
        "type": "ListItem"
    },
    {
        "text": "Trill.",
        "type": "Title"
    },
    {
        "text": "splitClient",
        "type": "Title"
    },
    {
        "text": "noteList",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "splitClient is called by base.splitAtQuarterLength() to support splitting trills.\n>>> n = note.Note(type='whole')\n>>> n.expressions.append(expressions.Trill())\n>>> st = n.splitAtQuarterLength(3.0)\n>>> n1, n2 = st\n>>> st.spannerList\n[<music21.expressions.TrillExtension <music21.note.Note C><music21.note.Note C>>]\n>>> n1.getSpannerSites()\n[<music21.expressions.TrillExtension <music21.note.Note C><music21.note.Note C>>]",
        "type": "ListItem"
    },
    {
        "text": "Trill.",
        "type": "Title"
    },
    {
        "text": "updateAccidentalDisplay",
        "type": "Title"
    },
    {
        "text": "pitchPast",
        "type": "Title"
    },
    {
        "text": "list",
        "type": "Title"
    },
    {
        "text": "music21.pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "pitchPastMeasure",
        "type": "Title"
    },
    {
        "text": "list",
        "type": "Title"
    },
    {
        "text": "music21.pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "otherSimultaneousPitches",
        "type": "Title"
    },
    {
        "text": "list",
        "type": "Title"
    },
    {
        "text": "music21.pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "alteredPitches",
        "type": "Title"
    },
    {
        "text": "list",
        "type": "Title"
    },
    {
        "text": "music21.pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "cautionaryPitchClass",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "cautionaryAll",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "overrideStatus",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "cautionaryNotImmediateRepeat",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Updates accidental display for a Trill's ornamental pitch.\nDefined exactly like Pitch.updateAccidentalDisplay, with two changes:\nInstead of self being the pitch to update, self is an Trill whose\nornamentalPitch is to be updated; and we pay no attention to ties,\nsince ornamental notes cannot be tied.\nThese examples show a Trill whose main note is a G in a key with no sharps or\nflats, so the trill's ornamental pitch is an A. We show various situations\nwhere the A might or might not end up with a natural accidental.\nIf updateAccidentalDisplay is called with cautionaryAll, the A gets a (cautionary)\nnatural accidental.\n>>> noSharpsOrFlats = key.KeySignature(0)\n>>> trill1 = expressions.Trill()\n>>> trill1.resolveOrnamentalPitches(note.Note('g4'), keySig=noSharpsOrFlats)\n>>> trill1.ornamentalPitch\n<music21.pitch.Pitch A4>\n>>> trill1.ornamentalPitch.accidental is None\nTrue\n>>> past = [pitch.Pitch('a#4'), pitch.Pitch('c#4'), pitch.Pitch('c4')]\n>>> trill1.updateAccidentalDisplay(pitchPast=past, cautionaryAll=True)\n>>> trill1.ornamentalPitch.accidental, trill1.ornamentalPitch.accidental.displayStatus\n(<music21.pitch.Accidental natural>, True)\n\n\nIf updateAccidentalDisplay is called without cautionaryAll, the A gets a natural\naccidental, because a previous A had a sharp accidental.\n>>> trill2 = expressions.Trill()\n>>> trill2.resolveOrnamentalPitches(note.Note('g4'), keySig=noSharpsOrFlats)\n>>> trill2.ornamentalPitch\n<music21.pitch.Pitch A4>\n>>> trill2.ornamentalPitch.accidental is None\nTrue\n>>> past = [pitch.Pitch('a#4'), pitch.Pitch('c#4'), pitch.Pitch('c4')]\n>>> trill2.updateAccidentalDisplay(pitchPast=past)  # should add a natural\n>>> trill2.ornamentalPitch.accidental, trill2.ornamentalPitch.accidental.displayStatus\n(<music21.pitch.Accidental natural>, True)\n\n\nIf updateAccidentalDisplay is called with cautionaryPitchClass=False, the A does\nnot get a natural accidental because the previous A# was in a different octave.\n>>> trill3 = expressions.Trill()\n>>> trill3.resolveOrnamentalPitches(note.Note('g4'), keySig=noSharpsOrFlats)\n>>> trill3.ornamentalPitch\n<music21.pitch.Pitch A4>\n>>> trill3.ornamentalPitch.accidental is None\nTrue\n>>> past = [pitch.Pitch('a#3'), pitch.Pitch('c#'), pitch.Pitch('c')]\n>>> trill3.updateAccidentalDisplay(pitchPast=past, cautionaryPitchClass=False)\n>>> trill3.ornamentalPitch.accidental is None\nTrue\n\n\nIf we add a natural accidental to the trill (with displayStatus True), and then\nupdateAccidentalDisplay is called with cautionaryPitchClass=False, the A gets a\nvisible natural accidental because of that added natural accidental.\n>>> trill4 = expressions.Trill()\n>>> natural = pitch.Accidental('natural')\n>>> natural.displayStatus = True\n>>> trill4.accidental = natural\n>>> trill4.resolveOrnamentalPitches(note.Note('g4'), keySig=noSharpsOrFlats)\n>>> trill4.ornamentalPitch\n<music21.pitch.Pitch A4>\n>>> trill4.ornamentalPitch.accidental\n<music21.pitch.Accidental natural>\n>>> trill4.ornamentalPitch.accidental.displayStatus\nTrue\n>>> past = [pitch.Pitch('a#3'), pitch.Pitch('c#'), pitch.Pitch('c')]\n>>> trill4.updateAccidentalDisplay(pitchPast=past, cautionaryPitchClass=False)\n>>> trill4.ornamentalPitch.accidental\n<music21.pitch.Accidental natural>\n>>> trill4.ornamentalPitch.accidental.displayStatus\nTrue",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "fillListOfRealizedNotes()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "Trill instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "TrillExtension\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "TrillExtension",
        "type": "Title"
    },
    {
        "text": "spannedElements",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A wavy line trill extension, placed between two notes. N\note that some MusicXML readers include a trill symbol with the wavy line.\n>>> s = stream.Stream()\n>>> s.repeatAppend(note.Note(), 8)\n\n\nCreate TrillExtension between notes 2 and 3\n>>> te = expressions.TrillExtension(s.notes[1], s.notes[2])\n>>> s.append(te)  # spanner can go anywhere in the Stream\n>>> print(te)\n<music21.expressions.TrillExtension <music21.note.Note C><music21.note.Note C>>",
        "type": "ListItem"
    },
    {
        "text": "TrillExtension bases",
        "type": "Title"
    },
    {
        "text": "Spanner",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "TrillExtension read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "TrillExtension read/write properties",
        "type": "Title"
    },
    {
        "text": "TrillExtension.",
        "type": "Title"
    },
    {
        "text": "placement",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get or set the placement as either above, below, or None.\n>>> s = stream.Stream()\n>>> s.repeatAppend(note.Note(), 8)\n>>> te = expressions.TrillExtension(s.notes[1], s.notes[2])\n>>> te.placement = 'above'\n>>> te.placement\n'above'\n\n\nA setting of None implies that the placement will be determined\nby notation software and no particular placement is demanded.",
        "type": "ListItem"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "TrillExtension methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from Spanner:",
        "type": "NarrativeText"
    },
    {
        "text": "__getitem__() addSpannedElements() fill() getFirst() getLast() getSpannedElementIds() getSpannedElements() getSpannedElementsByClass() hasSpannedElement() isFirst() isLast() purgeLocations() purgeOrphans() replaceSpannedElement()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "TrillExtension instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "Turn\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "Turn",
        "type": "Title"
    },
    {
        "text": "delay",
        "type": "Title"
    },
    {
        "text": "OrnamentDelay",
        "type": "Title"
    },
    {
        "text": "float",
        "type": "Title"
    },
    {
        "text": "Fraction",
        "type": "Title"
    },
    {
        "text": "OrnamentDelay.NO_DELAY",
        "type": "Title"
    },
    {
        "text": "upperAccidental",
        "type": "Title"
    },
    {
        "text": "Accidental | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "lowerAccidental",
        "type": "Title"
    },
    {
        "text": "Accidental | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A turn or Gruppetto.\n\nChanged in v7: size is a Generic second.  removed unused nachschlag component.\nChanged in v9: Added support for delayed vs non-delayed Turn.\nChanged in v9: Support upper and lower accidentals on turns. This also adds\nthe concept of ornamental pitches that are processed by makeAccidentals.\nThe size property has been removed and replaced with .getSize() (which requires\na srcObj and optional keySig param, as well as which='upper' or which='lower').\nAdded optional keySig param to .realize() as well.",
        "type": "ListItem"
    },
    {
        "text": "Turn bases",
        "type": "Title"
    },
    {
        "text": "Ornament",
        "type": "ListItem"
    },
    {
        "text": "Expression",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "Turn read-only properties",
        "type": "Title"
    },
    {
        "text": "Turn.",
        "type": "Title"
    },
    {
        "text": "isDelayed",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Whether the Turn is delayed (i.e. between a specific note and the following note) or\nnot (i.e. exactly on a specific note).",
        "type": "ListItem"
    },
    {
        "text": "Turn.",
        "type": "Title"
    },
    {
        "text": "lowerOrnamentalPitch",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns the turn's lower ornamental pitch.  If resolveOrnamentalPitches\nhas not yet been called, None is returned.",
        "type": "ListItem"
    },
    {
        "text": "Turn.",
        "type": "Title"
    },
    {
        "text": "name",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "returns the name of the Turn/InvertedTurn, which is generally the class\nname lowercased, with spaces where a new capital occurs, but also with\na \u0098delayed' prefix, if the Turn/InvertedTurn is delayed.  If the delay\nis of a specific duration, the prefix will include that duration. The\nname also will include upper and lower accidentals, if they exist.\nSubclasses can override this as necessary.\n>>> nonDelayedTurn = expressions.Turn()\n>>> nonDelayedTurn.name\n'turn'\n\n\n>>> from music21.common.enums import OrnamentDelay\n>>> delayedInvertedTurn = expressions.InvertedTurn(\n...     delay=OrnamentDelay.DEFAULT_DELAY,\n...     upperAccidental=pitch.Accidental('sharp'),\n...     lowerAccidental=pitch.Accidental('natural')\n... )\n>>> delayedInvertedTurn.name\n'delayed inverted turn (upper=sharp, lower=natural)'\n\n\n>>> delayedBy1Turn = expressions.Turn(\n...     delay=1.0, lowerAccidental=pitch.Accidental('double-flat'))\n>>> delayedBy1Turn.name\n'delayed(delayQL=1.0) turn (lower=double-flat)'",
        "type": "ListItem"
    },
    {
        "text": "Turn.",
        "type": "Title"
    },
    {
        "text": "ornamentalPitches",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns any ornamental pitches that have been resolved (see\nresolveOrnamentalPitches, which must be called first, or an\nempty tuple will be returned).",
        "type": "ListItem"
    },
    {
        "text": "Turn.",
        "type": "Title"
    },
    {
        "text": "upperOrnamentalPitch",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns the turn's upper ornamental pitch.  If resolveOrnamentalPitches\nhas not yet been called, None is returned.",
        "type": "ListItem"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "Turn read/write properties",
        "type": "Title"
    },
    {
        "text": "Turn.",
        "type": "Title"
    },
    {
        "text": "delay",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "If delay is NO_DELAY, the turn is not delayed.\nIf delay is anything else (an OffsetQL or DEFAULT_DELAY), the turn is delayed.\nNote that if you set delay to OffsetQL(0), and then get the delay, you will\nget NO_DELAY, not 0.",
        "type": "ListItem"
    },
    {
        "text": "Turn.",
        "type": "Title"
    },
    {
        "text": "lowerAccidental",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "This is the Turn's lowerAccidental. Whether or not it is visible is dictated by\nthe upperAccidental's displayStatus.",
        "type": "ListItem"
    },
    {
        "text": "Turn.",
        "type": "Title"
    },
    {
        "text": "upperAccidental",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "This is the Turn's upperAccidental. Whether or not it is visible is dictated by\nthe upperAccidental's displayStatus.",
        "type": "ListItem"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "Turn methods",
        "type": "Title"
    },
    {
        "text": "Turn.",
        "type": "Title"
    },
    {
        "text": "getSize",
        "type": "Title"
    },
    {
        "text": "srcObj",
        "type": "Title"
    },
    {
        "text": "note.GeneralNote",
        "type": "Title"
    },
    {
        "text": "which",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "keySig",
        "type": "Title"
    },
    {
        "text": "key.KeySignature | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u2192 interval.IntervalBase",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns the size of one of the turn's two intervals (which='upper'\nor which='lower'), given a source note and an optional key signature.\nIf the key signature is not specified, the source note's context is\nsearched for the current key signature, and if there is no such key\nsignature, a key signature with no sharps and no flats will be used.\nAny upperAccidental or lowerAccidental that has been set on the\nturn will also be taken into account.  If either has not been set,\nthe appropriate accidental from the key signature will be used.\nIf keySig is specified, this can be considered to be a theoretical\nquestion: \u009cIf this particular turn were to be attached to this note,\nin this key, what would the (\u0098upper' or \u0098lower') size of the turn\ninterval be?\u009d",
        "type": "ListItem"
    },
    {
        "text": "Turn.",
        "type": "Title"
    },
    {
        "text": "realize",
        "type": "NarrativeText"
    },
    {
        "text": "srcObj",
        "type": "Title"
    },
    {
        "text": "note.Note | note.Unpitched",
        "type": "Title"
    },
    {
        "text": "keySig",
        "type": "Title"
    },
    {
        "text": "key.KeySignature | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "inPlace",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "\u2192 tuple[list[note.Note | note.Unpitched], note.Note | note.Unpitched | None, list[note.Note | note.Unpitched]]",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "realize a turn.\nreturns a three-element tuple.\nThe first element is an empty list because there are no notes at the start of a turn.\nThe second element is the original note with a duration equal to the delay (but if there\nis no delay, the second element is None, because the turn \u009ceats up\u009d the entire note).\nThe third element is a list of the four turn notes, adding up to the duration of the\noriginal note (less the delay, if there is one).  The four turn notes will either be\nof equal duration, or the fourth note will be longer, to \u009ceat up\u009d the entire note.\n>>> from  music21 import *\n>>> from music21.common.enums import OrnamentDelay\n>>> m1 = stream.Measure()\n>>> m1.append(key.Key('F', 'major'))\n>>> n1 = note.Note('C5')\n>>> m1.append(n1)\n>>> t1 = expressions.Turn()\n>>> t1.realize(n1)\n([], None, [<music21.note.Note D>,\n            <music21.note.Note C>,\n            <music21.note.Note B->,\n            <music21.note.Note C>])\n\n\n>>> m2 = stream.Measure()\n>>> m2.append(key.KeySignature(5))\n>>> n2 = note.Note('B4', type='quarter')\n>>> m2.append(n2)\n>>> t2 = expressions.InvertedTurn(delay=OrnamentDelay.DEFAULT_DELAY)\n>>> n2.expressions.append(t2)\n>>> t2.realize(n2)\n([], <music21.note.Note B>, [<music21.note.Note A#>,\n                             <music21.note.Note B>,\n                             <music21.note.Note C#>,\n                             <music21.note.Note B>])\n\n\nRealizing an expression leaves the original note and expression alone\n>>> n2.duration.type\n'quarter'\n>>> n2.expressions\n[<music21.expressions.InvertedTurn>]\n\n\nIf inPlace is True then the note is affected and the turn is\nremoved from .expressions:\n>>> n2 = note.Note('C4')\n>>> n2.duration.type = '32nd'\n>>> t2 = expressions.Turn(delay=OrnamentDelay.DEFAULT_DELAY)\n>>> _empty, newOrigNote, turnNotes = t2.realize(n2, inPlace=True)\n>>> for turnNote in turnNotes:\n...     print(turnNote, turnNote.duration.type)\n<music21.note.Note D> 256th\n<music21.note.Note C> 256th\n<music21.note.Note B> 256th\n<music21.note.Note C> 256th\n>>> n2.duration.type\n'64th'\n>>> n2.expressions\n[]\n>>> newOrigNote is n2\nTrue\n\n\nIf the four turn notes (self.quarterLength each) don't add up to the original note\nduration, the fourth turn note should be held to the length of any remaining unused\nduration.  Here, for example, we have a dotted eighth note total duration, a delay\nof a 16th note, and a turn note duration of a triplet 32nd note, leaving the fourth\nturn note with a duration of a 16th note.  This sort of turn is seen all over the\nmusic of Weber.\n>>> from fractions import Fraction\n>>> n3 = note.Note('C4')\n>>> n3.quarterLength = 0.75\n>>> t3 = expressions.Turn(delay=0.25)\n>>> t3.quarterLength = 0.125 * Fraction(2, 3)\n>>> _empty, newOrigNote, turnNotes = t3.realize(n3, inPlace=True)\n>>> print(newOrigNote, newOrigNote.quarterLength)\n<music21.note.Note C> 0.25\n>>> for turnNote in turnNotes:\n...     print(turnNote, turnNote.quarterLength)\n<music21.note.Note D> 1/12\n<music21.note.Note C> 1/12\n<music21.note.Note B> 1/12\n<music21.note.Note C> 0.25\n\n\nIf .autoScale is off and the note is not long enough to realize 4\n32nd notes, then an exception is raised.\n>>> n2 = note.Note('C4')\n>>> n2.duration.type = '32nd'\n>>> t2 = expressions.Turn()\n>>> t2.autoScale = False\n>>> t2.realize(n2)\nTraceback (most recent call last):\nmusic21.expressions.ExpressionException: The note is not long enough to realize a turn",
        "type": "ListItem"
    },
    {
        "text": "Turn.",
        "type": "Title"
    },
    {
        "text": "resolveOrnamentalPitches",
        "type": "Title"
    },
    {
        "text": "srcObj",
        "type": "Title"
    },
    {
        "text": "note.GeneralNote",
        "type": "Title"
    },
    {
        "text": "keySig",
        "type": "Title"
    },
    {
        "text": "key.KeySignature | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Computes and stores the ornamental pitches for a Turn, given the srcObj\n(can be any kind of ornamented GeneralNote) and an optional keySig.\nIf keySig is None, srcNote's context will be searched for a key signature.\nIf no key signature is found, a key signature with no sharps and no flats\nwill be used.\ne.g. A turn on a D in a key with two flats (upper ornamental pitch will be E flat,\nlower ornamental pitch will be C).\n>>> twoFlats = key.KeySignature(sharps=-2)\n>>> n1 = note.Note('D4')\n>>> turn = expressions.Turn()\n>>> turn.resolveOrnamentalPitches(n1, keySig=twoFlats)\n>>> turn.ornamentalPitches\n(<music21.pitch.Pitch E-4>, <music21.pitch.Pitch C4>)\n>>> turn.upperOrnamentalPitch\n<music21.pitch.Pitch E-4>\n>>> turn.lowerOrnamentalPitch\n<music21.pitch.Pitch C4>\n\n\ne.g. A turn with a sharp over it and a flat under it, on a C, in a key with\nno sharps or flats (upper ornamental pitch will be D#, lower ornamental pitch\nwill be B flat).\n>>> noSharpsOrFlats = key.KeySignature(0)\n>>> n2 = note.Note('C4')\n>>> turn = expressions.Turn(\n...     upperAccidental=pitch.Accidental('sharp'),\n...     lowerAccidental=pitch.Accidental('flat'))\n>>> turn.resolveOrnamentalPitches(n2, keySig=noSharpsOrFlats)\n>>> turn.ornamentalPitches\n(<music21.pitch.Pitch D#4>, <music21.pitch.Pitch B-3>)\n>>> turn.upperOrnamentalPitch\n<music21.pitch.Pitch D#4>\n>>> turn.lowerOrnamentalPitch\n<music21.pitch.Pitch B-3>",
        "type": "ListItem"
    },
    {
        "text": "Turn.",
        "type": "Title"
    },
    {
        "text": "updateAccidentalDisplay",
        "type": "Title"
    },
    {
        "text": "pitchPast",
        "type": "Title"
    },
    {
        "text": "list",
        "type": "Title"
    },
    {
        "text": "music21.pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "pitchPastMeasure",
        "type": "Title"
    },
    {
        "text": "list",
        "type": "Title"
    },
    {
        "text": "music21.pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "otherSimultaneousPitches",
        "type": "Title"
    },
    {
        "text": "list",
        "type": "Title"
    },
    {
        "text": "music21.pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "alteredPitches",
        "type": "Title"
    },
    {
        "text": "list",
        "type": "Title"
    },
    {
        "text": "music21.pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "cautionaryPitchClass",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "cautionaryAll",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "overrideStatus",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "cautionaryNotImmediateRepeat",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Updates accidental display for a Turn's ornamental pitches (upper and lower).\nDefined exactly like Pitch.updateAccidentalDisplay, with two changes:\nInstead of self being the pitch to update, self is a Turn whose\nornamentalPitches are to be updated; and we pay no attention to ties,\nsince ornamental notes cannot be tied.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "fillListOfRealizedNotes()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "Turn instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "WholeStepAppoggiatura\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "WholeStepAppoggiatura",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "WholeStepAppoggiatura bases",
        "type": "Title"
    },
    {
        "text": "Appoggiatura",
        "type": "ListItem"
    },
    {
        "text": "GeneralAppoggiatura",
        "type": "ListItem"
    },
    {
        "text": "Ornament",
        "type": "ListItem"
    },
    {
        "text": "Expression",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "WholeStepAppoggiatura read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "ornamentalPitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Expression:",
        "type": "NarrativeText"
    },
    {
        "text": "name",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "WholeStepAppoggiatura read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "WholeStepAppoggiatura methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from GeneralAppoggiatura:",
        "type": "NarrativeText"
    },
    {
        "text": "realize()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "fillListOfRealizedNotes() resolveOrnamentalPitches() updateAccidentalDisplay()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "WholeStepAppoggiatura instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "WholeStepInvertedAppoggiatura\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "WholeStepInvertedAppoggiatura",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "WholeStepInvertedAppoggiatura bases",
        "type": "Title"
    },
    {
        "text": "InvertedAppoggiatura",
        "type": "ListItem"
    },
    {
        "text": "GeneralAppoggiatura",
        "type": "ListItem"
    },
    {
        "text": "Ornament",
        "type": "ListItem"
    },
    {
        "text": "Expression",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "WholeStepInvertedAppoggiatura read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "ornamentalPitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Expression:",
        "type": "NarrativeText"
    },
    {
        "text": "name",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "WholeStepInvertedAppoggiatura read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "WholeStepInvertedAppoggiatura methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from GeneralAppoggiatura:",
        "type": "NarrativeText"
    },
    {
        "text": "realize()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "fillListOfRealizedNotes() resolveOrnamentalPitches() updateAccidentalDisplay()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "WholeStepInvertedAppoggiatura instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "WholeStepInvertedMordent\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "WholeStepInvertedMordent",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A whole-step inverted Mordent.\n>>> m = expressions.WholeStepInvertedMordent()\n>>> m.direction\n'up'\n>>> m.getSize(note.Note('C4'))\n<music21.interval.Interval M2>",
        "type": "ListItem"
    },
    {
        "text": "WholeStepInvertedMordent bases",
        "type": "Title"
    },
    {
        "text": "InvertedMordent",
        "type": "ListItem"
    },
    {
        "text": "GeneralMordent",
        "type": "ListItem"
    },
    {
        "text": "Ornament",
        "type": "ListItem"
    },
    {
        "text": "Expression",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "WholeStepInvertedMordent read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from GeneralMordent:",
        "type": "NarrativeText"
    },
    {
        "text": "direction name ornamentalPitch ornamentalPitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "WholeStepInvertedMordent read/write properties",
        "type": "Title"
    },
    {
        "text": "WholeStepInvertedMordent.",
        "type": "Title"
    },
    {
        "text": "accidental",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "WholeStepInvertedMordent methods",
        "type": "Title"
    },
    {
        "text": "WholeStepInvertedMordent.",
        "type": "Title"
    },
    {
        "text": "getSize",
        "type": "Title"
    },
    {
        "text": "srcObj",
        "type": "Title"
    },
    {
        "text": "note.GeneralNote",
        "type": "Title"
    },
    {
        "text": "keySig",
        "type": "Title"
    },
    {
        "text": "key.KeySignature | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u2192 interval.IntervalBase",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns the size of the mordent's interval, given a source note and\nan optional key signature.  If the key signature is not specified, the\nsource note's context is searched for the current key signature, and if\nthere is no such key signature, a key signature with no sharps and no flats\nwill be used.  Any accidental that has been set on the mordent will also\nbe taken into account.  If no accidental has been set, the appropriate\naccidental from the key signature will be used.\nIf keySig is specified, this can be considered to be a theoretical question:\n\u009cIf this particular mordent were to be attached to this note, in this key,\nwhat would the size of the mordent interval be?\u009d",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from GeneralMordent:",
        "type": "NarrativeText"
    },
    {
        "text": "realize() resolveOrnamentalPitches() updateAccidentalDisplay()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "fillListOfRealizedNotes()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "WholeStepInvertedMordent instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "WholeStepMordent\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "WholeStepMordent",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A whole step normal Mordent.\n>>> m = expressions.WholeStepMordent()\n>>> m.direction\n'down'\n>>> m.getSize(note.Note('C4'))\n<music21.interval.Interval M-2>",
        "type": "ListItem"
    },
    {
        "text": "WholeStepMordent bases",
        "type": "Title"
    },
    {
        "text": "Mordent",
        "type": "ListItem"
    },
    {
        "text": "GeneralMordent",
        "type": "ListItem"
    },
    {
        "text": "Ornament",
        "type": "ListItem"
    },
    {
        "text": "Expression",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "WholeStepMordent read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from GeneralMordent:",
        "type": "NarrativeText"
    },
    {
        "text": "direction name ornamentalPitch ornamentalPitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "WholeStepMordent read/write properties",
        "type": "Title"
    },
    {
        "text": "WholeStepMordent.",
        "type": "Title"
    },
    {
        "text": "accidental",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "WholeStepMordent methods",
        "type": "Title"
    },
    {
        "text": "WholeStepMordent.",
        "type": "Title"
    },
    {
        "text": "getSize",
        "type": "Title"
    },
    {
        "text": "srcObj",
        "type": "Title"
    },
    {
        "text": "note.GeneralNote",
        "type": "Title"
    },
    {
        "text": "keySig",
        "type": "Title"
    },
    {
        "text": "key.KeySignature | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u2192 interval.IntervalBase",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns the size of the mordent's interval, given a source note and\nan optional key signature.  If the key signature is not specified, the\nsource note's context is searched for the current key signature, and if\nthere is no such key signature, a key signature with no sharps and no flats\nwill be used.  Any accidental that has been set on the mordent will also\nbe taken into account.  If no accidental has been set, the appropriate\naccidental from the key signature will be used.\nIf keySig is specified, this can be considered to be a theoretical question:\n\u009cIf this particular mordent were to be attached to this note, in this key,\nwhat would the size of the mordent interval be?\u009d",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from GeneralMordent:",
        "type": "NarrativeText"
    },
    {
        "text": "realize() resolveOrnamentalPitches() updateAccidentalDisplay()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "fillListOfRealizedNotes()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "WholeStepMordent instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "WholeStepTrill\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "WholeStepTrill",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A trill that yields whole steps no matter what.\n>>> wholeTrill = expressions.WholeStepTrill()\n>>> wholeTrill.placement\n'above'\n>>> wholeTrill.getSize(note.Note('C4'))\n<music21.interval.Interval M2>\n\n\nHere the key signature of one sharp will not affect the trill:\n>>> n = note.Note('B4', type='eighth')\n>>> m = stream.Measure()\n>>> m.insert(0, key.KeySignature(1))\n>>> m.append(n)\n>>> wholeTrill.realize(n)\n([<music21.note.Note B>,\n  <music21.note.Note C#>,\n  <music21.note.Note B>,\n  <music21.note.Note C#>], None, [])",
        "type": "ListItem"
    },
    {
        "text": "WholeStepTrill bases",
        "type": "Title"
    },
    {
        "text": "Trill",
        "type": "ListItem"
    },
    {
        "text": "Ornament",
        "type": "ListItem"
    },
    {
        "text": "Expression",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "WholeStepTrill read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Trill:",
        "type": "NarrativeText"
    },
    {
        "text": "direction name ornamentalPitch ornamentalPitches",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "WholeStepTrill read/write properties",
        "type": "Title"
    },
    {
        "text": "WholeStepTrill.",
        "type": "Title"
    },
    {
        "text": "accidental",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "WholeStepTrill methods",
        "type": "Title"
    },
    {
        "text": "WholeStepTrill.",
        "type": "Title"
    },
    {
        "text": "getSize",
        "type": "Title"
    },
    {
        "text": "srcObj",
        "type": "Title"
    },
    {
        "text": "note.GeneralNote",
        "type": "Title"
    },
    {
        "text": "keySig",
        "type": "Title"
    },
    {
        "text": "key.KeySignature | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u2192 interval.IntervalBase",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns the size of the trill's interval, given a source note and\nan optional key signature.  If the key signature is not specified, the\nsource note's context is searched for the current key signature, and if\nthere is no such key signature, a key signature with no sharps and no flats\nwill be used.  Any accidental that has been set on the trill will also\nbe taken into account.\nIf keySig is specified, this can be considered to be a theoretical question:\n\u009cIf this particular trill were to be attached to this note, in this key,\nwhat would the size of the trill interval be?\u009d",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from Trill:",
        "type": "NarrativeText"
    },
    {
        "text": "realize() resolveOrnamentalPitches() splitClient() updateAccidentalDisplay()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Ornament:",
        "type": "NarrativeText"
    },
    {
        "text": "fillListOfRealizedNotes()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "WholeStepTrill instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "Functions\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "isUnison",
        "type": "Title"
    },
    {
        "text": "intv",
        "type": "Title"
    },
    {
        "text": "IntervalBase",
        "type": "Title"
    },
    {
        "text": "\u2192 bool",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "music21.expressions.",
        "type": "Title"
    },
    {
        "text": "realizeOrnaments",
        "type": "Title"
    },
    {
        "text": "srcObj",
        "type": "Title"
    },
    {
        "text": "note.Note | note.Unpitched",
        "type": "Title"
    },
    {
        "text": "keySig",
        "type": "Title"
    },
    {
        "text": "key.KeySignature | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "given a Note or Unpitched with Ornament expressions,\nconvert them into a list of objects that represents\nthe performed version of the object:\n>>> n1 = note.Note('D5')\n>>> n1.quarterLength = 1\n>>> n1.expressions.append(expressions.WholeStepMordent())\n>>> expList = expressions.realizeOrnaments(n1)\n>>> st1 = stream.Stream()\n>>> st1.append(expList)\n>>> st1.show()",
        "type": "ListItem"
    },
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.expressions",
        "type": "ListItem"
    },
    {
        "text": "\u00a9 Copyright 2006-2023 Michael Scott Asato Cuthbert.\n      Last updated on Jun 12, 2023.",
        "type": "NarrativeText"
    }
]