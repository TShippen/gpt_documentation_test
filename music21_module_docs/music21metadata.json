[
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.metadata",
        "type": "ListItem"
    },
    {
        "text": "Previous topic",
        "type": "Title"
    },
    {
        "text": "music21.mei.base",
        "type": "Title"
    },
    {
        "text": "Next topic",
        "type": "Title"
    },
    {
        "text": "music21.metadata.bundles",
        "type": "Title"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "music21.metadata\nAmbitusShort\nAmbitusShort\n\n\nMetadata\nMetadata\nMetadata.bestTitle\nMetadata.contributors\nMetadata.software\nMetadata.alternativeTitle\nMetadata.composer\nMetadata.composers\nMetadata.copyright\nMetadata.corpusFilePath\nMetadata.date\nMetadata.dateCreated\nMetadata.fileFormat\nMetadata.fileNumber\nMetadata.filePath\nMetadata.librettist\nMetadata.librettists\nMetadata.localeOfComposition\nMetadata.lyricist\nMetadata.lyricists\nMetadata.movementName\nMetadata.movementNumber\nMetadata.number\nMetadata.opusNumber\nMetadata.title\nMetadata.__getitem__()\nMetadata.add()\nMetadata.addContributor()\nMetadata.addCustom()\nMetadata.all()\nMetadata.getContributorsByRole()\nMetadata.getCustom()\nMetadata.isContributorUniqueName()\nMetadata.isStandardName()\nMetadata.namespaceNameToUniqueName()\nMetadata.search()\nMetadata.setCustom()\nMetadata.uniqueNameToNamespaceName()\n\n\n\n\nRichMetadata\nRichMetadata\nRichMetadata.all()\nRichMetadata.getSourcePath()\nRichMetadata.merge()\nRichMetadata.update()",
        "type": "ListItem"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "About music21",
        "type": "ListItem"
    },
    {
        "text": "User's Guide",
        "type": "ListItem"
    },
    {
        "text": "Module Reference",
        "type": "ListItem"
    },
    {
        "text": "Installation",
        "type": "ListItem"
    },
    {
        "text": "Developer Reference",
        "type": "ListItem"
    },
    {
        "text": "Documentation and tests in progress",
        "type": "ListItem"
    },
    {
        "text": "Quick search",
        "type": "Title"
    },
    {
        "text": "This Page",
        "type": "Title"
    },
    {
        "text": "Show Source",
        "type": "ListItem"
    },
    {
        "text": "music21.metadata\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "Classes and functions for creating and processing metadata associated with\nscores, works, and fragments, such as titles, movements, authors, publishers,\nand regions.",
        "type": "NarrativeText"
    },
    {
        "text": "The Metadata object is the main public interface to\nmetadata components. A Metadata object can be added to a Stream and used to set\ncommon score attributes, such as title and composer. A Metadata object found at\noffset zero can be accessed through a Stream's\nmetadata property.",
        "type": "NarrativeText"
    },
    {
        "text": "The following example creates a Stream object, adds a\nNote object, and configures and adds the\ntitle and\ncomposer properties of a Metadata object.",
        "type": "NarrativeText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Score",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Part",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "append",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "())",
        "type": "UncategorizedText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "append",
        "type": "Title"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "append",
        "type": "Title"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "insert",
        "type": "Title"
    },
    {
        "text": "metadata",
        "type": "Title"
    },
    {
        "text": "Metadata",
        "type": "Title"
    },
    {
        "text": "())",
        "type": "UncategorizedText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "metadata",
        "type": "Title"
    },
    {
        "text": "title",
        "type": "Title"
    },
    {
        "text": "'title'",
        "type": "Title"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "metadata",
        "type": "Title"
    },
    {
        "text": "composer",
        "type": "Title"
    },
    {
        "text": "'composer'",
        "type": "Title"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "show",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "A guide to the v8+ Dublin Core implementation:",
        "type": "Title"
    },
    {
        "text": "The class Metadata has been completely rewritten in music21 v8 to support\nsignificant new functionality.",
        "type": "NarrativeText"
    },
    {
        "text": "The previous Metadata implementation had a list of supported workIds, and also\na list of standard contributor roles.  More than one of each contributor role\ncould exist, but only one of each workId.  And while there was some support for\ncustom contributor roles, there was no support for other custom metadata, only\nthe specified list of workIds.",
        "type": "NarrativeText"
    },
    {
        "text": "In the v8 implementation, contributor roles are treated the same as other\nnon-contributor metadata.  Music21 includes a list of supported property terms,\nwhich are pulled from Dublin Core (namespace = \u0098dcterms'), MARC Relator codes\n(namespace = \u0098marcrel'), and Humdrum (namespace = \u0098humdrum').  Each property\nterm is assigned a unique name (e.g. \u0098composer', \u0098alternativeTitle', etc).",
        "type": "NarrativeText"
    },
    {
        "text": "Each metadata property can be specified by \u0098uniqueName' or by \u0098namespace:name'.\nFor example: md[\u0098composer'] and md[\u0098marcrel:CMP'] are equivalent, as are\nmd[\u0098alternativeTitle'] and md[\u0098dcterms:alternative']. There can be more than\none of any such item (not just contributors).  And you can also have metadata\nitems with custom names.",
        "type": "NarrativeText"
    },
    {
        "text": "For simple metadata items, like a single title, there is an easy way to get/set\nthem: use an attribute-style get operation (e.g. t = md.title).  This will always\nreturn a single string.  If there is more than one item of that name, a summary\nstring will be returned.  To see the full list of metadata items in their native\nvalue type, use a dictionary-style get operation (e.g. titles = md[\u0098title']).\nIf an item or list of items is set (whether attribute-style or dictionary-style),\nany existing items of that name are deleted. To add an item or list of items\nwithout deleting existing items, use the md.add() API.  See the examples below:",
        "type": "NarrativeText"
    },
    {
        "text": "Set a title (overwrites any existing titles):",
        "type": "NarrativeText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "md",
        "type": "Title"
    },
    {
        "text": "metadata",
        "type": "Title"
    },
    {
        "text": "Metadata",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "md",
        "type": "Title"
    },
    {
        "text": "title",
        "type": "Title"
    },
    {
        "text": "'A Title'",
        "type": "Title"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "md",
        "type": "Title"
    },
    {
        "text": "title",
        "type": "Title"
    },
    {
        "text": "'A Title'",
        "type": "Title"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "md",
        "type": "Title"
    },
    {
        "text": "'title'",
        "type": "Title"
    },
    {
        "text": "(<music21.metadata.primitives.Text A Title>,)",
        "type": "Title"
    },
    {
        "text": "Set two titles (overwrites any existing titles):",
        "type": "NarrativeText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "md",
        "type": "Title"
    },
    {
        "text": "'title'",
        "type": "Title"
    },
    {
        "text": "'The Title'",
        "type": "Title"
    },
    {
        "text": "'A Second Title'",
        "type": "Title"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "md",
        "type": "Title"
    },
    {
        "text": "'title'",
        "type": "Title"
    },
    {
        "text": "(<music21.metadata.primitives.Text The Title>,",
        "type": "UncategorizedText"
    },
    {
        "text": "<music21.metadata.primitives.Text A Second Title>)",
        "type": "Title"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "md",
        "type": "Title"
    },
    {
        "text": "title",
        "type": "Title"
    },
    {
        "text": "'The Title, A Second Title'",
        "type": "Title"
    },
    {
        "text": "Add a third title (leaves any existing titles in place):",
        "type": "NarrativeText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "md",
        "type": "Title"
    },
    {
        "text": "add",
        "type": "NarrativeText"
    },
    {
        "text": "'title'",
        "type": "Title"
    },
    {
        "text": "'Third Title, A'",
        "type": "Title"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "md",
        "type": "Title"
    },
    {
        "text": "'title'",
        "type": "Title"
    },
    {
        "text": "(<music21.metadata.primitives.Text The Title>,",
        "type": "UncategorizedText"
    },
    {
        "text": "<music21.metadata.primitives.Text A Second Title>,",
        "type": "UncategorizedText"
    },
    {
        "text": "<music21.metadata.primitives.Text Third Title, A>)",
        "type": "Title"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "md",
        "type": "Title"
    },
    {
        "text": "title",
        "type": "Title"
    },
    {
        "text": "'The Title, A Second Title, A Third Title'",
        "type": "Title"
    },
    {
        "text": "You can also set/add/get free-form custom metadata items:",
        "type": "NarrativeText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "md",
        "type": "Title"
    },
    {
        "text": "setCustom",
        "type": "Title"
    },
    {
        "text": "'modification description'",
        "type": "Title"
    },
    {
        "text": "'added missing sharp in measure 27'",
        "type": "NarrativeText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "md",
        "type": "Title"
    },
    {
        "text": "getCustom",
        "type": "Title"
    },
    {
        "text": "'modification description'",
        "type": "Title"
    },
    {
        "text": "(<music21.metadata.primitives.Text added missing sharp in measure 27>,)",
        "type": "NarrativeText"
    },
    {
        "text": "Adding another custom element for the same description creates a second\nentry.",
        "type": "NarrativeText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "md",
        "type": "Title"
    },
    {
        "text": "addCustom",
        "type": "Title"
    },
    {
        "text": "'modification description'",
        "type": "Title"
    },
    {
        "text": "'deleted redundant natural in measure 28'",
        "type": "NarrativeText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "md",
        "type": "Title"
    },
    {
        "text": "getCustom",
        "type": "Title"
    },
    {
        "text": "'modification description'",
        "type": "Title"
    },
    {
        "text": "(<music21.metadata.primitives.Text added missing sharp in measure 27>,",
        "type": "NarrativeText"
    },
    {
        "text": "<music21.metadata.primitives.Text deleted redundant natural in measure 28>)",
        "type": "NarrativeText"
    },
    {
        "text": "Metadata does not explicitly support client-specified namespaces, but by using\ngetCustom/addCustom/setCustom, clients can set anything they want. For instance, to\nembed the old SoundTracker .MOD format's sample name, a .MOD file parser could use\nmd.addCustom(\u0098soundtracker:SampleName', \u0098Bassoon'), and a .MOD file writer that\nunderstood \u0098soundtracker:' metadata could then write it back accurately to one of\nthose files. Custom metadata (whether namespaced this way, or free form) can also\nbe written to various other file formats without interpretation, as long as there\nis a place for it (e.g. in the \u0098<miscellaneous>' tag in MusicXML).",
        "type": "NarrativeText"
    },
    {
        "text": "In music21 v8, primitives.Text has been updated to add isTranslated to keep track of\nwhether the text has been translated,\nas well as an encoding scheme, that specifies which standard should be used to parse\nthe string.  See metadata/primitives.py for more information.",
        "type": "NarrativeText"
    },
    {
        "text": "AmbitusShort\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.metadata.",
        "type": "Title"
    },
    {
        "text": "AmbitusShort",
        "type": "Title"
    },
    {
        "text": "semitones",
        "type": "Title"
    },
    {
        "text": "diatonic",
        "type": "Title"
    },
    {
        "text": "pitchLowest",
        "type": "Title"
    },
    {
        "text": "pitchHighest",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Metadata\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.metadata.",
        "type": "Title"
    },
    {
        "text": "Metadata",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Metadata represent data for a work or fragment, including title, composer,\ndates, and other relevant information.\nMetadata is a Music21Object subclass, meaning that it\ncan be positioned on a Stream by offset and have a\nDuration.\nIn many cases, each Stream will have a single Metadata object at the zero\noffset position.\nTo get a simple string, use attribute-style access by unique name.\nSome workIds from music21 v7 have been renamed (e.g. \u0098date' has been renamed\nto \u0098dateCreated').  The old music21 v7 name in these cases is still supported\nwhen you use attribute-style access.\n>>> md = metadata.Metadata(title='Concerto in F')\n>>> md.title\n'Concerto in F'\n\n\nAttribute access also works with three-letter workId abbreviations (these are\ngrandfathered in from music21 v7; abbreviations have not been added for\nnew-in-v8 metadata items):\n>>> md = metadata.Metadata(otl='Concerto in F')\n>>> md.otl\n'Concerto in F'\n>>> md.title\n'Concerto in F'\n\n\nIt is also possible to set a list/tuple of values or get a tuple full of\n(richer-typed) values using dictionary-style access.\n>>> md = metadata.Metadata()\n>>> md['composer'] = ['Billy Strayhorn', 'Duke Ellington']\n>>> md['composer']\n(<music21.metadata.primitives.Contributor composer:Billy Strayhorn>,\n <music21.metadata.primitives.Contributor composer:Duke Ellington>)\n>>> md.composer\n'Billy Strayhorn and Duke Ellington'\n>>> md.contributors\n(<music21.metadata.primitives.Contributor composer:Billy Strayhorn>,\n <music21.metadata.primitives.Contributor composer:Duke Ellington>)\n\n\nHere is the list of grandfathered v7 synonyms, which may disappear in a\nfuture version:\n>>> sorted(metadata.properties.ALL_MUSIC21_WORK_IDS)\n['commission', 'date', 'dedication', 'volume']\n\n\nAnd here are their new v8 standard unique names:\n>>> sorted(metadata.properties.MUSIC21_WORK_ID_TO_UNIQUE_NAME.values())\n['commissionedBy', 'dateCreated', 'dedicatedTo', 'volumeNumber']",
        "type": "ListItem"
    },
    {
        "text": "Metadata bases",
        "type": "Title"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "Metadata read-only properties",
        "type": "Title"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "bestTitle",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get the title of the work, or the next-matched title string\navailable from a related parameter fields.\n>>> md = metadata.Metadata(title='Third Symphony')\n>>> md.bestTitle\n'Third Symphony'\n\n\n>>> md = metadata.Metadata(popularTitle='Eroica')\n>>> md.bestTitle\n'Eroica'\n\n\n>>> md = metadata.Metadata(\n...     title='Third Symphony',\n...     popularTitle='Eroica',\n...     )\n>>> md.bestTitle\n'Third Symphony'\n\n\n>>> md.popularTitle\n'Eroica'\n\n\n>>> md.otp\n'Eroica'\n\n\nbestTitle cannot be set:\n>>> md.bestTitle = 'Bonaparte'\nTraceback (most recent call last):\nAttributeError: ...'bestTitle'...",
        "type": "ListItem"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "contributors",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns a tuple of all the Contributors found in the metadata.\nReturns an empty tuple if no Contributors exist.\n>>> md = metadata.Metadata()\n>>> md.composer = 'Richard Strauss'\n>>> md.librettist = 'Oscar Wilde'\n\n\nWhen we add something that is not a person, such as a title\n(whether through .attribute setting, [item] setting,\nor the add() method), it will not show up\nin the list of contributors.\n>>> md.add('title', 'Salome')\n>>> contribs = md.contributors\n>>> contribs\n(<music21.metadata.primitives.Contributor composer:Richard Strauss>,\n <music21.metadata.primitives.Contributor librettist:Oscar Wilde>)\n\n\nNote that .contributors cannot be set.  Add them separately via\nspecific setters or the .addContributor() method.",
        "type": "ListItem"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "software",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns a tuple of software names/versions.\nReturns an empty tuple if no software names/versions exist,\nbut this is rare, since music21 adds its own version when\ninitializing a Metadata object.\n>>> md = metadata.Metadata()\n>>> md.software\n('music21 v...',)\n>>> md.add('software', 'Finale for Macintosh')\n>>> md.software\n('music21 v...',\n 'Finale for Macintosh')\n>>> md['software']\n(<music21.metadata.primitives.Text music21 v...>,\n <music21.metadata.primitives.Text Finale for Macintosh>)\n\n\nNote that .software is an exception to the general rule that\nsingular looking properties return a string.  In fact, it is always\nplural and returns a tuple of strings.  There is no singular version",
        "type": "ListItem"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "Metadata read/write properties",
        "type": "Title"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "alternativeTitle",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get or set the alternative title.\n>>> md = metadata.Metadata(popularTitle='Eroica')\n>>> md.alternativeTitle = 'Heroic Symphony'\n>>> md.alternativeTitle\n'Heroic Symphony'",
        "type": "ListItem"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "composer",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get or set the composer of this work. Only the first composer can be\ngot or set via properties.\nThe composer attribute does not live in Metadata, but creates a\nContributor object in the .contributors\nobject.\n>>> md = metadata.Metadata(\n...     title='...(Iphigenia)',\n...     )\n>>> md.composer = 'Shorter, Wayne'\n\n\nYou can set multiple composers by setting them dictionary-style\nor by using md.add.\n>>> md.add(\u0098composer', \u0098Spalding, Esperanza')\nThe Metadata.composer attribute returns a summary string if there is\nmore than one composer.\n>>> md.composer\n'Shorter, Wayne and Spalding, Esperanza'",
        "type": "ListItem"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "composers",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get a tuple or set an iterable of strings of all composer roles.\n>>> md = metadata.Metadata(title='Yellow River Concerto')\n>>> md.composers = ['Xian Xinghai', 'Yin Chengzong']\n\n\n(Yin Chengzong might be better called \u009cArranger\u009d but this is for\nillustrative purposes)\n>>> md.composers\n('Xian Xinghai', 'Yin Chengzong')\n\n\nMight as well add a third composer to the concerto committee?\n>>> contrib3 = metadata.Contributor(role='composer', name='Chu Wanghua')\n>>> md.add('composer', contrib3)\n>>> md.composers\n('Xian Xinghai', 'Yin Chengzong', 'Chu Wanghua')\n\n\nIf there are no composers, returns an empty list:\n>>> md = metadata.Metadata(title='Sentient Algorithmic Composition')\n>>> md.composers\n()",
        "type": "ListItem"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "copyright",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns the copyright as a str.\nReturns None if no copyright exists in the metadata.\nReturns all the copyright values in one string (with \u0098, \u0098 between them)\nif multiple copyrights exist in the metadata. Use md[\u0098copyright'] to\nget all the copyrights as Copyright objects.\n>>> md = metadata.Metadata()\n>>> md.copyright is None\nTrue\n>>> md.copyright = 'Copyright \u00c2\u00a9 1896, \u00c3\u0089ditions Durand (expired)'\n>>> md.copyright\n'Copyright \u00c2\u00a9 1896, \u00c3\u0089ditions Durand (expired)'\n\n\nUsing dictionary-style access, you can use either the uniqueName (\u0098copyright')\nor the namespaceName (\u0098dcterms:rights').  Here you can see how multiple\ncopyrights are handled.\n>>> md.copyright = 'Copyright \u00c2\u00a9 1984 All Rights Reserved'\n>>> md.copyright\n'Copyright \u00c2\u00a9 1984 All Rights Reserved'\n\n\nTo add another copyright to the list, call md.add().\n>>> md.add('copyright', 'Lyrics copyright \u00c2\u00a9 1987 All Rights Reserved')\n\n\nmd.copyright will now return both copyrights in one string\n>>> md.copyright\n'Copyright \u00c2\u00a9 1984 All Rights Reserved, Lyrics copyright \u00c2\u00a9 1987 All Rights Reserved'\n\n\nmd[\u0098copyright'] will return a tuple containing both Copyright objects.\n>>> md['copyright']\n(<music21.metadata.primitives.Copyright Copyright \u00c2\u00a9 1984 All Rights Reserved>,\n <music21.metadata.primitives.Copyright Lyrics copyright \u00c2\u00a9 1987 All Rights Reserved>)\n\n\nYou can set str, Text, or Copyright values, and they will be converted to\nCopyright automatically if necessary.  Note that \u0098dcterms:rights'\nis Dublin Core terminology for \u0098copyright', and can be used interchangeably\nwith \u0098copyright' as a metadata dictionary-style key.\n>>> md.copyright = metadata.Text('Copyright \u00c2\u00a9 1984')\n>>> md['copyright']\n(<music21.metadata.primitives.Copyright Copyright \u00c2\u00a9 1984>,)\n>>> md.copyright = metadata.Copyright('Copyright \u00c2\u00a9 1985', role='something')\n>>> md['dcterms:rights']\n(<music21.metadata.primitives.Copyright Copyright \u00c2\u00a9 1985>,)",
        "type": "ListItem"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "corpusFilePath",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get or set the path within the corpus that was parsed.",
        "type": "ListItem"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "date",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The .date property is deprecated in v8 and will be removed in v10.\nUse dateCreated instead.",
        "type": "ListItem"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "dateCreated",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get or set the creation date of this work as one of the following date\nobjects:\nDateSingle,\nDateRelative,\nDateBetween,\nDateSelection,\n>>> md = metadata.Metadata(\n...     title='Third Symphony',\n...     popularTitle='Eroica',\n...     composer='Beethoven, Ludwig van',\n...     )\n>>> md.dateCreated = '1805'\n>>> md.dateCreated\n'1805/--/--'\n\n\n>>> md.dateCreated = metadata.DateBetween(['1803/01/01', '1805/04/07'])\n>>> md.dateCreated\n'1803/01/01 to 1805/04/07'",
        "type": "ListItem"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "fileFormat",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get or set the file format that was parsed.",
        "type": "ListItem"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "fileNumber",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get or set the file number that was parsed.",
        "type": "ListItem"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "filePath",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get or set the file path that was parsed.",
        "type": "ListItem"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "librettist",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Gets or sets a single librettist for this work:\n>>> md = metadata.Metadata(title='Death of Klinghoffer, The')\n>>> md.librettist = 'Goodman, Alice'\n>>> md.librettist\n'Goodman, Alice'\n\n\nTo preserve continuity with Humdrum, library catalogues, etc.,\nlibrettists should be distinguished from lyricists etc., but sometimes\nthe line is not 100% clear.",
        "type": "ListItem"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "librettists",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Gets a tuple or sets an iterable of librettists for this work:\n>>> md = metadata.Metadata(title='Madama Butterfly')\n>>> md.librettists = ['Illica, Luigi', 'Giacosa, Giuseppe']\n>>> md.librettists\n('Illica, Luigi', 'Giacosa, Giuseppe')\n\n\nShould be distinguished from lyricists etc.",
        "type": "ListItem"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "localeOfComposition",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get or set the locale of composition, or origin, of the work.\n>>> md = metadata.Metadata(popularTitle='Eroica')\n>>> md.localeOfComposition = 'Paris, France'\n>>> md.localeOfComposition\n'Paris, France'",
        "type": "ListItem"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "lyricist",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Gets or sets a single lyricist for this work:\n>>> md = metadata.Metadata(title='Girlfriend')\n>>> md.lyricist = 'Keys, Alicia'\n\n\nTo preserve continuity with Humdrum, library catalogues, etc.,\nlyricists should be distinguished from librettists etc., but sometimes\nthe line is not 100% clear:\n>>> md = metadata.Metadata(title='West Side Story')\n>>> md.lyricist = 'Sondheim, Stephen'\n>>> md.lyricist\n'Sondheim, Stephen'",
        "type": "ListItem"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "lyricists",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Gets a tuple or sets an iterable of lyricists for this work:\n>>> md = metadata.Metadata(title='Rumors')\n>>> md.lyricists = ['Buckingham, Lindsey', 'McVie, Christine', 'Nicks, Stevie']\n>>> md.lyricists\n('Buckingham, Lindsey', 'McVie, Christine', 'Nicks, Stevie')\n\n\nShould be distinguished from librettists etc.",
        "type": "ListItem"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "movementName",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get or set the movement title.\n>>> md = metadata.Metadata()\n>>> md.movementName = 'Vivace'\n>>> md.movementName\n'Vivace'\n\n\nNote that a number of pieces from various MusicXML datasets have\nthe piece title as the movement title. For instance, the Bach\nChorales, since they are technically movements of larger cantatas.",
        "type": "ListItem"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "movementNumber",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get or set the movement number as a string (or None)\n>>> md = metadata.Metadata(title='Ode to Joy')\n>>> md.movementNumber = 4\n\n\nNote that movement numbers are always returned as strings!  This may\nchange in the future.\n>>> md.movementNumber\n'4'",
        "type": "ListItem"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "number",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get or set the number of the work within a collection of pieces,\nas a string. (for instance, the number within a collection of ABC files)\n>>> md = metadata.Metadata()\n>>> md.number = '4'\n\n\nNote that numbers are always returned as strings!  This may\nchange in the future.\n>>> md.number\n'4'\n\n\nHowever, it is acceptable to set it as an int:\n>>> md.number = 2\n>>> md.number\n'2'",
        "type": "ListItem"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "opusNumber",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get or set the opus number.\n>>> md = metadata.Metadata()\n>>> md.opusNumber = 56\n\n\nNote that opusNumbers are always returned as strings!  This may\nchange in the future, however, it is less likely to change\nthan .number or .movementNumber since Opus numbers such as\n18a are common.\n>>> md.opusNumber\n'56'\n\n\nThere is no enforcement that only numbers actually called \u009copus\u009d\nare used, and it could be used for other catalogue numbers.\n>>> md.opusNumber = 'K.622'",
        "type": "ListItem"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "title",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get the title of the work.\n>>> md = metadata.Metadata(title='Third Symphony')\n>>> md.title\n'Third Symphony'\n\n\n>>> md = metadata.Metadata(popularTitle='Eroica')\n>>> md.title is None\nTrue",
        "type": "ListItem"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "Metadata methods",
        "type": "Title"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "__getitem__",
        "type": "Title"
    },
    {
        "text": "key",
        "type": "Title"
    },
    {
        "text": "Literal",
        "type": "Title"
    },
    {
        "text": "'movementName'",
        "type": "Title"
    },
    {
        "text": "'movementNumber'",
        "type": "Title"
    },
    {
        "text": "'title'",
        "type": "Title"
    },
    {
        "text": "\u2192 tuple[music21.metadata.primitives.Text, ...]",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "__getitem__",
        "type": "Title"
    },
    {
        "text": "key",
        "type": "Title"
    },
    {
        "text": "Literal['copyright']",
        "type": "Title"
    },
    {
        "text": "\u2192 tuple[music21.metadata.primitives.Copyright, ...]",
        "type": "Title"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "__getitem__",
        "type": "Title"
    },
    {
        "text": "key",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "\u2192 tuple[music21.metadata.primitives.Text, ...]",
        "type": "Title"
    },
    {
        "text": "\u009cDictionary key\u009d access for all standard uniqueNames and\nstandard keys of the form \u0098namespace:name'.\nThese always return tuple[ValueType, \u2026], which may be empty.\nIf key is not a standard uniqueName or standard \u0098namespace:name',\nthen KeyError is raised.\n>>> md = metadata.Metadata()\n>>> md['average duration']\nTraceback (most recent call last):\nKeyError: \"Name='average duration' is not a standard metadata name...\n\n\nExample: setting, then getting (dictionary style) a single value. Note that\nit must be set as a single element list/tuple, and is always returned as a\nsingle element tuple.\n>>> md['description'] = [\n...     metadata.Text('For the coronation of Catherine the Great.', language='en')\n... ]\n>>> descs = md['description']\n>>> descs\n(<music21.metadata.primitives.Text For the coronation of Catherine the Great.>,)\n\n\nA second description can also be added.\n>>> md.add('description', 'In five sections, unique for its time.')\n>>> descs = md['description']\n>>> isinstance(descs, tuple)\nTrue\n>>> len(descs)\n2\n>>> descs\n(<music21.metadata.primitives.Text For the coronation of Catherine the Great.>,\n <music21.metadata.primitives.Text In five sections, unique for its time.>)\n>>> descs[0].language\n'en'\n>>> descs[1].language is None\nTrue",
        "type": "ListItem"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "add",
        "type": "NarrativeText"
    },
    {
        "text": "name",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "value",
        "type": "Title"
    },
    {
        "text": "Any",
        "type": "Title"
    },
    {
        "text": "Iterable",
        "type": "Title"
    },
    {
        "text": "Any",
        "type": "Title"
    },
    {
        "text": "\u2192 None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Adds a single item or multiple items with this name, leaving any existing\nitems with this name in place.\nThe name can be the item's uniqueName or \u0098namespace:name'.  If it is\nnot the uniqueName or namespaceName of one of the standard metadata\nproperties, KeyError will be raised.\n>>> md = metadata.Metadata()\n>>> md.add('average duration', '180 minutes')\nTraceback (most recent call last):\nKeyError: \"Name='average duration' is not a standard metadata name...\n\n\nExample of adding a composer and two titles:\n>>> md.add('composer', 'Houcine Slaoui')\n>>> md['composer']\n(<music21.metadata.primitives.Contributor composer:Houcine Slaoui>,)\n\n\n>>> md.add('title', metadata.Text('\u00d8\u00a7\u00d9\u0084\u00d9\u0085\u00d8\u00a7\u00d8\u00b1\u00d9\u008a\u00d9\u0083\u00d8\u00a7\u00d9\u0086', language='ar'))\n>>> md.add('title', metadata.Text('The Americans',  language='en'))\n>>> titles = md['title']\n>>> titles\n(<music21.metadata.primitives.Text \u00d8\u00a7\u00d9\u0084\u00d9\u0085\u00d8\u00a7\u00d8\u00b1\u00d9\u008a\u00d9\u0083\u00d8\u00a7\u00d9\u0086>,\n <music21.metadata.primitives.Text The Americans>)\n>>> titles[0].language\n'ar'\n>>> titles[1].language\n'en'\n\n\nIf you do in fact want to overwrite any existing items with this name,\nyou can use dictionary-style or attribute-style setting instead.\nSee __setitem__() and\n__setattr__() for details.",
        "type": "ListItem"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "addContributor",
        "type": "Title"
    },
    {
        "text": "Contributor",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Assign a Contributor object to this\nMetadata.\n>>> md = metadata.Metadata(title='Gaelic Symphony')\n>>> c = metadata.Contributor()\n>>> c.name = 'Beach, Amy'\n>>> c.role = 'composer'\n>>> md.addContributor(c)\n>>> md.composer\n'Beach, Amy'\n\n\nAdd maiden name as an alternative composer name:\n>>> c_alt = metadata.Contributor()\n>>> c_alt.name = 'Cheney, Amy Marcy'\n>>> c_alt.role = 'composer'\n>>> md.addContributor(c_alt)\n>>> md.composers\n('Beach, Amy', 'Cheney, Amy Marcy')\n\n\n>>> md.search('Beach')\n(True, 'composer')\n>>> md.search('Cheney')\n(True, 'composer')\n\n\nNote that in this case, a \u009ccomposerAlias\u009d would probably be a more\nappropriate role than a second composer.\nAll contributor roles are searchable, even if they are not standard roles:\n>>> dancer = metadata.Contributor()\n>>> dancer.names = ['Merce Cunningham', 'Martha Graham']\n>>> dancer.role = 'interpretive dancer'\n>>> md.addContributor(dancer)\n>>> md.search('Cunningham')\n(True, 'interpretive dancer')",
        "type": "ListItem"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "addCustom",
        "type": "Title"
    },
    {
        "text": "name",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "value",
        "type": "Title"
    },
    {
        "text": "Any",
        "type": "Title"
    },
    {
        "text": "Iterable",
        "type": "Title"
    },
    {
        "text": "Any",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Adds any custom-named metadata items. The name can be free-form,\nor it can be a custom \u0098namespace:name'.\naddCustom takes a single object of any type, or a list/tuple of\nobjects of any type.  The object(s) will be converted to Text.\n>>> md = metadata.Metadata()\n>>> md.addCustom('measure with 2nd ending', 'measure 128')\n>>> md.getCustom('measure with 2nd ending')\n(<music21.metadata.primitives.Text measure 128>,)\n\n\nAn item list can also be added.\n>>> md.addCustom('measure with 2nd ending', ['measure 192', 'measure 256'])\n>>> measures = md.getCustom('measure with 2nd ending')\n\n\n>>> isinstance(measures, tuple)\nTrue\n>>> len(measures)\n3\n>>> measures\n(<music21.metadata.primitives.Text measure 128>,\n <music21.metadata.primitives.Text measure 192>,\n <music21.metadata.primitives.Text measure 256>)",
        "type": "ListItem"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "all",
        "type": "Title"
    },
    {
        "text": "skipContributors",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "skipNonContributors",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "returnPrimitives",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "returnSorted",
        "type": "NarrativeText"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u2192 tuple[tuple[str, Any], ...]",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns the values stored in this metadata as a Tuple of (uniqueName, value) pairs.\nThere are four bool options. The three that are new in v8 (skipNonContributors,\nreturnPrimitives, returnSorted) are defaulted to behave like v7.\nIf skipContributors is True, only non-contributor metadata will be returned.  If\nskipNonContributors is True, only contributor metadata will be returned.  If both\nof these are True, the returned Tuple will be empty. If returnPrimitives is False\n(default), values are all converted to str.  If returnPrimitives is True, the values\nwill retain their original ValueType (e.g. Text, Contributor, Copyright, etc).  If\nreturnSorted is False, the returned Tuple will not be sorted by uniqueName (the\ndefault behavior is to sort).\nNote that we cannot properly type-hint the return value, since derived classes (such\nas RichMetadata) are allowed to return their own typed values that might not be str\nor ValueType.\n>>> c = corpus.parse('corelli/opus3no1/1grave')\n>>> c.metadata.all()\n(('arranger', 'Michael Scott Cuthbert'),\n ('composer', 'Arcangelo Corelli'),\n ('copyright', '\u00c2\u00a9 2014, Creative Commons License (CC-BY)'),\n ('corpusFilePath', 'corelli/opus3no1/1grave.xml'),\n ('fileFormat', 'musicxml'),\n ('filePath', '...corpus/corelli/opus3no1/1grave.xml'),\n ('movementName', 'Sonata da Chiesa, No. I (opus 3, no. 1)'),\n ('software', 'Dolet...'),\n ('software', 'Finale...'),\n ('software', 'music21 v...'))\n\n\n>>> c.metadata.date = metadata.DateRelative('1689', 'onOrBefore')\n>>> c.metadata.localeOfComposition = 'Rome'\n>>> c.metadata.all(skipContributors=True)\n(('copyright', '\u00c2\u00a9 2014, Creative Commons License (CC-BY)'),\n ('corpusFilePath', 'corelli/opus3no1/1grave.xml'),\n ('dateCreated', '1689/--/-- or earlier'),\n ('fileFormat', 'musicxml'),\n ('filePath', '...corpus/corelli/opus3no1/1grave.xml'),\n ('localeOfComposition', 'Rome'),\n ('movementName', 'Sonata da Chiesa, No. I (opus 3, no. 1)'),\n ('software', 'Dolet...'),\n ('software', 'Finale...'),\n ('software', 'music21 v...'))\n\n\n>>> c.metadata.all(returnPrimitives=True, returnSorted=False)\n(('software', <music21.metadata.primitives.Text music21 v...>),\n ('software', <music21.metadata.primitives.Text Finale ...>),\n ('software', <music21.metadata.primitives.Text Dolet Light...>),\n ('movementName', <...Text Sonata da Chiesa, No. I (opus 3, no. 1)>),\n ('composer', <music21.metadata.primitives.Contributor composer:Arcangelo Corelli>),\n ...\n ('dateCreated', <music21.metadata.primitives.DateRelative 1689/--/-- or earlier>),\n ('localeOfComposition', <music21.metadata.primitives.Text Rome>))\n\n\n>>> c.metadata.all(skipNonContributors=True, returnPrimitives=True, returnSorted=True)\n(('arranger', <music21.metadata.primitives.Contributor arranger:Michael Scott Cuthbert>),\n ('composer', <music21.metadata.primitives.Contributor composer:Arcangelo Corelli>))",
        "type": "ListItem"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "getContributorsByRole",
        "type": "Title"
    },
    {
        "text": "role",
        "type": "Title"
    },
    {
        "text": "str | None",
        "type": "Title"
    },
    {
        "text": "\u2192 tuple[music21.metadata.primitives.Contributor, ...]",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return a Contributor if defined for a\nprovided role.\nWe allow role == None, since None is a valid custom contributor role.\n>>> md = metadata.Metadata(title='Violin Concerto')\n\n\n>>> c = metadata.Contributor()\n>>> c.name = 'Price, Florence'\n>>> c.role = 'composer'\n>>> md.addContributor(c)\n>>> cTuple = md.getContributorsByRole('composer')\n>>> cTuple\n(<music21.metadata.primitives.Contributor composer:Price, Florence>,)\n\n\n>>> cTuple[0].name\n'Price, Florence'\n\n\nSome musicxml files have contributors with no role defined.  To get\nthese contributors, search for getContributorsByRole(None).  N.B. upon\noutput to MusicXML, music21 gives these contributors the generic role\nof \u009ccreator\u009d\n>>> c2 = metadata.Contributor()\n>>> c2.name = 'Baron van Swieten'\n>>> md.add('otherContributor', c2)\n>>> noRoleTuple = md.getContributorsByRole(None)\n>>> len(noRoleTuple)\n1\n>>> noRoleTuple[0].role is None\nTrue\n>>> noRoleTuple[0].name\n'Baron van Swieten'",
        "type": "ListItem"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "getCustom",
        "type": "Title"
    },
    {
        "text": "name",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "\u2192 tuple[music21.metadata.primitives.DatePrimitive | music21.metadata.primitives.Text | music21.metadata.primitives.Contributor | music21.metadata.primitives.Copyright | int, ...]",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Gets any custom-named metadata items. The name can be free-form,\nor it can be a custom \u0098namespace:name'.\ngetCustom always returns tuple[Text, \u2026], which may be empty.\n>>> md = metadata.Metadata()\n>>> md.setCustom('measure with 2nd ending', 'measure 128')\n>>> md.getCustom('measure with 2nd ending')\n(<music21.metadata.primitives.Text measure 128>,)\n\n\nA second item can also be added.\n>>> md.addCustom('measure with 2nd ending', 'measure 192')\n>>> measures = md.getCustom('measure with 2nd ending')\n\n\n>>> isinstance(measures, tuple)\nTrue\n>>> len(measures)\n2\n>>> measures\n(<music21.metadata.primitives.Text measure 128>,\n <music21.metadata.primitives.Text measure 192>)",
        "type": "ListItem"
    },
    {
        "text": "static",
        "type": "Title"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "isContributorUniqueName",
        "type": "Title"
    },
    {
        "text": "uniqueName",
        "type": "Title"
    },
    {
        "text": "str | None",
        "type": "Title"
    },
    {
        "text": "\u2192 bool",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Determines if a unique name is associated with a standard contributor\nproperty.  Returns False if no such associated standard contributor\nproperty can be found.\nWe allow uniqueName == None, since None is a valid custom contributor role.\nExample: \u0098librettist' and \u0098otherContributor' are unique names of standard\ncontributors.\n>>> metadata.Metadata.isContributorUniqueName('librettist')\nTrue\n>>> metadata.Metadata.isContributorUniqueName('otherContributor')\nTrue\n\n\nExample: \u0098alternativeTitle' is the unique name of a standard property,\nbut it is not a contributor.\n>>> metadata.Metadata.isContributorUniqueName('alternativeTitle')\nFalse\n\n\nExample: \u0098average duration' is not the unique name of a standard property.\n>>> metadata.Metadata.isContributorUniqueName('average duration')\nFalse",
        "type": "ListItem"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "isStandardName",
        "type": "Title"
    },
    {
        "text": "name",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "\u2192 bool",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Determines if name is either a \u0098namespace:name' or a \u0098uniqueName'\nassociated with a standard property.\nReturns False if no such associated standard property can be found.\n>>> md = metadata.Metadata()\n>>> md.isStandardName('librettist')\nTrue\n\n\n\u0098marcrel:LBT' is the namespace name of \u0098librettist'\n>>> md.isStandardName('marcrel:LBT')\nTrue\n\n\nSome examples of non-standard (custom) names.\n>>> md.isStandardName('average duration')\nFalse\n>>> md.isStandardName('soundtracker:SampleName')\nFalse",
        "type": "ListItem"
    },
    {
        "text": "static",
        "type": "Title"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "namespaceNameToUniqueName",
        "type": "Title"
    },
    {
        "text": "namespaceName",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "\u2192 str | None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Translates a standard property namespace name (\u0098namespace:name') to that\nstandard property's uniqueName.\nAn example from the MARC Relators namespace: the unique name of\n\u0098marcrel:LBT' is \u0098librettist'.\n>>> metadata.Metadata.namespaceNameToUniqueName('marcrel:LBT')\n'librettist'\n\n\nReturns None if no such standard property exists.\n>>> metadata.Metadata.namespaceNameToUniqueName('soundtracker:SampleName') is None\nTrue\n\n\nAn example from the Dublin Core namespace: the unique name of\n\u0098dcterms:alternative' is \u0098alternativeTitle'.\n>>> metadata.Metadata.namespaceNameToUniqueName('dcterms:alternative')\n'alternativeTitle'",
        "type": "ListItem"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "search",
        "type": "Title"
    },
    {
        "text": "query",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "Pattern",
        "type": "Title"
    },
    {
        "text": "Callable",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "field",
        "type": "Title"
    },
    {
        "text": "str | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u2192 tuple[bool, str | None]",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Search one or all fields with a query, given either as a string or a\nregular expression match.\n>>> md = metadata.Metadata()\n>>> md.composer = 'Joplin, Scott'\n>>> md.title = 'Maple Leaf Rag'\n\n\n>>> md.search(\n...     'joplin',\n...     field='composer',\n...     )\n(True, 'composer')\n\n\nNote how the incomplete field name in the following example is still\nmatched:\n>>> md.search(\n...     'joplin',\n...     field='compos',\n...     )\n(True, 'composer')\n\n\nThese don't work (Richard didn't have the sense of rhythm to write this\u2026)\n>>> md.search(\n...     'Wagner',\n...     field='composer',\n...     )\n(False, None)\n\n\n>>> md.search('Wagner')\n(False, None)\n\n\n>>> md.search('leaf')\n(True, 'title')\n\n\n>>> md.search(\n...     'leaf',\n...     field='composer',\n...     )\n(False, None)\n\n\n>>> md.search(\n...     'leaf',\n...     field='title',\n...     )\n(True, 'title')\n\n\n>>> md.search('leaf|entertainer')\n(True, 'title')\n\n\n>>> md.search('opl(.*)cott')\n(True, 'composer')\n\n\n\nNew in v4: use a keyword argument to search\nthat field directly:\n\n>>> md.search(composer='Joplin')\n(True, 'composer')",
        "type": "ListItem"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "setCustom",
        "type": "Title"
    },
    {
        "text": "name",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "value",
        "type": "Title"
    },
    {
        "text": "Any",
        "type": "Title"
    },
    {
        "text": "Iterable",
        "type": "Title"
    },
    {
        "text": "Any",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Sets any custom-named metadata items (deleting any existing such items).\nThe name can be free-form, or it can be a custom \u0098namespace:name'.\nsetCustom takes a single object of any type, or a list/tuple of\nobjects of any type.  The object(s) will be converted to Text.\n>>> md = metadata.Metadata()\n>>> md.setCustom('measure with 2nd ending', 'measure 128')\n>>> md.getCustom('measure with 2nd ending')\n(<music21.metadata.primitives.Text measure 128>,)\n\n\nAn item list can also be set.\n>>> md.setCustom('measure with 2nd ending', ['measure 192', 'measure 256'])\n>>> measures = md.getCustom('measure with 2nd ending')\n\n\n>>> isinstance(measures, tuple)\nTrue\n>>> len(measures)\n2\n>>> measures\n(<music21.metadata.primitives.Text measure 192>,\n <music21.metadata.primitives.Text measure 256>)",
        "type": "ListItem"
    },
    {
        "text": "static",
        "type": "Title"
    },
    {
        "text": "Metadata.",
        "type": "Title"
    },
    {
        "text": "uniqueNameToNamespaceName",
        "type": "Title"
    },
    {
        "text": "uniqueName",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "\u2192 str | None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Translates a unique name to the associated standard property's\nnamespace name (i.e. the property's name in the form \u0098namespace:name').\nAn example from the MARC Relators namespace: the namespace name of\n\u0098librettist' is \u0098marcrel:LBT'.\n>>> metadata.Metadata.uniqueNameToNamespaceName('librettist')\n'marcrel:LBT'\n\n\nReturns None if no such associated standard property can be found.\n>>> metadata.Metadata.uniqueNameToNamespaceName('average duration') is None\nTrue\n\n\nAn example from the Dublin Core namespace: the namespace name of\n\u0098alternativeTitle' is \u0098dcterms:alternative'.\n>>> metadata.Metadata.uniqueNameToNamespaceName('alternativeTitle')\n'dcterms:alternative'",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "Metadata instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "RichMetadata\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.metadata.",
        "type": "Title"
    },
    {
        "text": "RichMetadata",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "RichMetadata adds to Metadata information about the contents of the Score\nit is attached to. TimeSignature, KeySignature and related analytical is\nstored.  RichMetadata are generally only created in the process of creating\nstored JSON metadata.\n>>> richMetadata = metadata.RichMetadata(title='Concerto in F')\n>>> richMetadata.title\n'Concerto in F'\n\n\n>>> richMetadata.keySignatureFirst = key.KeySignature(-1)\n>>> 'keySignatureFirst' in richMetadata.additionalRichMetadataAttributes\nTrue\n\n\nRichMetadata objects contain all the usual Metadata items, plus some observed\nmusical information analyzed from the score.  Here is a list of what information\nis added:\n>>> richMetadata.additionalRichMetadataAttributes\n('ambitus', 'keySignatureFirst', 'keySignatures', 'noteCount', 'numberOfParts',\n 'pitchHighest', 'pitchLowest', 'quarterLength', 'sourcePath', 'tempoFirst',\n 'tempos', 'timeSignatureFirst', 'timeSignatures')",
        "type": "ListItem"
    },
    {
        "text": "RichMetadata bases",
        "type": "Title"
    },
    {
        "text": "Metadata",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "RichMetadata read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Metadata:",
        "type": "NarrativeText"
    },
    {
        "text": "bestTitle contributors software",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "RichMetadata read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Metadata:",
        "type": "NarrativeText"
    },
    {
        "text": "alternativeTitle composer composers copyright corpusFilePath date dateCreated fileFormat fileNumber filePath librettist librettists localeOfComposition lyricist lyricists movementName movementNumber number opusNumber title",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "RichMetadata methods",
        "type": "Title"
    },
    {
        "text": "RichMetadata.",
        "type": "Title"
    },
    {
        "text": "all",
        "type": "Title"
    },
    {
        "text": "skipContributors",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "skipNonContributors",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "returnPrimitives",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "returnSorted",
        "type": "NarrativeText"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u2192 tuple[tuple[str, Any], ...]",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns all values stored in this RichMetadata as a Tuple of Tuples.\nEach individual Metadata Tuple is (uniqueName, value) and each additional\nRichMetadata tuple is (name, richAttributeValue).\n>>> rmd = metadata.RichMetadata()\n>>> c = corpus.parse('corelli/opus3no1/1grave')\n>>> rmd.merge(c.metadata)\n>>> rmd.update(c)\n>>> rmd.all()\n(('ambitus',\n    AmbitusShort(semitones=48, diatonic='P1', pitchLowest='C2', pitchHighest='C6')),\n ('arranger', 'Michael Scott Cuthbert'),\n ('composer', 'Arcangelo Corelli'),\n ...\n ('sourcePath', 'corelli/opus3no1/1grave.xml'),\n ('tempoFirst', '<music21.tempo.MetronomeMark Quarter=60 (playback only)>'),\n ('tempos', ['<music21.tempo.MetronomeMark Quarter=60 (playback only)>']),\n ('timeSignatureFirst', '4/4'),\n ('timeSignatures', ['4/4']))\n\n\n>>> rmd.dateCreated = metadata.DateRelative('1689', 'onOrBefore')\n>>> rmd.localeOfComposition = 'Rome'\n>>> rmd.all(skipContributors=True)\n(('ambitus',\n    AmbitusShort(semitones=48, diatonic='P1', pitchLowest='C2', pitchHighest='C6')),\n ('copyright', '\u00c2\u00a9 2014, Creative Commons License (CC-BY)'),\n ('corpusFilePath', 'corelli/opus3no1/1grave.xml'),\n ('dateCreated', '1689/--/-- or earlier'),\n ('fileFormat', 'musicxml'),\n ...\n ('keySignatures', [-1]),\n ('localeOfComposition', 'Rome'),\n ('movementName', 'Sonata da Chiesa, No. I (opus 3, no. 1)'),\n ...\n ('timeSignatures', ['4/4']))\n\n\n>>> rmd.all(returnPrimitives=True, returnSorted=False)\n(('software', <music21.metadata.primitives.Text music21 ...>),\n ('software', <music21.metadata.primitives.Text Finale 2014 for Mac>),\n ('software', <music21.metadata.primitives.Text Dolet Light for Finale 2014>),\n ('movementName', <...Text Sonata da Chiesa, No. I (opus 3, no. 1)>),\n ('composer', <music21.metadata.primitives.Contributor composer:Arcangelo Corelli>),\n ...\n ('timeSignatures', ['4/4']))\n\n\n>>> rmd.all(skipNonContributors=True, returnPrimitives=True, returnSorted=True)\n(('arranger', <music21.metadata.primitives.Contributor arranger:Michael Scott Cuthbert>),\n ('composer', <music21.metadata.primitives.Contributor composer:Arcangelo Corelli>))",
        "type": "ListItem"
    },
    {
        "text": "RichMetadata.",
        "type": "Title"
    },
    {
        "text": "getSourcePath",
        "type": "Title"
    },
    {
        "text": "streamObj",
        "type": "Title"
    },
    {
        "text": "\u2192 str",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get a string of the path after the corpus for the piece\u2026useful for\nsearching on corpus items without proper composer data\u2026\n>>> rmd = metadata.RichMetadata()\n>>> b = corpus.parse('bwv66.6')\n>>> rmd.getSourcePath(b)\n'bach/bwv66.6.mxl'",
        "type": "ListItem"
    },
    {
        "text": "RichMetadata.",
        "type": "Title"
    },
    {
        "text": "merge",
        "type": "Title"
    },
    {
        "text": "other",
        "type": "Title"
    },
    {
        "text": "favorSelf",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given another Metadata or RichMetadata object, combine\nall attributes and return a new object.\n>>> md = metadata.Metadata(title='Concerto in F')\n>>> md.title\n'Concerto in F'\n\n\n>>> richMetadata = metadata.RichMetadata()\n>>> richMetadata.merge(md)\n>>> richMetadata.title\n'Concerto in F'",
        "type": "ListItem"
    },
    {
        "text": "RichMetadata.",
        "type": "Title"
    },
    {
        "text": "update",
        "type": "Title"
    },
    {
        "text": "streamObj",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given a Stream object, update attributes with stored objects.\n>>> rmd = metadata.RichMetadata()\n>>> rmd.keySignatureFirst is None\nTrue\n>>> rmd.sourcePath\n''\n\n\n>>> b = corpus.parse('bwv66.6')\n>>> rmd.update(b)\n>>> rmd.keySignatureFirst\n3\n>>> rmd.sourcePath\n'bach/bwv66.6.mxl'\n>>> rmd.numberOfParts\n4",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from Metadata:",
        "type": "NarrativeText"
    },
    {
        "text": "__getitem__() add() addContributor() addCustom() getContributorsByRole() getCustom() isContributorUniqueName() isStandardName() namespaceNameToUniqueName() search() setCustom() uniqueNameToNamespaceName()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "RichMetadata instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.metadata",
        "type": "ListItem"
    },
    {
        "text": "\u00a9 Copyright 2006-2023 Michael Scott Asato Cuthbert.\n      Last updated on Jun 12, 2023.",
        "type": "NarrativeText"
    }
]