[
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.beam",
        "type": "ListItem"
    },
    {
        "text": "Previous topic",
        "type": "Title"
    },
    {
        "text": "music21.base",
        "type": "Title"
    },
    {
        "text": "Next topic",
        "type": "Title"
    },
    {
        "text": "music21.braille.basic",
        "type": "Title"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "music21.beam\nBeams\nBeams\nBeams.__eq__()\nBeams.append()\nBeams.fill()\nBeams.getByNumber()\nBeams.getNumbers()\nBeams.getTypeByNumber()\nBeams.getTypes()\nBeams.mergeConnectingPartialBeams()\nBeams.naiveBeams()\nBeams.removeSandwichedUnbeamables()\nBeams.sanitizePartialBeams()\nBeams.setAll()\nBeams.setByNumber()\nBeams.feathered\n\n\n\n\nBeam\nBeam",
        "type": "ListItem"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "About music21",
        "type": "ListItem"
    },
    {
        "text": "User's Guide",
        "type": "ListItem"
    },
    {
        "text": "Module Reference",
        "type": "ListItem"
    },
    {
        "text": "Installation",
        "type": "ListItem"
    },
    {
        "text": "Developer Reference",
        "type": "ListItem"
    },
    {
        "text": "Documentation and tests in progress",
        "type": "ListItem"
    },
    {
        "text": "Quick search",
        "type": "Title"
    },
    {
        "text": "This Page",
        "type": "Title"
    },
    {
        "text": "Show Source",
        "type": "ListItem"
    },
    {
        "text": "music21.beam\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "The module defines Beam and Beams (note plural) objects.",
        "type": "NarrativeText"
    },
    {
        "text": "The Beams object holds multiple Beam objects (e.g., a 32nd note might have\nthree Beam objects in its Beam object).",
        "type": "NarrativeText"
    },
    {
        "text": "The Beams object is stored in Note and\nChord objects as their beams\nattributes.  Beams objects can largely be treated as a list.",
        "type": "NarrativeText"
    },
    {
        "text": "See meter.TimeSignature. getBeams() for a\nway of getting beam information for a measure given the meter.  The\nmeter.TimeSignature. beamSequence\nattribute holds information about how to beam given the TimeSignature",
        "type": "NarrativeText"
    },
    {
        "text": "Run Stream. makeBeams() to set beaming\ninformation automatically given the current meter.",
        "type": "NarrativeText"
    },
    {
        "text": "Suppose you had a measure of two eighths and a quarter and wanted to explicitly\nbeam the two eighth notes.  You could do this:",
        "type": "NarrativeText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "n1",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "'C4'",
        "type": "UncategorizedText"
    },
    {
        "text": "quarterLength",
        "type": "Title"
    },
    {
        "text": "0.5",
        "type": "UncategorizedText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "n2",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "'D4'",
        "type": "UncategorizedText"
    },
    {
        "text": "quarterLength",
        "type": "Title"
    },
    {
        "text": "0.5",
        "type": "UncategorizedText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "n3",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "'E4'",
        "type": "UncategorizedText"
    },
    {
        "text": "quarterLength",
        "type": "Title"
    },
    {
        "text": "1.0",
        "type": "UncategorizedText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "append",
        "type": "Title"
    },
    {
        "text": "n1",
        "type": "Title"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "append",
        "type": "Title"
    },
    {
        "text": "n2",
        "type": "Title"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "append",
        "type": "Title"
    },
    {
        "text": "n3",
        "type": "Title"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "n1",
        "type": "Title"
    },
    {
        "text": "beams",
        "type": "Title"
    },
    {
        "text": "fill",
        "type": "Title"
    },
    {
        "text": "'eighth'",
        "type": "Title"
    },
    {
        "text": "type",
        "type": "Title"
    },
    {
        "text": "'start'",
        "type": "Title"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "n2",
        "type": "Title"
    },
    {
        "text": "beams",
        "type": "Title"
    },
    {
        "text": "fill",
        "type": "Title"
    },
    {
        "text": "'eighth'",
        "type": "Title"
    },
    {
        "text": "type",
        "type": "Title"
    },
    {
        "text": "'stop'",
        "type": "Title"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "n1",
        "type": "Title"
    },
    {
        "text": "beams",
        "type": "Title"
    },
    {
        "text": "<music21.beam.Beams <music21.beam.Beam 1/start>>",
        "type": "Title"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "n2",
        "type": "Title"
    },
    {
        "text": "beams",
        "type": "Title"
    },
    {
        "text": "<music21.beam.Beams <music21.beam.Beam 1/stop>>",
        "type": "Title"
    },
    {
        "text": "But suppose you wanted something harder: two 16ths, an 8th, a quarter, with the\nfirst 3 notes beamed?  The first note and 3rd are easy to do, using the method\nabove:",
        "type": "NarrativeText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "n1",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "'C4'",
        "type": "UncategorizedText"
    },
    {
        "text": "quarterLength",
        "type": "Title"
    },
    {
        "text": "0.25",
        "type": "UncategorizedText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "n2",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "'D4'",
        "type": "UncategorizedText"
    },
    {
        "text": "quarterLength",
        "type": "Title"
    },
    {
        "text": "0.25",
        "type": "UncategorizedText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "n3",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "'E4'",
        "type": "UncategorizedText"
    },
    {
        "text": "quarterLength",
        "type": "Title"
    },
    {
        "text": "0.5",
        "type": "UncategorizedText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "n4",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "'F4'",
        "type": "UncategorizedText"
    },
    {
        "text": "quarterLength",
        "type": "Title"
    },
    {
        "text": "1.0",
        "type": "UncategorizedText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "n1",
        "type": "Title"
    },
    {
        "text": "n2",
        "type": "Title"
    },
    {
        "text": "n3",
        "type": "Title"
    },
    {
        "text": "n4",
        "type": "Title"
    },
    {
        "text": "]:",
        "type": "UncategorizedText"
    },
    {
        "text": "...",
        "type": "UncategorizedText"
    },
    {
        "text": "append",
        "type": "Title"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "n1",
        "type": "Title"
    },
    {
        "text": "beams",
        "type": "Title"
    },
    {
        "text": "fill",
        "type": "Title"
    },
    {
        "text": "'16th'",
        "type": "UncategorizedText"
    },
    {
        "text": "type",
        "type": "Title"
    },
    {
        "text": "'start'",
        "type": "Title"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "n3",
        "type": "Title"
    },
    {
        "text": "beams",
        "type": "Title"
    },
    {
        "text": "fill",
        "type": "Title"
    },
    {
        "text": "'eighth'",
        "type": "Title"
    },
    {
        "text": "type",
        "type": "Title"
    },
    {
        "text": "'stop'",
        "type": "Title"
    },
    {
        "text": "but the second note has an 8th beam that continues and a 16th beam that stops.\nSo you will need to set them separately:",
        "type": "NarrativeText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "n2",
        "type": "Title"
    },
    {
        "text": "beams",
        "type": "Title"
    },
    {
        "text": "append",
        "type": "Title"
    },
    {
        "text": "'continue'",
        "type": "Title"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "n2",
        "type": "Title"
    },
    {
        "text": "beams",
        "type": "Title"
    },
    {
        "text": "append",
        "type": "Title"
    },
    {
        "text": "'stop'",
        "type": "Title"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "n2",
        "type": "Title"
    },
    {
        "text": "beams",
        "type": "Title"
    },
    {
        "text": "<music21.beam.Beams <music21.beam.Beam 1/continue>/<music21.beam.Beam 2/stop>>",
        "type": "Title"
    },
    {
        "text": "To get rid of beams on a note do:",
        "type": "NarrativeText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "n2",
        "type": "Title"
    },
    {
        "text": "beams",
        "type": "Title"
    },
    {
        "text": "beamsList",
        "type": "Title"
    },
    {
        "text": "[]",
        "type": "UncategorizedText"
    },
    {
        "text": "Beams\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.beam.",
        "type": "Title"
    },
    {
        "text": "Beams",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The Beams object stores in it attribute beamsList (a list) all the Beam\nobjects defined above.  Thus, len(beam.Beams) tells you how many beams the\nnote currently has on it, and iterating over a Beams object gives you each\nBeam.\n>>> n = note.Note(type='16th')\n>>> isinstance(n.beams, beam.Beams)\nTrue\n\n\n>>> n.beams.fill(2, 'start')\n>>> len(n.beams)\n2\n\n\n>>> for thisBeam in n.beams:\n...     thisBeam.type\n'start'\n'start'\n\n\n>>> print(n.beams)\n<music21.beam.Beams <music21.beam.Beam 1/start>/<music21.beam.Beam 2/start>>",
        "type": "ListItem"
    },
    {
        "text": "Beams bases",
        "type": "Title"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "EqualSlottedObjectMixin",
        "type": "ListItem"
    },
    {
        "text": "SlottedObjectMixin",
        "type": "ListItem"
    },
    {
        "text": "Beams read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "Beams methods",
        "type": "Title"
    },
    {
        "text": "Beams.",
        "type": "Title"
    },
    {
        "text": "__eq__",
        "type": "UncategorizedText"
    },
    {
        "text": "other",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return self==value.",
        "type": "ListItem"
    },
    {
        "text": "Beams.",
        "type": "Title"
    },
    {
        "text": "append",
        "type": "Title"
    },
    {
        "text": "type",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Append a new Beam object to this Beams object, automatically creating the Beam\nobject and incrementing the number count.\n>>> beams = beam.Beams()\n>>> beams.append('start')\n>>> beams.beamsList\n[<music21.beam.Beam 1/start>]\n\n\n>>> beams.append('partial', 'right')\n>>> beams.beamsList\n[<music21.beam.Beam 1/start>, <music21.beam.Beam 2/partial/right>]\n\n\nA beam object can also be specified:\n>>> beams = beam.Beams()\n>>> beam1 = beam.Beam(type='start', number=1)\n>>> beams.append(beam1)\n>>> beams.beamsList\n[<music21.beam.Beam 1/start>]",
        "type": "ListItem"
    },
    {
        "text": "Beams.",
        "type": "Title"
    },
    {
        "text": "fill",
        "type": "Title"
    },
    {
        "text": "level",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "type",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A quick way of setting the beams list for a particular duration, for\ninstance, fill(\u009816th') will clear the current list of beams in the\nBeams object and add two beams.  fill(2) will do the same (though note\nthat that is an int, not a string).\nIt does not do anything to the direction that the beams are going in,\nor by default.  Either set type here or call setAll() on the Beams\nobject afterwards.\nBoth \u009ceighth\u009d and \u009c8th\u009d work.  Adding more than nine beams (i.e. things\nlike 4096th notes) raises an error.\n>>> a = beam.Beams()\n>>> a.fill('16th')\n>>> len(a)\n2\n\n\n>>> a.fill('32nd', type='start')\n>>> len(a)\n3\n\n\n>>> a.beamsList[2]\n<music21.beam.Beam 3/start>\n\n\n>>> a.beamsList[2].type\n'start'\n\n\nFilling a smaller number wipes larger numbers of beams:\n>>> a.fill('eighth', type='start')\n>>> len(a)\n1",
        "type": "ListItem"
    },
    {
        "text": "Beams.",
        "type": "Title"
    },
    {
        "text": "getByNumber",
        "type": "Title"
    },
    {
        "text": "number",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Gets an internal beam object by number.\n>>> a = beam.Beams()\n>>> a.fill('16th')\n>>> a.setAll('start')\n>>> a.getByNumber(2).type\n'start'\n\n\n>>> a.getByNumber(30)\nTraceback (most recent call last):\nIndexError: beam number 30 cannot be accessed",
        "type": "ListItem"
    },
    {
        "text": "Beams.",
        "type": "Title"
    },
    {
        "text": "getNumbers",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns a list of all defined beam numbers; it should normally be a set\nof consecutive integers, but it might not be.\n>>> a = beam.Beams()\n>>> a.fill('32nd')\n>>> a.getNumbers()\n[1, 2, 3]",
        "type": "ListItem"
    },
    {
        "text": "Beams.",
        "type": "Title"
    },
    {
        "text": "getTypeByNumber",
        "type": "Title"
    },
    {
        "text": "number",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get beam type, with direction, by number\n>>> a = beam.Beams()\n>>> a.fill('16th')\n>>> a.setAll('start')\n>>> a.setByNumber(2, 'partial-right')\n>>> a.getTypeByNumber(2)\n'partial-right'\n\n\n>>> a.getTypeByNumber(1)\n'start'",
        "type": "ListItem"
    },
    {
        "text": "Beams.",
        "type": "Title"
    },
    {
        "text": "getTypes",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns a list of all beam types defined for the current beams\n>>> a = beam.Beams()\n>>> a.fill('16th')\n>>> a.setAll('start')\n>>> a.getTypes()\n['start', 'start']",
        "type": "ListItem"
    },
    {
        "text": "static",
        "type": "Title"
    },
    {
        "text": "Beams.",
        "type": "Title"
    },
    {
        "text": "mergeConnectingPartialBeams",
        "type": "Title"
    },
    {
        "text": "beamsList",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Partial-right followed by partial-left must also be connected, even if otherwise\nover a archetypeSpan, such as 16th notes 2 and 3 in a quarter note span where\n16ths are not beamed by default.",
        "type": "ListItem"
    },
    {
        "text": "static",
        "type": "Title"
    },
    {
        "text": "Beams.",
        "type": "Title"
    },
    {
        "text": "naiveBeams",
        "type": "Title"
    },
    {
        "text": "srcList",
        "type": "Title"
    },
    {
        "text": "Iterable[base.Music21Object]",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given a list or iterator of elements, return a list of None or Beams for\neach element: None if the element is a quarter or larger or\nif the element is a Rest, and the fullest possible set of beams\nfor the duration if it is a beamable.  Each beam object has type of None\nstaticmethod, does not need instance:\n>>> durList = [0, -1, -2, -3]\n>>> srcList = [note.Note(quarterLength=2 ** x) for x in durList]\n>>> srcList.append(note.Rest(type='32nd'))\n>>> beam.Beams.naiveBeams(srcList)\n[None,\n <music21.beam.Beams <music21.beam.Beam 1/None>>,\n <music21.beam.Beams <music21.beam.Beam 1/None>/<music21.beam.Beam 2/None>>,\n <music21.beam.Beams <music21.beam.Beam 1/None>/<music21.beam.Beam\n             2/None>/<music21.beam.Beam 3/None>>,\n None]",
        "type": "ListItem"
    },
    {
        "text": "static",
        "type": "Title"
    },
    {
        "text": "Beams.",
        "type": "Title"
    },
    {
        "text": "removeSandwichedUnbeamables",
        "type": "Title"
    },
    {
        "text": "beamsList",
        "type": "Title"
    },
    {
        "text": "list",
        "type": "Title"
    },
    {
        "text": "music21.beam.Beams",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Go through the naiveBeamsList and remove beams from objects surrounded\nby None objects \u2014 you can't beam to nothing!\nModifies beamsList in place\n>>> N = note.Note\n>>> R = note.Rest\n>>> e = 'eighth'\n>>> nList = [N(type=e), R(type=e), N(type=e), N(type=e),\n...          R(type=e), N(type=e), R(type=e), N(type=e)]\n>>> beamsList = beam.Beams.naiveBeams(nList)\n>>> beamsList\n[<music21.beam.Beams <music21.beam.Beam 1/None>>,\n None,\n <music21.beam.Beams <music21.beam.Beam 1/None>>,\n <music21.beam.Beams <music21.beam.Beam 1/None>>,\n None,\n <music21.beam.Beams <music21.beam.Beam 1/None>>,\n None,\n <music21.beam.Beams <music21.beam.Beam 1/None>>]\n\n\n>>> beamsList2 = beam.Beams.removeSandwichedUnbeamables(beamsList)\n>>> beamsList2 is beamsList\nTrue\n>>> beamsList2\n[None,\n None,\n <music21.beam.Beams <music21.beam.Beam 1/None>>,\n <music21.beam.Beams <music21.beam.Beam 1/None>>,\n None,\n None,\n None,\n None]",
        "type": "ListItem"
    },
    {
        "text": "static",
        "type": "Title"
    },
    {
        "text": "Beams.",
        "type": "Title"
    },
    {
        "text": "sanitizePartialBeams",
        "type": "Title"
    },
    {
        "text": "beamsList",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "It is possible at a late stage to have beams that only consist of partials\nor beams with a \u0098start' followed by \u0098partial/left' or possibly \u0098stop' followed\nby \u0098partial/right'; beams entirely consisting of partials are removed\nand the direction of irrational partials is fixed.",
        "type": "ListItem"
    },
    {
        "text": "Beams.",
        "type": "Title"
    },
    {
        "text": "setAll",
        "type": "Title"
    },
    {
        "text": "type",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "setAll is a method of convenience that sets the type\nof each of the beam objects within the beamsList to the specified type.\nIt also takes an optional \u009cdirection\u009d attribute that sets the direction\nfor each beam (otherwise the direction of each beam is set to None)\nAcceptable directions (start, stop, continue, etc.) are listed under\nBeam() above.\n>>> a = beam.Beams()\n>>> a.fill('16th')\n>>> a.setAll('start')\n>>> a.getTypes()\n['start', 'start']\n\n\n>>> a.setAll('sexy')\nTraceback (most recent call last):\nmusic21.beam.BeamException: beam type cannot be sexy",
        "type": "ListItem"
    },
    {
        "text": "Beams.",
        "type": "Title"
    },
    {
        "text": "setByNumber",
        "type": "Title"
    },
    {
        "text": "number",
        "type": "Title"
    },
    {
        "text": "type",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Set an internal beam object by number, or rhythmic symbol level.\n>>> a = beam.Beams()\n>>> a.fill('16th')\n>>> a.setAll('start')\n>>> a.setByNumber(1, 'continue')\n>>> a.beamsList[0].type\n'continue'\n\n\n>>> a.setByNumber(2, 'stop')\n>>> a.beamsList[1].type\n'stop'\n\n\n>>> a.setByNumber(2, 'partial-right')\n>>> a.beamsList[1].type\n'partial'\n\n\n>>> a.beamsList[1].direction\n'right'\n\n\n>>> a.setByNumber(30, 'stop')\nTraceback (most recent call last):\nIndexError: beam number 30 cannot be accessed\n\n\n>>> a.setByNumber(2, 'crazy')\nTraceback (most recent call last):\nmusic21.beam.BeamException: beam type cannot be crazy",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "Beams instance variables",
        "type": "Title"
    },
    {
        "text": "Beams.",
        "type": "Title"
    },
    {
        "text": "feathered",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Boolean determining if this is a feathered beam or not\n(does nothing for now).",
        "type": "ListItem"
    },
    {
        "text": "Beam\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.beam.",
        "type": "Title"
    },
    {
        "text": "Beam",
        "type": "Title"
    },
    {
        "text": "type",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "number",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A Beam is an object representation of one single beam, that is, one\nhorizontal line connecting two notes together (or less commonly a note to a\nrest).  Thus, it takes two separate Beam objects to represent the beaming of\na 16th note.\nThe Beams object (note the plural) is the object that handles groups of\nBeam objects; it is defined later on.\nHere are two ways to define the start of a beam\n>>> b1 = beam.Beam(type='start')\n>>> b2 = beam.Beam('start')\n\n\nHere is a partial beam (that is, one that does not connect to any other\nnote, such as the second beam of a dotted eighth, sixteenth group)\nTwo ways of doing the same thing\n>>> b3 = beam.Beam(number=1, type='partial', direction='left')\n>>> b3\n<music21.beam.Beam 1/partial/left>\n\n\n>>> b4 = beam.Beam('partial', 'left')\n>>> b4.number = 1\n>>> b4\n<music21.beam.Beam 1/partial/left>\n\n\nAll attributes must be the same for equality:\n>>> b3 == b4\nTrue\n\n\n>>> b2\n<music21.beam.Beam None/start>\n>>> b2 == b3\nFalse",
        "type": "ListItem"
    },
    {
        "text": "Beam bases",
        "type": "Title"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "EqualSlottedObjectMixin",
        "type": "ListItem"
    },
    {
        "text": "StyleMixin",
        "type": "ListItem"
    },
    {
        "text": "SlottedObjectMixin",
        "type": "ListItem"
    },
    {
        "text": "Beam read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from StyleMixin:",
        "type": "NarrativeText"
    },
    {
        "text": "hasEditorialInformation hasStyleInformation",
        "type": "Table"
    },
    {
        "text": "Beam read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from StyleMixin:",
        "type": "NarrativeText"
    },
    {
        "text": "editorial style",
        "type": "Table"
    },
    {
        "text": "Beam methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from EqualSlottedObjectMixin:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__()",
        "type": "Table"
    },
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.beam",
        "type": "ListItem"
    },
    {
        "text": "\u00a9 Copyright 2006-2023 Michael Scott Asato Cuthbert.\n      Last updated on Jun 12, 2023.",
        "type": "NarrativeText"
    }
]