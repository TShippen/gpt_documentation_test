[
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.common.objects",
        "type": "ListItem"
    },
    {
        "text": "Previous topic",
        "type": "Title"
    },
    {
        "text": "music21.common.numberTools",
        "type": "Title"
    },
    {
        "text": "Next topic",
        "type": "Title"
    },
    {
        "text": "music21.common.parallel",
        "type": "Title"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "music21.common.objects\nEqualSlottedObjectMixin\nEqualSlottedObjectMixin\nEqualSlottedObjectMixin.__eq__()\n\n\n\n\nFrozenObject\nFrozenObject\n\n\nRelativeCounter\nRelativeCounter\nRelativeCounter.asPercentage()\nRelativeCounter.asProportion()\nRelativeCounter.items()\n\n\n\n\nSingletonCounter\nSingletonCounter\n\n\nSlottedObjectMixin\nSlottedObjectMixin\n\n\nTimer\nTimer\nTimer.clear()\nTimer.start()\nTimer.stop()\n\n\n\n\ndefaultlist\ndefaultlist\ndefaultlist.__getitem__()",
        "type": "ListItem"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "About music21",
        "type": "ListItem"
    },
    {
        "text": "User's Guide",
        "type": "ListItem"
    },
    {
        "text": "Module Reference",
        "type": "ListItem"
    },
    {
        "text": "Installation",
        "type": "ListItem"
    },
    {
        "text": "Developer Reference",
        "type": "ListItem"
    },
    {
        "text": "Documentation and tests in progress",
        "type": "ListItem"
    },
    {
        "text": "Quick search",
        "type": "Title"
    },
    {
        "text": "This Page",
        "type": "Title"
    },
    {
        "text": "Show Source",
        "type": "ListItem"
    },
    {
        "text": "music21.common.objects\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "EqualSlottedObjectMixin\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.common.objects.",
        "type": "Title"
    },
    {
        "text": "EqualSlottedObjectMixin",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Same as above, but __eq__ and __ne__ functions are defined based on the slots.\nSlots are the only things compared, so do not mix with a __dict__ based object.\nThe equal comparison ignores differences in .id",
        "type": "ListItem"
    },
    {
        "text": "EqualSlottedObjectMixin bases",
        "type": "Title"
    },
    {
        "text": "SlottedObjectMixin",
        "type": "ListItem"
    },
    {
        "text": "EqualSlottedObjectMixin methods",
        "type": "Title"
    },
    {
        "text": "EqualSlottedObjectMixin.",
        "type": "Title"
    },
    {
        "text": "__eq__",
        "type": "UncategorizedText"
    },
    {
        "text": "other",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return self==value.",
        "type": "ListItem"
    },
    {
        "text": "FrozenObject\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.common.objects.",
        "type": "Title"
    },
    {
        "text": "FrozenObject",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "FrozenObject bases",
        "type": "Title"
    },
    {
        "text": "EqualSlottedObjectMixin",
        "type": "ListItem"
    },
    {
        "text": "SlottedObjectMixin",
        "type": "ListItem"
    },
    {
        "text": "FrozenObject methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from EqualSlottedObjectMixin:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__()",
        "type": "Table"
    },
    {
        "text": "RelativeCounter\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.common.objects.",
        "type": "Title"
    },
    {
        "text": "RelativeCounter",
        "type": "Title"
    },
    {
        "text": "iterable",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "kwds",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A counter that iterates from most common to least common\nand can return new RelativeCounters that adjust for proportion or percentage.\n>>> l = ['b', 'b', 'a', 'a', 'a', 'a', 'c', 'd', 'd', 'd'] + ['e'] * 10\n>>> rc = common.RelativeCounter(l)\n>>> for k in rc:\n...     print(k, rc[k])\ne 10\na 4\nd 3\nb 2\nc 1\n\n\nTies are iterated according to which appeared first in the generated list.\n>>> rcProportion = rc.asProportion()\n>>> rcProportion['b']\n0.1\n>>> rcProportion['e']\n0.5\n>>> rcPercentage = rc.asPercentage()\n>>> rcPercentage['b']\n10.0\n>>> rcPercentage['e']\n50.0\n\n\n>>> for k, perc in rcPercentage.items():\n...     print(k, perc)\ne 50.0\na 20.0\nd 15.0\nb 10.0\nc 5.0",
        "type": "ListItem"
    },
    {
        "text": "RelativeCounter methods",
        "type": "Title"
    },
    {
        "text": "RelativeCounter.",
        "type": "Title"
    },
    {
        "text": "asPercentage",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "RelativeCounter.",
        "type": "Title"
    },
    {
        "text": "asProportion",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "RelativeCounter.",
        "type": "Title"
    },
    {
        "text": "items",
        "type": "Title"
    },
    {
        "text": "\u2192 a set-like object providing a view on D's items",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "SingletonCounter\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.common.objects.",
        "type": "Title"
    },
    {
        "text": "SingletonCounter",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A simple counter that can produce unique numbers (in ascending order)\nregardless of how many instances exist.\nInstantiate and then call it.\n>>> sc = common.SingletonCounter()\n>>> v0 = sc()\n>>> v1 = sc()\n>>> v1 > v0\nTrue\n>>> sc2 = common.SingletonCounter()\n>>> v2 = sc2()\n>>> v2 > v1\nTrue",
        "type": "ListItem"
    },
    {
        "text": "SlottedObjectMixin\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.common.objects.",
        "type": "Title"
    },
    {
        "text": "SlottedObjectMixin",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Provides template for classes implementing slots allowing it to be pickled\nproperly, even if there are weakrefs in the slots, or it is subclassed\nby something that does not define slots.\nOnly use SlottedObjectMixins for objects that we expect to make so many of\nthat memory storage and speed become an issue. Thus, unless you are Xenakis,\nGlissdata is probably not the best example:\n>>> import pickle\n>>> class Glissdata(common.SlottedObjectMixin):\n...     __slots__ = ('time', 'frequency')\n>>> s = Glissdata()\n>>> s.time = 0.125\n>>> s.frequency = 440.0\n>>> out = pickle.dumps(s)\n>>> pickleLoad = pickle.loads(out)\n>>> pickleLoad.time, pickleLoad.frequency\n(0.125, 440.0)",
        "type": "ListItem"
    },
    {
        "text": "Timer\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.common.objects.",
        "type": "Title"
    },
    {
        "text": "Timer",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An object for timing. Call it to get the current time since starting.\n>>> timer = common.Timer()\n>>> now = timer()\n>>> nowNow = timer()\n>>> nowNow > now\nTrue\n\n\nCall stop to stop it. Calling start again will reset the number\n>>> timer.stop()\n>>> stopTime = timer()\n>>> stopNow = timer()\n>>> stopTime == stopNow\nTrue\n\n\nAll this had better take less than one second!\n>>> stopTime < 1\nTrue",
        "type": "ListItem"
    },
    {
        "text": "Timer methods",
        "type": "Title"
    },
    {
        "text": "Timer.",
        "type": "Title"
    },
    {
        "text": "clear",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Timer.",
        "type": "Title"
    },
    {
        "text": "start",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Explicit start method; will clear previous values.\nStart always happens on initialization.",
        "type": "ListItem"
    },
    {
        "text": "Timer.",
        "type": "Title"
    },
    {
        "text": "stop",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "defaultlist\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.common.objects.",
        "type": "Title"
    },
    {
        "text": "defaultlist",
        "type": "Title"
    },
    {
        "text": "fx",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Call a function for every time something is missing:\n>>> a = common.defaultlist(lambda:True)\n>>> a[5]\nTrue",
        "type": "ListItem"
    },
    {
        "text": "defaultlist methods",
        "type": "Title"
    },
    {
        "text": "defaultlist.",
        "type": "Title"
    },
    {
        "text": "__getitem__",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "x.__getitem__(y) <==> x[y]",
        "type": "ListItem"
    },
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.common.objects",
        "type": "ListItem"
    },
    {
        "text": "\u00a9 Copyright 2006-2023 Michael Scott Asato Cuthbert.\n      Last updated on Jun 12, 2023.",
        "type": "NarrativeText"
    }
]