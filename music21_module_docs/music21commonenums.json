[
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.common.enums",
        "type": "ListItem"
    },
    {
        "text": "Previous topic",
        "type": "Title"
    },
    {
        "text": "music21.common.decorators",
        "type": "Title"
    },
    {
        "text": "Next topic",
        "type": "Title"
    },
    {
        "text": "music21.common.fileTools",
        "type": "Title"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "music21.common.enums\nAppendSpanners\nAppendSpanners\n\n\nBooleanEnum\nBooleanEnum\n\n\nElementSearch\nElementSearch\n\n\nGatherSpanners\nGatherSpanners\n\n\nMeterDivision\nMeterDivision\n\n\nOffsetSpecial\nOffsetSpecial\n\n\nOrnamentDelay\nOrnamentDelay\n\n\nStrEnum\nStrEnum\n\n\nStrEnumMeta\nStrEnumMeta",
        "type": "ListItem"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "About music21",
        "type": "ListItem"
    },
    {
        "text": "User's Guide",
        "type": "ListItem"
    },
    {
        "text": "Module Reference",
        "type": "ListItem"
    },
    {
        "text": "Installation",
        "type": "ListItem"
    },
    {
        "text": "Developer Reference",
        "type": "ListItem"
    },
    {
        "text": "Documentation and tests in progress",
        "type": "ListItem"
    },
    {
        "text": "Quick search",
        "type": "Title"
    },
    {
        "text": "This Page",
        "type": "Title"
    },
    {
        "text": "Show Source",
        "type": "ListItem"
    },
    {
        "text": "music21.common.enums\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "AppendSpanners\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.common.enums.",
        "type": "Title"
    },
    {
        "text": "AppendSpanners",
        "type": "Title"
    },
    {
        "text": "value",
        "type": "Title"
    },
    {
        "text": "names",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "module",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "qualname",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "type",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "start",
        "type": "Title"
    },
    {
        "text": "boundary",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An enumeration for how to append related spanners when appending objects to a written file.\n\nAppendSpanners.NORMAL means append the spanners that start with the object, then appendthe object, then append the spanners that end with the object.\n\nAppendSpanners.RELATED_ONLY means append the spanners that start with the object, thenappend the spanners that end with the object (i.e. do not append the object).\n\nAppendSpanners.NONE means do not append the related spanners at all (i.e. only appendthe object).\n\n\n\nnew in v9.",
        "type": "ListItem"
    },
    {
        "text": "AppendSpanners bases",
        "type": "Title"
    },
    {
        "text": "StrEnum",
        "type": "ListItem"
    },
    {
        "text": "BooleanEnum\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.common.enums.",
        "type": "Title"
    },
    {
        "text": "BooleanEnum",
        "type": "Title"
    },
    {
        "text": "value",
        "type": "Title"
    },
    {
        "text": "names",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "module",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "qualname",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "type",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "start",
        "type": "Title"
    },
    {
        "text": "boundary",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An enum that replaces a boolean, except the \u009cis\u009d part, and\nallows specifying multiple values that can specify whether they\nequate to True or False.\nUseful for taking an element that was previously True/False and\nreplacing it in a backwards-compatible way with an Enum.\n>>> from music21.common.enums import BooleanEnum\n>>> class Maybe(BooleanEnum):\n...    YES = True\n...    NO = False\n...    MAYBE = 0.5\n...    NOT_A_CHANCE = (False, 'not a chance')\n...    DEFINITELY = (True, 'of course!')\n>>> bool(Maybe.YES)\nTrue\n>>> bool(Maybe.NO)\nFalse\n>>> bool(Maybe.MAYBE)\nTrue\n>>> bool(Maybe.NOT_A_CHANCE)\nFalse\n>>> bool(Maybe.DEFINITELY)\nTrue\n>>> Maybe.MAYBE == 0.5\nTrue\n>>> Maybe.NOT_A_CHANCE == 'not a chance'\nTrue\n>>> Maybe.NOT_A_CHANCE == False\nTrue\n>>> Maybe.NOT_A_CHANCE == True\nFalse\n>>> Maybe.NOT_A_CHANCE == 'not any chance'\nFalse\n>>> Maybe.DEFINITELY == 'of course!'\nTrue\n>>> Maybe.NOT_A_CHANCE == (False, 'not a chance')\nTrue",
        "type": "ListItem"
    },
    {
        "text": "ElementSearch\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.common.enums.",
        "type": "Title"
    },
    {
        "text": "ElementSearch",
        "type": "Title"
    },
    {
        "text": "value",
        "type": "Title"
    },
    {
        "text": "names",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "module",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "qualname",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "type",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "start",
        "type": "Title"
    },
    {
        "text": "boundary",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An enum representing the element search directions that can be provided\nto getContextByClass().",
        "type": "ListItem"
    },
    {
        "text": "ElementSearch bases",
        "type": "Title"
    },
    {
        "text": "StrEnum",
        "type": "ListItem"
    },
    {
        "text": "GatherSpanners\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.common.enums.",
        "type": "Title"
    },
    {
        "text": "GatherSpanners",
        "type": "Title"
    },
    {
        "text": "value",
        "type": "Title"
    },
    {
        "text": "names",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "module",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "qualname",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "type",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "start",
        "type": "Title"
    },
    {
        "text": "boundary",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An enumeration for how to gather missing spanners\n>>> from music21.common.enums import GatherSpanners\n\n\nIndicates all relevant spanners will be gathered:\n>>> GatherSpanners.ALL\n<GatherSpanners.ALL>\n>>> bool(GatherSpanners.ALL)\nTrue\n\n\nIndicates no relevant spanners will be gathered:\n>>> GatherSpanners.NONE\n<GatherSpanners.NONE>\n>>> bool(GatherSpanners.NONE)\nFalse\n\n\nIndicates only spanners where all of their members are in the excerpt\nwill be gathered:\n>>> GatherSpanners.COMPLETE_ONLY\n<GatherSpanners.COMPLETE_ONLY>\n>>> bool(GatherSpanners.COMPLETE_ONLY)\nTrue",
        "type": "ListItem"
    },
    {
        "text": "GatherSpanners bases",
        "type": "Title"
    },
    {
        "text": "BooleanEnum",
        "type": "ListItem"
    },
    {
        "text": "MeterDivision\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.common.enums.",
        "type": "Title"
    },
    {
        "text": "MeterDivision",
        "type": "Title"
    },
    {
        "text": "value",
        "type": "Title"
    },
    {
        "text": "names",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "module",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "qualname",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "type",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "start",
        "type": "Title"
    },
    {
        "text": "boundary",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Represents an indication of how to divide a TimeSignature\n\nNew in v7.",
        "type": "ListItem"
    },
    {
        "text": "MeterDivision bases",
        "type": "Title"
    },
    {
        "text": "StrEnum",
        "type": "ListItem"
    },
    {
        "text": "OffsetSpecial\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.common.enums.",
        "type": "Title"
    },
    {
        "text": "OffsetSpecial",
        "type": "Title"
    },
    {
        "text": "value",
        "type": "Title"
    },
    {
        "text": "names",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "module",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "qualname",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "type",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "start",
        "type": "Title"
    },
    {
        "text": "boundary",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An enum that represents special offsets.\nThe enum AT_END is equal to the string \u0098highestTime'\nIn version 9, the string comparisons will be removed.\n>>> from music21.common.enums import OffsetSpecial\n>>> OffsetSpecial.AT_END\n<OffsetSpecial.AT_END>\n>>> 'highestTime' == OffsetSpecial.AT_END\nTrue\n>>> 'crazyOffset' in OffsetSpecial\nFalse\n>>> 6.0 in OffsetSpecial\nFalse\n>>> 'lowestOffset' in OffsetSpecial\nTrue\n>>> str(OffsetSpecial.AT_END)\n'highestTime'\n\n\n\nNew in v7.",
        "type": "ListItem"
    },
    {
        "text": "OffsetSpecial bases",
        "type": "Title"
    },
    {
        "text": "StrEnum",
        "type": "ListItem"
    },
    {
        "text": "OrnamentDelay\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.common.enums.",
        "type": "Title"
    },
    {
        "text": "OrnamentDelay",
        "type": "Title"
    },
    {
        "text": "value",
        "type": "Title"
    },
    {
        "text": "names",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "module",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "qualname",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "type",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "start",
        "type": "Title"
    },
    {
        "text": "boundary",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An enumeration for the delay in an ornament (e.g. a delayed turn).  The delay for an\nornament can be set to one of these values, or to an OffsetQL for a timed delay.\nOrnamentDelay.NO_DELAY means there is no delay (this is equivalent to setting delay to 0.0)\nOrnamentDelay.DEFAULT_DELAY means the delay is half the duration of the ornamented note.\n\nnew in v9.",
        "type": "ListItem"
    },
    {
        "text": "OrnamentDelay bases",
        "type": "Title"
    },
    {
        "text": "StrEnum",
        "type": "ListItem"
    },
    {
        "text": "StrEnum\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.common.enums.",
        "type": "Title"
    },
    {
        "text": "StrEnum",
        "type": "Title"
    },
    {
        "text": "value",
        "type": "Title"
    },
    {
        "text": "names",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "module",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "qualname",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "type",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "start",
        "type": "Title"
    },
    {
        "text": "boundary",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An enumeration where strings can equal the value.\nSee music21.common.enums.OffsetSpecial for an\nexample of how these work.",
        "type": "ListItem"
    },
    {
        "text": "StrEnumMeta\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.common.enums.",
        "type": "Title"
    },
    {
        "text": "StrEnumMeta",
        "type": "Title"
    },
    {
        "text": "cls",
        "type": "Title"
    },
    {
        "text": "bases",
        "type": "Title"
    },
    {
        "text": "classdict",
        "type": "Title"
    },
    {
        "text": "boundary",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "_simple",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "kwds",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.common.enums",
        "type": "ListItem"
    },
    {
        "text": "\u00a9 Copyright 2006-2023 Michael Scott Asato Cuthbert.\n      Last updated on Jun 12, 2023.",
        "type": "NarrativeText"
    }
]