[
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.stream.streamStatus",
        "type": "ListItem"
    },
    {
        "text": "Previous topic",
        "type": "Title"
    },
    {
        "text": "music21.stream.makeNotation",
        "type": "Title"
    },
    {
        "text": "Next topic",
        "type": "Title"
    },
    {
        "text": "music21.stream.tools",
        "type": "Title"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "music21.stream.streamStatus\nStreamStatus\nStreamStatus\nStreamStatus.accidentals\nStreamStatus.beams\nStreamStatus.tuplets\nStreamStatus.haveAccidentalsBeenMade()\nStreamStatus.haveBeamsBeenMade()\nStreamStatus.haveTupletBracketsBeenMade()",
        "type": "ListItem"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "About music21",
        "type": "ListItem"
    },
    {
        "text": "User's Guide",
        "type": "ListItem"
    },
    {
        "text": "Module Reference",
        "type": "ListItem"
    },
    {
        "text": "Installation",
        "type": "ListItem"
    },
    {
        "text": "Developer Reference",
        "type": "ListItem"
    },
    {
        "text": "Documentation and tests in progress",
        "type": "ListItem"
    },
    {
        "text": "Quick search",
        "type": "Title"
    },
    {
        "text": "This Page",
        "type": "Title"
    },
    {
        "text": "Show Source",
        "type": "ListItem"
    },
    {
        "text": "music21.stream.streamStatus\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "StreamStatus\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.stream.streamStatus.",
        "type": "Title"
    },
    {
        "text": "StreamStatus",
        "type": "Title"
    },
    {
        "text": "client",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An object that stores the current notation state for the client stream.\nSeparates out tasks such as whether notation has been made, etc.\n>>> s = stream.Stream()\n>>> ss = s.streamStatus\n>>> ss\n<music21.stream.streamStatus.StreamStatus object at 0x...>\n>>> s.streamStatus.client is s\nTrue\n\n\nCopying of StreamStatus and surrounding Streams\n>>> import copy\n>>> ss2 = copy.deepcopy(ss)\n>>> ss2.client is None\nTrue\n\n\n>>> s2 = copy.deepcopy(s)\n>>> s2.streamStatus\n<music21.stream.streamStatus.StreamStatus object at 0x...>\n>>> s2.streamStatus is ss\nFalse\n>>> s2.streamStatus.client is s2\nTrue",
        "type": "ListItem"
    },
    {
        "text": "StreamStatus bases",
        "type": "Title"
    },
    {
        "text": "SlottedObjectMixin",
        "type": "ListItem"
    },
    {
        "text": "StreamStatus read/write properties",
        "type": "Title"
    },
    {
        "text": "StreamStatus.",
        "type": "Title"
    },
    {
        "text": "accidentals",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "StreamStatus.",
        "type": "Title"
    },
    {
        "text": "beams",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "StreamStatus.",
        "type": "Title"
    },
    {
        "text": "tuplets",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "StreamStatus methods",
        "type": "Title"
    },
    {
        "text": "StreamStatus.",
        "type": "Title"
    },
    {
        "text": "haveAccidentalsBeenMade",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "If Accidentals.displayStatus is None for all contained pitches, it as\nassumed that accidentals have not been set for display and/or\nmakeAccidentals has not been run. If any Accidental has displayStatus\nother than None, this method returns True, regardless of if\nmakeAccidentals has actually been run.",
        "type": "ListItem"
    },
    {
        "text": "StreamStatus.",
        "type": "Title"
    },
    {
        "text": "haveBeamsBeenMade",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "If any Note in this Stream has .beams defined, it as assumed that Beams\nhave not been set and/or makeBeams has not been run. If any Beams\nexist, this method returns True, regardless of if makeBeams has\nactually been run.",
        "type": "ListItem"
    },
    {
        "text": "StreamStatus.",
        "type": "Title"
    },
    {
        "text": "haveTupletBracketsBeenMade",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "If any GeneralNote in this Stream is a tuplet, then check to\nsee if any of them have a first Tuplet with type besides None\nreturn True. Otherwise, return False if there is a tuplet. Return None if\nno Tuplets.\n>>> s = stream.Stream()\n>>> s.streamStatus.haveTupletBracketsBeenMade() is None\nTrue\n>>> s.append(note.Note())\n>>> s.streamStatus.haveTupletBracketsBeenMade() is None\nTrue\n>>> nTuplet = note.Note(quarterLength=1/3)\n>>> s.append(nTuplet)\n>>> s.streamStatus.haveTupletBracketsBeenMade()\nFalse\n>>> nTuplet.duration.tuplets[0].type = 'start'\n>>> s.streamStatus.haveTupletBracketsBeenMade()\nTrue",
        "type": "ListItem"
    },
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.stream.streamStatus",
        "type": "ListItem"
    },
    {
        "text": "\u00a9 Copyright 2006-2023 Michael Scott Asato Cuthbert.\n      Last updated on Jun 12, 2023.",
        "type": "NarrativeText"
    }
]