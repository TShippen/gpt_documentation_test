[
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.roman",
        "type": "ListItem"
    },
    {
        "text": "Previous topic",
        "type": "Title"
    },
    {
        "text": "music21.repeat",
        "type": "Title"
    },
    {
        "text": "Next topic",
        "type": "Title"
    },
    {
        "text": "music21.romanText.clercqTemperley",
        "type": "Title"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "music21.roman\nRomanNumeral\nRomanNumeral\nRomanNumeral.figureAndKey\nRomanNumeral.scaleDegreeWithAlteration\nRomanNumeral.figure\nRomanNumeral.functionalityScore\nRomanNumeral.key\nRomanNumeral.romanNumeral\nRomanNumeral.__eq__()\nRomanNumeral.adjustMinorVIandVIIByQuality()\nRomanNumeral.bassScaleDegreeFromNotation()\nRomanNumeral.isMixture()\nRomanNumeral.isNeapolitan()\nRomanNumeral.transpose()\nRomanNumeral.addedSteps\nRomanNumeral.bracketedAlterations\nRomanNumeral.caseMatters\nRomanNumeral.figuresNotationObj\nRomanNumeral.figuresWritten\nRomanNumeral.frontAlterationAccidental\nRomanNumeral.frontAlterationString\nRomanNumeral.frontAlterationTransposeInterval\nRomanNumeral.impliedQuality\nRomanNumeral.impliedScale\nRomanNumeral.omittedSteps\nRomanNumeral.pivotChord\nRomanNumeral.primaryFigure\nRomanNumeral.romanNumeralAlone\nRomanNumeral.scaleCardinality\nRomanNumeral.scaleDegree\nRomanNumeral.secondaryRomanNumeral\nRomanNumeral.secondaryRomanNumeralKey\nRomanNumeral.seventhMinor\nRomanNumeral.sixthMinor\nRomanNumeral.useImpliedScale\n\n\n\n\nChordFigureTuple\nChordFigureTuple\n\n\nFigureTuple\nFigureTuple\n\n\nMinor67Default\nMinor67Default\n\n\nFunctions\ncorrectRNAlterationForMinor()\ncorrectSuffixForChordQuality()\nexpandShortHand()\nfigureTupleSolo()\nfigureTuples()\nidentifyAsTonicOrDominant()\npostFigureFromChordAndKey()\nromanInversionName()\nromanNumeralFromChord()",
        "type": "ListItem"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "About music21",
        "type": "ListItem"
    },
    {
        "text": "User's Guide",
        "type": "ListItem"
    },
    {
        "text": "Module Reference",
        "type": "ListItem"
    },
    {
        "text": "Installation",
        "type": "ListItem"
    },
    {
        "text": "Developer Reference",
        "type": "ListItem"
    },
    {
        "text": "Documentation and tests in progress",
        "type": "ListItem"
    },
    {
        "text": "Quick search",
        "type": "Title"
    },
    {
        "text": "This Page",
        "type": "Title"
    },
    {
        "text": "Show Source",
        "type": "ListItem"
    },
    {
        "text": "music21.roman\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "Music21 class for dealing with Roman Numeral analysis",
        "type": "NarrativeText"
    },
    {
        "text": "RomanNumeral\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.roman.",
        "type": "Title"
    },
    {
        "text": "RomanNumeral",
        "type": "Title"
    },
    {
        "text": "figure",
        "type": "Title"
    },
    {
        "text": "str | int",
        "type": "Title"
    },
    {
        "text": "''",
        "type": "UncategorizedText"
    },
    {
        "text": "keyOrScale",
        "type": "Title"
    },
    {
        "text": "Key",
        "type": "Title"
    },
    {
        "text": "ConcreteScale",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "caseMatters",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "updatePitches",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "sixthMinor",
        "type": "Title"
    },
    {
        "text": "Minor67Default.QUALITY",
        "type": "Title"
    },
    {
        "text": "seventhMinor",
        "type": "Title"
    },
    {
        "text": "Minor67Default.QUALITY",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A RomanNumeral object is a specialized type of\nHarmony object that stores the function and scale\ndegree of a chord within a Key.\n>>> ivInE = roman.RomanNumeral('IV', key.Key('E'))\n>>> ivInE.pitches\n(<music21.pitch.Pitch A4>, <music21.pitch.Pitch C#5>, <music21.pitch.Pitch E5>)\n\n\nOctaves assigned are arbitrary (generally C-4 or above) and just exist\nto keep the pitches properly sorted.\nMajor and minor are written with capital and lowercase numerals respectively.\nInversions and seventh-, ninth-, etc. chords are specified by putting the\nfigured bass symbols directly after the chord.  Keys can be specified with\nKey objects or (less efficiently) a string.\nDominant-seventh chord in c minor.\n>>> roman.RomanNumeral('V7', 'c').pitches\n(<music21.pitch.Pitch G4>, <music21.pitch.Pitch B4>,\n <music21.pitch.Pitch D5>, <music21.pitch.Pitch F5>)\n\n\nMinor chord on the fifth scale degree, in second inversion:\n>>> roman.RomanNumeral('v64', 'c').pitches\n(<music21.pitch.Pitch D4>, <music21.pitch.Pitch G4>, <music21.pitch.Pitch B-4>)\n\n\nIf no Key is given then it exists as a theoretical, keyless RomanNumeral;\ne.g., V in any key.  But when realized, keyless RomanNumerals are\ntreated as if they are in C major.\n>>> V = roman.RomanNumeral('V')\n>>> V.quality\n'major'\n\n\n>>> V.inversion()\n0\n\n\n>>> V.forteClass\n'3-11B'\n\n\n>>> V.scaleDegree\n5\n\n\nDefault key is C Major\n>>> for p in V.pitches:\n...     p\n<music21.pitch.Pitch G4>\n<music21.pitch.Pitch B4>\n<music21.pitch.Pitch D5>\n\n\nNeapolitan chords can be written as \u0098N6', \u0098bII6', or simply \u0098N'\n>>> neapolitan = roman.RomanNumeral('N6', 'c#')\n>>> neapolitan.key\n<music21.key.Key of c# minor>\n\n\n>>> neapolitan.isMajorTriad()\nTrue\n\n\n>>> neapolitan.scaleDegreeWithAlteration\n(2, <music21.pitch.Accidental flat>)\n\n\n>>> for p in neapolitan.pitches:\n...     p\n<music21.pitch.Pitch F#4>\n<music21.pitch.Pitch A4>\n<music21.pitch.Pitch D5>\n\n\n>>> neapolitan2 = roman.RomanNumeral('bII6', 'g#')\n>>> [str(p) for p in neapolitan2.pitches]\n['C#5', 'E5', 'A5']\n\n\n>>> neapolitan2.scaleDegree\n2\n\n\nHere's another dominant seventh chord in minor:\n>>> em = key.Key('e')\n>>> dominantV = roman.RomanNumeral('V7', em)\n>>> [str(p) for p in dominantV.pitches]\n['B4', 'D#5', 'F#5', 'A5']\n\n\nNow using the older terminology where the case does not determine the\nquality, it becomes a minor-seventh chord:\n>>> minorV = roman.RomanNumeral('V43', em, caseMatters=False)\n>>> [str(p) for p in minorV.pitches]\n['F#4', 'A4', 'B4', 'D5']\n\n\n(We will do this str(p) for p in\u2026 thing enough that let's make a helper function:)\n>>> def cp(rn_in):  # cp = chord pitches\n...     return [str(p) for p in rn_in.pitches]\n>>> cp(minorV)\n['F#4', 'A4', 'B4', 'D5']\n\n\nIn minor \u2014 VII and VI are assumed to refer to the flattened scale degree, while\nvii, viio, viio7, vii\u00c3\u00b87 and vi, vio, vio7, and vi\u00c3\u00b87 all refer to the sharpened scale\ndegree.  To get a minor triad on lowered 6 for instance, you will need to use \u0098bvi'\nwhile to get a major triad on raised 6, use \u0098#VI'.\nThe actual rule is that if the chord implies minor, diminished, or half-diminished,\nan implied \u009c#\u009d is read before the figure.  Anything else does not add the sharp.\nThe lowered (natural minor) is the assumed basic chord.\n>>> majorFlatSeven = roman.RomanNumeral('VII', em)\n>>> cp(majorFlatSeven)\n['D5', 'F#5', 'A5']\n\n\n>>> minorSharpSeven = roman.RomanNumeral('vii', em)\n>>> cp(minorSharpSeven)\n['D#5', 'F#5', 'A#5']\n\n\n>>> majorFlatSix = roman.RomanNumeral('VI', em)\n>>> cp(majorFlatSix)\n['C5', 'E5', 'G5']\n\n\n>>> minorSharpSix = roman.RomanNumeral('vi', em)\n>>> cp(minorSharpSix)\n['C#5', 'E5', 'G#5']\n\n\nThese rules can be changed by passing in a sixthMinor or seventhMinor parameter set to\na member of music21.roman.Minor67Default:\n>>> majorSharpSeven = roman.RomanNumeral('VII', em, seventhMinor=roman.Minor67Default.SHARP)\n>>> cp(majorSharpSeven)\n['D#5', 'F##5', 'A#5']\n\n\nFor instance, if you prefer a harmonic minor context where VI (or vi) always refers\nto the lowered 6 and viio (or VII) always refers to the raised 7, send along\nsixthMinor=roman.Minor67Default.FLAT and seventhMinor=roman.Minor67Default.SHARP\n>>> dimHarmonicSeven = roman.RomanNumeral('viio', em, seventhMinor=roman.Minor67Default.SHARP)\n>>> cp(dimHarmonicSeven)\n['D#5', 'F#5', 'A5']\n\n\n>>> majHarmonicSeven = roman.RomanNumeral('bVII', em, seventhMinor=roman.Minor67Default.SHARP)\n>>> cp(majHarmonicSeven)\n['D5', 'F#5', 'A5']\n\n\n>>> majHarmonicSix = roman.RomanNumeral('VI', em, sixthMinor=roman.Minor67Default.FLAT)\n>>> cp(majHarmonicSix)\n['C5', 'E5', 'G5']\n>>> minHarmonicSix = roman.RomanNumeral('#vi', em, sixthMinor=roman.Minor67Default.FLAT)\n>>> cp(minHarmonicSix)\n['C#5', 'E5', 'G#5']\n\n\nSee the docs for Minor67Default for more information on\nconfiguring sixth and seventh interpretation in minor\nalong with the useful CAUTIONARY setting where CAUTIONARY sharp and flat accidentals\nare allowed but not required.\nEither of these is the same way of getting a minor iii in a minor key:\n>>> minoriii = roman.RomanNumeral('iii', em, caseMatters=True)\n>>> cp(minoriii)\n['G4', 'B-4', 'D5']\n\n\n>>> minoriiiB = roman.RomanNumeral('IIIb', em, caseMatters=False)\n>>> cp(minoriiiB)\n['G4', 'B-4', 'D5']\n\n\ncaseMatters=False will prevent sixthMinor or seventhMinor from having effect.\n>>> vii = roman.RomanNumeral('viio', 'a', caseMatters=False,\n...                           seventhMinor=roman.Minor67Default.QUALITY)\n>>> cp(vii)\n['G5', 'B-5', 'D-6']\n\n\nCan also take a scale object, here we build a first-inversion chord\non the raised-three degree of D-flat major, that is, F#-major (late\nSchubert would be proud.)\n>>> sharp3 = roman.RomanNumeral('#III6', scale.MajorScale('D-'))\n>>> sharp3.scaleDegreeWithAlteration\n(3, <music21.pitch.Accidental sharp>)\n\n\n>>> cp(sharp3)\n['A#4', 'C#5', 'F#5']\n\n\n>>> sharp3.figure\n'#III6'\n\n\nFigures can be changed and pitches will change. (Caution: there are still some bugs on this\nfor extreme edge cases).\n>>> sharp3.figure = 'V'\n>>> cp(sharp3)\n['A-4', 'C5', 'E-5']\n\n\nA diminished chord is specified with an o (the letter-O) or \u00c2\u00b0 symbol:\n>>> leadingToneSeventh = roman.RomanNumeral(\n...     'viio', scale.MajorScale('F'))\n>>> cp(leadingToneSeventh)\n['E5', 'G5', 'B-5']\n>>> cp(roman.RomanNumeral('vii\u00c2\u00b07', 'F'))\n['E5', 'G5', 'B-5', 'D-6']\n\n\nNote in the above example we passed in a Scale object not a Key.  This can be used\nin the theoretical case of applying roman numerals in 7-note scales that are not\nmajor or minor.  (see the documentation for the\nscaleCardinality attribute for scales other than\n7-note scales).\nHalf-diminished seventh chords can be written with either \u00c3\u00b8 or /o symbol:\n>>> cp(roman.RomanNumeral('vii\u00c3\u00b87', 'F'))\n['E5', 'G5', 'B-5', 'D6']\n>>> cp(roman.RomanNumeral('vii/o7', 'F'))\n['E5', 'G5', 'B-5', 'D6']\n\n\nRomanNumeral objects can also be created with an int (number)\nfor the scale degree:\n>>> majorKeyObj = key.Key('C')\n>>> roman.RomanNumeral(1, majorKeyObj)\n<music21.roman.RomanNumeral I in C major>\n\n\n>>> minorKeyObj = key.Key('c')\n>>> roman.RomanNumeral(1, minorKeyObj)\n<music21.roman.RomanNumeral i in c minor>\n\n\nA little modal mixture:\n>>> lessObviousDiminished = roman.RomanNumeral(\n...     'vio', scale.MajorScale('c'))\n>>> for p in lessObviousDiminished.pitches:\n...     p\n<music21.pitch.Pitch A4>\n<music21.pitch.Pitch C5>\n<music21.pitch.Pitch E-5>\n\n\n>>> diminished7th = roman.RomanNumeral(\n...     'vio7', scale.MajorScale('c'))\n>>> for p in diminished7th.pitches:\n...     p\n<music21.pitch.Pitch A4>\n<music21.pitch.Pitch C5>\n<music21.pitch.Pitch E-5>\n<music21.pitch.Pitch G-5>\n\n\n>>> diminished7th1stInv = roman.RomanNumeral(\n...     'vio65', scale.MajorScale('c'))\n>>> for p in diminished7th1stInv.pitches:\n...     p\n<music21.pitch.Pitch C4>\n<music21.pitch.Pitch E-4>\n<music21.pitch.Pitch G-4>\n<music21.pitch.Pitch A4>\n\n\n>>> halfDim7th2ndInv = roman.RomanNumeral(\n...     'iv\u00c3\u00b843', scale.MajorScale('F'))\n>>> for p in halfDim7th2ndInv.pitches:\n...     p\n<music21.pitch.Pitch F-4>\n<music21.pitch.Pitch A-4>\n<music21.pitch.Pitch B-4>\n<music21.pitch.Pitch D-5>\n\n\n>>> alteredChordHalfDim3rdInv = roman.RomanNumeral(\n...     'bii\u00c3\u00b842', scale.MajorScale('F'))\n>>> cp(alteredChordHalfDim3rdInv)\n['F-4', 'G-4', 'B--4', 'D--5']\n\n\n>>> alteredChordHalfDim3rdInv.intervalVector\n[0, 1, 2, 1, 1, 1]\n\n\n>>> alteredChordHalfDim3rdInv.commonName\n'half-diminished seventh chord'\n\n\n>>> alteredChordHalfDim3rdInv.romanNumeral\n'bii'\n\n\n>>> alteredChordHalfDim3rdInv.romanNumeralAlone\n'ii'\n\n\nTones may be omitted by putting the number in a bracketed [noX] clause.\nThese numbers refer to the note above the root, not above the bass:\n>>> openFifth = roman.RomanNumeral('V[no3]', key.Key('F'))\n>>> openFifth.pitches\n(<music21.pitch.Pitch C5>, <music21.pitch.Pitch G5>)\n>>> openFifthInv = roman.RomanNumeral('V64[no3]', key.Key('F'))\n>>> openFifthInv.pitches\n(<music21.pitch.Pitch G4>, <music21.pitch.Pitch C5>)\n\n\nSome theoretical traditions express a viio7 as a V9 chord with omitted\nroot. Music21 allows that:\n>>> fiveOhNine = roman.RomanNumeral('V9[no1]', key.Key('g'))\n>>> cp(fiveOhNine)\n['F#5', 'A5', 'C6', 'E-6']\n\n\nPutting [no] or [add] should never change the root\n>>> fiveOhNine.root()\n<music21.pitch.Pitch D5>\n\n\nTones may be added by putting a number (with an optional accidental) in\na bracketed [addX] clause:\n>>> susChord = roman.RomanNumeral('I[add4][no3]', key.Key('C'))\n>>> susChord.pitches\n(<music21.pitch.Pitch C4>, <music21.pitch.Pitch F4>, <music21.pitch.Pitch G4>)\n>>> susChord.root()\n<music21.pitch.Pitch C4>\n\n\nFigures such as \u0098V54' give the same result:\n>>> anotherSus = roman.RomanNumeral('V54', key.Key('C'))\n>>> anotherSus.pitches\n(<music21.pitch.Pitch G4>, <music21.pitch.Pitch C5>, <music21.pitch.Pitch D5>)\n\n\nPutting it all together:\n>>> weirdChord = roman.RomanNumeral('V65[no5][add#6][b3]', key.Key('C'))\n>>> cp(weirdChord)\n['B-4', 'E#5', 'F5', 'G5']\n>>> weirdChord.root()\n<music21.pitch.Pitch G5>\n\n\nOther scales besides major and minor can be used.\nJust for kicks (no worries if this is goobley-gook):\n>>> ots = scale.OctatonicScale('C2')\n>>> rn_I9 = roman.RomanNumeral('I9', ots, caseMatters=False)\n>>> cp(rn_I9)\n['C2', 'E-2', 'G-2', 'A2', 'C3']\n\n\n>>> romanNumeral2 = roman.RomanNumeral(\n...     'V7#5b3', ots, caseMatters=False)\n>>> cp(romanNumeral2)\n['G-2', 'A-2', 'C#3', 'E-3']\n\n\n>>> rn_minor_64_secondary = roman.RomanNumeral('v64/V', key.Key('e'))\n>>> rn_minor_64_secondary\n<music21.roman.RomanNumeral v64/V in e minor>\n\n\n>>> rn_minor_64_secondary.figure\n'v64/V'\n\n\n>>> cp(rn_minor_64_secondary)\n['C#5', 'F#5', 'A5']\n\n\n>>> rn_minor_64_secondary.secondaryRomanNumeral\n<music21.roman.RomanNumeral V in e minor>\n\n\nDominant 7ths can be specified by the character \u0098d' followed by the figure\nindicating the inversion of the chord:\n>>> r = roman.RomanNumeral('bVIId7', key.Key('B-'))\n>>> r.figure\n'bVIId7'\n\n\n>>> cp(r)\n['A-5', 'C6', 'E-6', 'G-6']\n\n\n>>> r = roman.RomanNumeral('VId42')\n>>> r.figure\n'VId42'\n\n\n>>> r.key = key.Key('B-')\n>>> cp(r)\n['F5', 'G5', 'B5', 'D6']\n\n\n>>> r = roman.RomanNumeral('IVd43', key.Key('B-'))\n>>> r.figure\n'IVd43'\n\n\n>>> cp(r)\n['B-4', 'D-5', 'E-5', 'G5']\n\n\n>>> r2 = roman.RomanNumeral('V42/V7/vi', key.Key('C'))\n>>> cp(r2)\n['A4', 'B4', 'D#5', 'F#5']\n\n\n>>> r2.secondaryRomanNumeral\n<music21.roman.RomanNumeral V7/vi in C major>\n\n\n>>> r2.secondaryRomanNumeral.secondaryRomanNumeral\n<music21.roman.RomanNumeral vi in C major>\n\n\nThe I64 chord can also be specified as Cad64, which\nsimply parses as I64:\n>>> r = roman.RomanNumeral('Cad64', key.Key('C'))\n>>> r\n<music21.roman.RomanNumeral Cad64 in C major>\n>>> cp(r)\n['G4', 'C5', 'E5']\n\n\n>>> r = roman.RomanNumeral('Cad64', key.Key('c'))\n>>> r\n<music21.roman.RomanNumeral Cad64 in c minor>\n>>> cp(r)\n['G4', 'C5', 'E-5']\n\n\nWorks also for secondary romans:\n>>> r = roman.RomanNumeral('Cad64/V', key.Key('c'))\n>>> r\n<music21.roman.RomanNumeral Cad64/V in c minor>\n>>> cp(r)\n['D5', 'G5', 'B5']\n\n\nIn a major context, i7 and iv7 and their inversions are treated as minor-7th\nchords:\n>>> r = roman.RomanNumeral('i7', 'C')\n>>> r\n<music21.roman.RomanNumeral i7 in C major>\n>>> cp(r)\n['C4', 'E-4', 'G4', 'B-4']\n\n\n>>> r = roman.RomanNumeral('iv42', 'C')\n>>> cp(r)\n['E-4', 'F4', 'A-4', 'C5']\n\n\nFor a minor-Major 7th chord in major, write it as i[add7] or i7[#7] or another inversion:\n>>> minorMajor = roman.RomanNumeral('i[add7]', 'C')\n>>> minorMajor\n<music21.roman.RomanNumeral i[add7] in C major>\n>>> cp(minorMajor)\n['C4', 'E-4', 'G4', 'B4']\n>>> cp(roman.RomanNumeral('i7[#7]', 'C'))\n['C4', 'E-4', 'G4', 'B4']\n\n\nNote that this is not the same as i#7, which gives a rather unusual chord in major.\n>>> cp(roman.RomanNumeral('i#7', 'C'))\n['C4', 'E-4', 'G4', 'B#4']\n\n\nIn minor, it's just fine.  I mean, just as fine:\n>>> cp(roman.RomanNumeral('i#7', 'c'))\n['C4', 'E-4', 'G4', 'B4']\n\n\n>>> cp(roman.RomanNumeral('i42[#7]', 'C'))\n['B4', 'C5', 'E-5', 'G5']\n\n\nAs noted above, Minor-Major 7th chords in minor have a different form in root position:\n>>> cp(roman.RomanNumeral('i#7', 'c'))\n['C4', 'E-4', 'G4', 'B4']\n\n\n(these are both the same)\n>>> cp(roman.RomanNumeral('i#753', 'c'))\n['C4', 'E-4', 'G4', 'B4']\n>>> cp(roman.RomanNumeral('i7[#7]', 'c'))\n['C4', 'E-4', 'G4', 'B4']\n\n\nOther inversions are the same as with major keys:\n>>> cp(roman.RomanNumeral('i65[#7]', 'c'))\n['E-4', 'G4', 'B4', 'C5']\n>>> cp(roman.RomanNumeral('i43[#7]', 'c'))\n['G4', 'B4', 'C5', 'E-5']\n\n\nThe RomanNumeral constructor accepts a keyword \u0098updatePitches' which is\npassed to harmony.Harmony. By default, it\nis True, but can be set to False to initialize faster if pitches are not needed.\n>>> r = roman.RomanNumeral('vio', em, updatePitches=False)\n>>> r.pitches\n()\n\n\nEquality\nTwo RomanNumerals compare equal if their NotRest components\n(noteheads, beams, expressions, articulations, etc.) are equal\nand if their figures and keys are equal:\n>>> c1 = chord.Chord('C4 E4 G4 C5')\n>>> c2 = chord.Chord('C3 E4 G4')\n>>> rn1 = roman.romanNumeralFromChord(c1, 'C')\n>>> rn2 = roman.romanNumeralFromChord(c2, 'C')\n>>> rn1 == rn2\nTrue\n>>> rn1.duration.type = 'half'\n>>> rn1 == rn2\nFalse\n>>> rn3 = roman.RomanNumeral('I', 'd')\n>>> rn2 == rn3\nFalse\n>>> rn3.key = key.Key('C')\n>>> rn2 == rn3\nTrue\n>>> rn4 = roman.RomanNumeral('ii', 'C')\n>>> rn2 == rn4\nFalse\n>>> rn4.figure = 'I'\n>>> rn2 == rn4\nTrue\n\n\n>>> rn5 = roman.RomanNumeral('bII6', 'c')\n>>> rn6 = roman.RomanNumeral('bII6', 'c')\n>>> rn5 == rn6\nTrue\n>>> rn7 = roman.RomanNumeral('N6', 'c')\n>>> rn5 == rn7\nFalse\n\n\n\nChanged in v6.5: caseMatters is keyword only. It along with sixthMinor and\nseventhMinor are now the only allowable keywords to pass in.\nChanged in v7: RomanNumeral.romanNumeral will always give a \u009cb\u009d for a flattened\ndegree (i.e., \u0098-II' becomes \u0098bII') as this is what people expect in looking at\nthe figure.\nChanged in v7.3: figures that are not normally used to indicate inversion\nsuch as V54 (a suspension) no longer give strange inversions.\nChanged in v8: Figures are now validated as alphanumeric or containing one of\nthe following symbols (after the example \u009cV\u009d):\n\n>>> specialCharacterFigure = roman.RomanNumeral('V#+-/[]')\n>>> specialCharacterFigure\n<music21.roman.RomanNumeral V#+-/[]>\n\n\nAnd degree symbols (\u00c2\u00b0) convert to o:\n>>> dimSeventh = roman.RomanNumeral('vii\u00c2\u00b07', 'c')\n>>> dimSeventh\n<music21.roman.RomanNumeral viio7 in c minor>\n\n\nOtherwise, an invalid figure raises RomanNumeralException:\n>>> roman.RomanNumeral(\"V64==53\")\nTraceback (most recent call last):\nmusic21.roman.RomanNumeralException: Invalid figure: V64==53",
        "type": "ListItem"
    },
    {
        "text": "RomanNumeral bases",
        "type": "Title"
    },
    {
        "text": "Harmony",
        "type": "ListItem"
    },
    {
        "text": "Chord",
        "type": "ListItem"
    },
    {
        "text": "ChordBase",
        "type": "ListItem"
    },
    {
        "text": "NotRest",
        "type": "ListItem"
    },
    {
        "text": "GeneralNote",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "RomanNumeral read-only properties",
        "type": "Title"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "figureAndKey",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns the figure and the key and mode as a string\n>>> rn = roman.RomanNumeral('V65/V', 'e')\n>>> rn.figureAndKey\n'V65/V in e minor'\n\n\nWithout a key, it is the same as figure:\n>>> roman.RomanNumeral('V7').figureAndKey\n'V7'",
        "type": "ListItem"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "scaleDegreeWithAlteration",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns a two element tuple of the scale degree and the\naccidental that alters the scale degree for things such as #ii or\nbV.\nNote that vi and vii in minor have a frontAlterationAccidental of\n<sharp> even if it is not preceded by a # sign.\nHas the same effect as setting .scaleDegree and\n.frontAlterationAccidental separately\n>>> v = roman.RomanNumeral('V', 'C')\n>>> v.scaleDegreeWithAlteration\n(5, None)\n\n\n>>> neapolitan = roman.RomanNumeral('N6', 'c#')\n>>> neapolitan.scaleDegreeWithAlteration\n(2, <music21.pitch.Accidental flat>)",
        "type": "ListItem"
    },
    {
        "text": "Read-only properties inherited from Chord:",
        "type": "NarrativeText"
    },
    {
        "text": "chordTablesAddress commonName fifth forteClass forteClassNumber forteClassTn forteClassTnI fullName hasZRelation intervalVector intervalVectorString isPrimeFormInversion multisetCardinality normalOrder normalOrderString orderedPitchClasses orderedPitchClassesString pitchClassCardinality pitchClasses pitchedCommonName primeForm primeFormString quality scaleDegrees seventh third",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "RomanNumeral read/write properties",
        "type": "Title"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "figure",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Gives a string representation of the roman numeral, which\nis usually the same as what you passed in as a string:\n>>> roman.RomanNumeral('bVII65/V', 'C').figure\n'bVII65/V'\n\n\nThere are a few exceptions.  If the RomanNumeral is initialized\nwith an int, then it is converted to a string:\n>>> roman.RomanNumeral(2).figure\n'II'\n\n\nA 0 used for o in a diminished seventh chord is converted to o,\nand the /o form of half-diminished is converted to \u00c3\u00b8:\n>>> roman.RomanNumeral('vii07').figure\n'viio7'\n>>> roman.RomanNumeral('vii/o7').figure\n'vii\u00c3\u00b87'\n\n\nChanging this value will not change existing pitches.\n\nChanged in v6.5: empty RomanNumerals now have figure of \u0098' not None",
        "type": "ListItem"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "functionalityScore",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return or set a number from 1 to 100 representing the relative\nfunctionality of this RN.figure (possibly given the mode, etc.).\nNumbers are ordinal, not cardinal.\n>>> rn1 = roman.RomanNumeral('V7')\n>>> rn1.functionalityScore\n80\n\n\n>>> rn2 = roman.RomanNumeral('vi6')\n>>> rn2.functionalityScore\n10\n\n\n>>> rn2.functionalityScore = 99\n>>> rn2.functionalityScore\n99\n\n\nFor secondary dominants, the functionality scores are multiplied, reducing\nall but the first by 1/100th:\n>>> rn3 = roman.RomanNumeral('V')\n>>> rn3.functionalityScore\n70\n\n\n>>> rn4 = roman.RomanNumeral('vi')\n>>> rn4.functionalityScore\n40\n\n\n>>> rn5 = roman.RomanNumeral('V/vi')\n>>> rn5.functionalityScore\n28",
        "type": "ListItem"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "key",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Gets or Sets the current Key (or Scale object) for a given\nRomanNumeral object.\nIf a new key is set, then the pitches will probably change:\n>>> r1 = roman.RomanNumeral('V')\n\n\n(No key means an implicit C-major)\n>>> r1.key is None\nTrue\n\n\n>>> [str(p) for p in r1.pitches]\n['G4', 'B4', 'D5']\n\n\nChange to A major\n>>> r1.key = key.Key('A')\n>>> [str(p) for p in r1.pitches]\n['E5', 'G#5', 'B5']\n\n\n>>> r1\n<music21.roman.RomanNumeral V in A major>\n\n\n>>> r1.key\n<music21.key.Key of A major>\n\n\n>>> r1.key = key.Key('e')\n>>> [str(p) for p in r1.pitches]\n['B4', 'D#5', 'F#5']\n\n\n>>> r1\n<music21.roman.RomanNumeral V in e minor>",
        "type": "ListItem"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "romanNumeral",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Read-only property that returns either the romanNumeralAlone (e.g. just\nII) or the frontAlterationAccidental.modifier (with \u0098b' for \u0098-') + romanNumeralAlone\n(e.g. #II, bII)\n>>> rn = roman.RomanNumeral('#II7')\n>>> rn.romanNumeral\n'#II'\n\n\n>>> rn = roman.RomanNumeral('Ger+6')\n>>> rn.romanNumeral\n'Ger'\n\n\n>>> rn = roman.RomanNumeral('bbII/V')\n>>> rn.romanNumeral\n'bbII'\n>>> rn = roman.RomanNumeral('--II/V')\n>>> rn.romanNumeral\n'bbII'",
        "type": "ListItem"
    },
    {
        "text": "Read/write properties inherited from Harmony:",
        "type": "NarrativeText"
    },
    {
        "text": "writeAsChord",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Chord:",
        "type": "NarrativeText"
    },
    {
        "text": "duration notes pitchNames pitches",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from ChordBase:",
        "type": "NarrativeText"
    },
    {
        "text": "tie volume",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from NotRest:",
        "type": "NarrativeText"
    },
    {
        "text": "notehead noteheadFill noteheadParenthesis stemDirection storedInstrument",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from GeneralNote:",
        "type": "NarrativeText"
    },
    {
        "text": "lyric",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "RomanNumeral methods",
        "type": "Title"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "__eq__",
        "type": "UncategorizedText"
    },
    {
        "text": "other",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Compare equality, just based on NotRest and on figure and key",
        "type": "ListItem"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "adjustMinorVIandVIIByQuality",
        "type": "Title"
    },
    {
        "text": "useScale",
        "type": "Title"
    },
    {
        "text": "Key | ConcreteScale",
        "type": "Title"
    },
    {
        "text": "\u2192 None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Fix minor vi and vii to always be #vi and #vii if .caseMatters.\n>>> rn = roman.RomanNumeral()\n>>> rn.scaleDegree = 6\n>>> rn.impliedQuality = 'minor'\n>>> rn.adjustMinorVIandVIIByQuality(key.Key('c'))\n>>> rn.frontAlterationTransposeInterval\n<music21.interval.Interval A1>\n\n\n>>> rn.frontAlterationAccidental\n<music21.pitch.Accidental sharp>\n\n\n>>> rn = roman.RomanNumeral()\n>>> rn.scaleDegree = 6\n>>> rn.impliedQuality = 'major'\n>>> rn.adjustMinorVIandVIIByQuality(key.Key('c'))\n>>> rn.frontAlterationTransposeInterval is None\nTrue\n>>> rn.frontAlterationAccidental is None\nTrue\n\n\n\nChanged in v6.4: public function became hook to private function having the actual guts",
        "type": "ListItem"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "bassScaleDegreeFromNotation",
        "type": "Title"
    },
    {
        "text": "notationObject",
        "type": "Title"
    },
    {
        "text": "Notation | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u2192 int",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given a notationObject from\nmusic21.figuredBass.notation.Notation\nreturn the scaleDegree of the bass.\n>>> fbn = figuredBass.notation.Notation('6,3')\n>>> V = roman.RomanNumeral('V')\n>>> V.bassScaleDegreeFromNotation(fbn)\n7\n\n\n>>> fbn2 = figuredBass.notation.Notation('#6,4')\n>>> vi = roman.RomanNumeral('vi')\n>>> vi.bassScaleDegreeFromNotation(fbn2)\n3\n\n\nCan figure it out directly from an existing RomanNumeral:\n>>> ii65 = roman.RomanNumeral('ii65', 'C')\n>>> ii65.bassScaleDegreeFromNotation()\n4\n\n\nSimple test:\n>>> I = roman.RomanNumeral('I')\n>>> I.bassScaleDegreeFromNotation()\n1\n\n\nFigures that do not imply a bass like 54 just return the instance\nscaleDegree:\n>>> V = roman.RomanNumeral('V54')\n>>> V.bassScaleDegreeFromNotation()\n5",
        "type": "ListItem"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "isMixture",
        "type": "Title"
    },
    {
        "text": "evaluateSecondaryNumeral",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Checks if a RomanNumeral is an instance of \u0098modal mixture' in which the chord is\nnot diatonic in the key specified, but\nwould be in the parallel (German: variant) major / minor\nand can therefore be thought of as a \u0098mixture' of major and minor modes, or\nas a \u0098borrowing' from the one to the other.\nExamples include \u009ci\u009d in major or \u009cI\u009d in minor (sic).\nSpecifically, this method returns True for all and only the following cases in any\ninversion:\nMajor context (example of C major):\n\nscale degree 1 and triad quality minor (minor tonic chord, c);\nscale degree 2 and triad quality diminished (covers both iio and ii\u00c3\u00b87);\nscale degree b3 and triad quality major (Eb);\nscale degree 4 and triad quality minor (f);\nscale degree 5 and triad quality minor (g, NB: potentially controversial);\nscale degree b6 and triad quality major (Ab);\nscale degree b7 and triad quality major (Bb); and\nscale degree 7, and it is a diminished seventh (specifically b-d-f-ab).\n\nMinor context (example of c minor):\n\nscale degree 1 and triad quality major (major tonic chord, C);\nscale degree 2 and triad quality minor (d, not diminished);\nscale degree #3 and triad quality minor (e);\nscale degree 4 and triad quality major (F);\nscale degree #6 and triad quality minor (a); and\nscale degree 7, and it is a half-diminished seventh (specifically b-d-f-a).\n\nThis list is broadly consistent with (and limited to) borrowing between the major and\nnatural minor, except for excluding V (G-B-D) and viio (B-D-F) in minor.\nThere are several borderline caes and this in-/exclusion is all open to debate, of course.\nThe choices here reflect this method's primarily goal to aid anthologizing and\npointing to clear cases of mixture in common practice Classical music.\nAt least in that context, V and viio are not generally regarded as mixure.\nBy way of example usage, here are both major and minor versions of the\ntonic and subdominant triads in the major context.\n>>> roman.RomanNumeral('I', 'D-').isMixture()\nFalse\n\n\n>>> roman.RomanNumeral('i', 'D-').isMixture()\nTrue\n\n\n>>> roman.RomanNumeral('IV', 'F').isMixture()\nFalse\n\n\n>>> roman.RomanNumeral('iv', 'F').isMixture()\nTrue\n\n\nFor any cases extending beyond triad/seventh chords, major/minor keys,\nand the like, this method simply returns False.\nSo when the mode is not major or minor (including when it's undefined), that's False.\n>>> rn = roman.RomanNumeral('iv', 'C')\n>>> rn.key.mode\n'major'\n\n\n>>> rn.isMixture()\nTrue\n\n\n>>> rn.key.mode = 'hypomixolydian'\n>>> rn.isMixture()\nFalse\n\n\nA scale for a key never returns True for mixture.\n>>> rn = roman.RomanNumeral('i', scale.MajorScale('D'))  # mode undefined\n>>> rn.isMixture()\nFalse\n\n\nLikewise, anything that's not a triad or seventh will return False:\n>>> rn = roman.romanNumeralFromChord(chord.Chord(\"C D E\"))\n>>> rn.isMixture()\nFalse\n\n\nNote that Augmented sixth chords do count as sevenths but never indicate modal mixture\n(not least because those augmented sixths are the same in both major and minor).\n>>> rn = roman.RomanNumeral('Ger65')\n>>> rn.isSeventh()\nTrue\n\n\n>>> rn.isMixture()\nFalse\n\n\nFalse is also returned for any case in which the triad quality is not\ndiminished, minor, or major:\n>>> rn = roman.RomanNumeral('bIII+')\n>>> rn.quality\n'augmented'\n\n\n>>> rn.isMixture()\nFalse\n\n\n(That specific example of bIII+ in major is a borderline case that\narguably ought to be included and may be added later without a deprecation cycle.)\nNaturally, really extended usages such as scale degrees beyond 7 (in the\nOctatonic mode, for instance) also return False.\nThe evaluateSecondaryNumeral parameter allows users to choose whether to consider\nsecondary Roman numerals (like V/vi) or to ignore them.\nWhen considered, exactly the same rules apply but recasting the comparison on\nthe secondaryRomanNumeral.\nThis is an extended usage that is open to debate and liable to change.\n>>> roman.RomanNumeral('V/bVI', 'E-').isMixture()\nFalse\n\n\n>>> roman.RomanNumeral('V/bVI', 'E-').isMixture(evaluateSecondaryNumeral=True)\nTrue\n\n\nIn case of secondary numeral chains, read the last one for mixture.\n>>> roman.RomanNumeral('V/V/bVI', 'E-').isMixture(evaluateSecondaryNumeral=True)\nTrue",
        "type": "ListItem"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "isNeapolitan",
        "type": "Title"
    },
    {
        "text": "require1stInversion",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Music21's Chord class contains methods for identifying chords of a particular type,\nsuch as isAugmentedSixth().\nSome similar chord types are defined not only by the structure of a chord but\nby its relation to a key.\nThe Neapolitan sixth is a notable example.\nA chord is a Neapolitan sixth if it is a major triad, in first inversion, and\n(here's the key-dependent part) rooted on the flattened second scale degree.\n>>> chd = chord.Chord(['F4', 'Ab4', 'Db5'])\n>>> rn = roman.romanNumeralFromChord(chd, 'C')\n>>> rn.isNeapolitan()\nTrue\n\n\nAs this is key-dependent, changing the key changes the outcome.\n>>> rn = roman.romanNumeralFromChord(chd, 'Db')\n>>> rn.isNeapolitan()\nFalse\n\n\nThe \u0098N', \u0098N6' and \u0098N53' shorthand forms are accepted.\n>>> rn = roman.RomanNumeral('N')\n>>> rn.isNeapolitan()\nTrue\n\n\n>>> rn = roman.RomanNumeral('N6')\n>>> rn.isNeapolitan()\nTrue\n\n\nRequiring first inversion is optional.\n>>> rn = roman.RomanNumeral('bII')\n>>> rn.isNeapolitan(require1stInversion=False)\nTrue\n\n\n>>> rn = roman.RomanNumeral('N53')\n>>> rn.isNeapolitan(require1stInversion=False)\nTrue",
        "type": "ListItem"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "transpose",
        "type": "Title"
    },
    {
        "text": "value",
        "type": "Title"
    },
    {
        "text": "inPlace",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "\u2192 T | None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Overrides transpose() so that key\nattribute is transposed as well.\n>>> rn = roman.RomanNumeral('I', 'C')\n>>> rn\n<music21.roman.RomanNumeral I in C major>\n>>> rn.transpose(4)\n<music21.roman.RomanNumeral I in E major>\n>>> rn.transpose(-4, inPlace=True)\n>>> rn\n<music21.roman.RomanNumeral I in A- major>",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from Harmony:",
        "type": "NarrativeText"
    },
    {
        "text": "addChordStepModification() findFigure() getChordStepModifications()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Chord:",
        "type": "NarrativeText"
    },
    {
        "text": "__getitem__() add() annotateIntervals() areZRelations() bass() canBeDominantV() canBeTonic() closedPosition() containsSeventh() containsTriad() formatVectorString() geometricNormalForm() getChordStep() getColor() getNotehead() getNoteheadFill() getStemDirection() getTie() getVolume() getZRelation() hasAnyEnharmonicSpelledPitches() hasAnyRepeatedDiatonicNote() hasRepeatedChordStep() intervalFromChordStep() inversion() inversionName() inversionText() isAugmentedSixth() isAugmentedTriad() isConsonant() isDiminishedSeventh() isDiminishedTriad() isDominantSeventh() isFalseDiminishedSeventh() isFrenchAugmentedSixth() isGermanAugmentedSixth() isHalfDiminishedSeventh() isIncompleteMajorTriad() isIncompleteMinorTriad() isItalianAugmentedSixth() isMajorTriad() isMinorTriad() isNinth() isSeventh() isSeventhOfType() isSwissAugmentedSixth() isTranspositionallySymmetrical() isTriad() removeRedundantPitchClasses() removeRedundantPitchNames() removeRedundantPitches() root() semiClosedPosition() semitonesFromChordStep() setColor() setNotehead() setNoteheadFill() setStemDirection() setTie() setVolume() simplifyEnharmonics() sortAscending() sortChromaticAscending() sortDiatonicAscending() sortFrequencyAscending()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ChordBase:",
        "type": "NarrativeText"
    },
    {
        "text": "hasComponentVolumes() remove() setVolumes()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from NotRest:",
        "type": "NarrativeText"
    },
    {
        "text": "getInstrument() hasVolumeInformation()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from GeneralNote:",
        "type": "NarrativeText"
    },
    {
        "text": "addLyric() augmentOrDiminish() getGrace() insertLyric()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "RomanNumeral instance variables",
        "type": "Title"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "addedSteps",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns a list of the added steps, each as a tuple of\nmodifier as a string (which might be empty) and a chord factor as an int.\n>>> rn = roman.RomanNumeral('V7[addb6]', 'C')\n>>> rn.addedSteps\n[('-', 6)]\n>>> rn.pitches\n(<music21.pitch.Pitch G4>,\n<music21.pitch.Pitch B4>,\n<music21.pitch.Pitch D5>,\n<music21.pitch.Pitch E-5>,\n<music21.pitch.Pitch F5>)\n\n\nYou can add multiple added steps:\n>>> strange = roman.RomanNumeral('V7[addb6][add#6][add-8]')\n>>> strange.addedSteps\n[('-', 6), ('#', 6), ('-', 8)]\n>>> ' '.join([p.nameWithOctave for p in strange.pitches])\n'G4 B4 D5 E-5 E#5 F5 G-5'\n\n\nNOTE: The modifier name is currently changed from \u0098b' to \u0098-', but\nthis might change in a future version to match bracketedAlteration.",
        "type": "ListItem"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "bracketedAlterations",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns a list of the bracketed alterations, each as a tuple of\nmodifier as a string and a chord factor as an int.\n>>> rn = roman.RomanNumeral('V7[b5]')\n>>> rn.bracketedAlterations\n[('b', 5)]\n>>> rn.pitches\n(<music21.pitch.Pitch G4>,\n<music21.pitch.Pitch B4>,\n<music21.pitch.Pitch D-5>,\n<music21.pitch.Pitch F5>)\n\n\nNOTE: The bracketed alteration name is currently left as \u0098b', but\nthis might change in a future version to match addedSteps.\nThe difference between a bracketed alteration and just\nputting b5 in is that, a bracketed alteration changes\nnotes already present in a chord and does not imply that\nthe normally present notes would be missing.  Here, the\npresence of 7 and b5 means that no 3rd should appear.\n>>> rn2 = roman.RomanNumeral('V7b5')\n>>> rn2.bracketedAlterations\n[]\n>>> len(rn2.pitches)\n3\n>>> [p.name for p in rn2.pitches]\n['G', 'D-', 'F']\n\n\n\nChanged in v6.5: always returns a list, even if it is empty.",
        "type": "ListItem"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "caseMatters",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Boolean to determine whether the case (upper or lowercase) of the\nfigure determines whether it is major or minor.  Defaults to True;\nnot everything has been tested with False yet.\n>>> roman.RomanNumeral('vii\u00c3\u00b87', 'd').caseMatters\nTrue",
        "type": "ListItem"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "figuresNotationObj",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns a Notation object\nthat represents the figures in a RomanNumeral\n>>> rn = roman.RomanNumeral('V65')\n>>> notationObj = rn.figuresNotationObj\n>>> notationObj\n<music21.figuredBass.notation.Notation 6,5>\n>>> notationObj.numbers\n(6, 5, 3)\n\n\n>>> rn = roman.RomanNumeral('Ib75#3')\n>>> notationObj = rn.figuresNotationObj\n>>> notationObj.numbers\n(7, 5, 3)\n>>> notationObj.modifiers\n(<music21.figuredBass.notation.Modifier b flat>,\n<music21.figuredBass.notation.Modifier None None>,\n<music21.figuredBass.notation.Modifier # sharp>)",
        "type": "ListItem"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "figuresWritten",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns a string containing any figured-bass figures as passed in:\n>>> roman.RomanNumeral('V65').figuresWritten\n'65'\n>>> roman.RomanNumeral('V').figuresWritten\n''\n>>> roman.RomanNumeral('Fr43', 'c').figuresWritten\n'43'\n>>> roman.RomanNumeral('I7#5b3').figuresWritten\n'7#5b3'\n\n\nNote that the o and \u00c3\u00b8 symbols are quality designations and not\nfigures:\n>>> roman.RomanNumeral('viio6').figuresWritten\n'6'\n>>> roman.RomanNumeral('vii\u00c3\u00b87').figuresWritten\n'7'",
        "type": "ListItem"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "frontAlterationAccidental",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An optional Accidental object\nrepresenting the chromatic alteration of a RomanNumeral, if any\n>>> roman.RomanNumeral('bII43/vi', 'C').frontAlterationAccidental\n<music21.pitch.Accidental flat>\n\n\n>>> roman.RomanNumeral('##IV').frontAlterationAccidental\n<music21.pitch.Accidental double-sharp>\n\n\nFor most roman numerals this will be None:\n>>> roman.RomanNumeral('V', 'f#').frontAlterationAccidental\n\n\nChanging this value will not change existing pitches.\n\nChanged in v6.5: always returns a string, never None",
        "type": "ListItem"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "frontAlterationString",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A string representing the chromatic alteration of a RomanNumeral, if any\n>>> roman.RomanNumeral('bII43/vi', 'C').frontAlterationString\n'b'\n>>> roman.RomanNumeral('V', 'f#').frontAlterationString\n''\n\n\nChanging this value will not change existing pitches.\n\nChanged in v6.5: always returns a string, never None",
        "type": "ListItem"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "frontAlterationTransposeInterval",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An optional Interval object\nrepresenting the transposition of a chromatically altered chord from\nthe normal scale degree:\n>>> sharpFour = roman.RomanNumeral('#IV', 'C')\n>>> sharpFour.frontAlterationTransposeInterval\n<music21.interval.Interval A1>\n>>> sharpFour.frontAlterationTransposeInterval.niceName\n'Augmented Unison'\n\n\nFlats, as in this Neapolitan (bII6) chord, are given as diminished unisons:\n>>> roman.RomanNumeral('N6', 'C').frontAlterationTransposeInterval\n<music21.interval.Interval d1>\n\n\nMost RomanNumerals will have None and not a perfect unison for this value\n(this is for the speed of creating objects)\n>>> intv = roman.RomanNumeral('V', 'e-').frontAlterationTransposeInterval\n>>> intv is None\nTrue\n\n\nChanging this value will not change existing pitches.",
        "type": "ListItem"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "impliedQuality",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The quality of the chord implied by the figure:\n>>> roman.RomanNumeral('V', 'C').impliedQuality\n'major'\n>>> roman.RomanNumeral('ii65', 'C').impliedQuality\n'minor'\n>>> roman.RomanNumeral('viio7', 'C').impliedQuality\n'diminished'\n\n\nThe impliedQuality can differ from the actual quality\nif there are not enough notes to satisfy the implied quality,\nas in this half-diminished chord on vii which does not also\nhave a seventh:\n>>> incorrectSeventh = roman.RomanNumeral('vii/o', 'C')\n>>> incorrectSeventh.impliedQuality\n'half-diminished'\n>>> incorrectSeventh.quality\n'diminished'\n\n\n>>> powerChordMinor = roman.RomanNumeral('v[no3]', 'C')\n>>> powerChordMinor.impliedQuality\n'minor'\n>>> powerChordMinor.quality\n'other'\n\n\nIf case does not matter then an empty quality is implied:\n>>> roman.RomanNumeral('II', 'C', caseMatters=False).impliedQuality\n''",
        "type": "ListItem"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "impliedScale",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "If no key or scale is passed in as the second object, then\nimpliedScale will be set to C major:\n>>> roman.RomanNumeral('V').impliedScale\n<music21.scale.MajorScale C major>\n\n\nOtherwise this will be empty:\n>>> roman.RomanNumeral('V', key.Key('D')).impliedScale",
        "type": "ListItem"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "omittedSteps",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A list of integers showing chord factors that have been\nspecifically omitted:\n>>> emptyNinth = roman.RomanNumeral('V9[no7][no5]', 'C')\n>>> emptyNinth.omittedSteps\n[7, 5]\n>>> emptyNinth.pitches\n(<music21.pitch.Pitch G4>,\n<music21.pitch.Pitch B4>,\n<music21.pitch.Pitch A5>)\n\n\nUsually an empty list:\n>>> roman.RomanNumeral('IV6').omittedSteps\n[]",
        "type": "ListItem"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "pivotChord",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Defaults to None; if not None, stores another interpretation of the\nsame RN in a different key; stores a RomanNumeral object.\nWhile not enforced, for consistency the pivotChord should be\nthe new interpretation going forward (to the right on the staff)\n>>> rn = roman.RomanNumeral('V7/IV', 'C')\n>>> rn.pivotChord is None\nTrue\n>>> rn.pivotChord = roman.RomanNumeral('V7', 'F')",
        "type": "ListItem"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "primaryFigure",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A string representing everything before the slash\nin a RomanNumeral with applied chords.  In other roman numerals\nit is the same as figure:\n>>> rn = roman.RomanNumeral('bII43/vi', 'C')\n>>> rn.primaryFigure\n'bII43'\n\n\n>>> rnSimple = roman.RomanNumeral('V6', 'a')\n>>> rnSimple.primaryFigure\n'V6'\n\n\nChanging this value will not change existing pitches.",
        "type": "ListItem"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "romanNumeralAlone",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns a string of just the roman numeral part (I-VII or i-vii) of\nthe figure:\n>>> roman.RomanNumeral('V6').romanNumeralAlone\n'V'\n\n\nChromatic alterations and secondary numerals are omitted:\n>>> rn = roman.RomanNumeral('#II7/vi', 'C')\n>>> rn.romanNumeralAlone\n'II'\n\n\nNeapolitan chords are changed to \u0098II':\n>>> roman.RomanNumeral('N6').romanNumeralAlone\n'II'\n\n\nCurrently augmented-sixth chords return the \u009cnational\u009d base.  But this\nbehavior may change in future versions:\n>>> roman.RomanNumeral('It6').romanNumeralAlone\n'It'\n>>> roman.RomanNumeral('Ger65').romanNumeralAlone\n'Ger'\n\n\nThis will be controversial in some circles, but it's based on a root in\nisolation, and does not imply tonic quality:\n>>> roman.RomanNumeral('Cad64').romanNumeralAlone\n'I'",
        "type": "ListItem"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "scaleCardinality",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Stores how many notes are in the scale; defaults to 7 for diatonic, obviously.\n>>> roman.RomanNumeral('IV', 'a').scaleCardinality\n7\n\n\nProbably you should not need to change this.  And most code is untested\nwith other cardinalities.  But it is (in theory) possible to create\nroman numerals on octatonic scales, etc.\nChanging this value will not change existing pitches.",
        "type": "ListItem"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "scaleDegree",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An int representing what degree of the scale the figure\n(or primary figure in the case of secondary/applied numerals)\nis on.  Discounts any front alterations:\n>>> roman.RomanNumeral('vi', 'E').scaleDegree\n6\n\n\nNote that this is 2, not 1.5 or 6 or 6.5 or something like that:\n>>> roman.RomanNumeral('bII43/vi', 'C').scaleDegree\n2\n\n\nEmpty RomanNumeral objects have the special scaleDegree of 0:\n>>> roman.RomanNumeral().scaleDegree\n0\n\n\nChanging this value will not change existing pitches.\n\nChanged in v6.5: empty RomanNumeral objects get scaleDegree 0, not None.",
        "type": "ListItem"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "secondaryRomanNumeral",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An optional roman.RomanNumeral object that represents the part\nafter the slash in a secondary/applied RomanNumeral object.  For instance,\nin the roman numeral, C: V7/vi, the secondaryRomanNumeral would be\nthe roman numeral C: vi.  The key of the secondaryRomanNumeral\nis the key of the original RomanNumeral.  In cases such as\nV/V/V, the secondaryRomanNumeral can itself have a\nsecondaryRomanNumeral.\n>>> rn = roman.RomanNumeral('V7/vi', 'C')\n>>> rn.secondaryRomanNumeral\n<music21.roman.RomanNumeral vi in C major>",
        "type": "ListItem"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "secondaryRomanNumeralKey",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An optional key.Key object for secondary/applied RomanNumeral that\nrepresents the key that the part of the figure before the slash\nwill be interpreted in.  For instance in the roman numeral,\nC: V7/vi, the secondaryRomanNumeralKey would be a minor, since\nthe vi (submediant) refers to an a-minor triad, and thus the V7\npart is to be read as the dominant seventh in a minor.\n>>> rn = roman.RomanNumeral('V7/vi', 'C')\n>>> rn.secondaryRomanNumeralKey\n<music21.key.Key of a minor>",
        "type": "ListItem"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "seventhMinor",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "How should vii, viio,  and VII be parsed in minor?\nDefaults to Minor67Default.QUALITY.\nThis value should be passed into the constructor initially.\nChanging it after construction will not change the pitches.",
        "type": "ListItem"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "sixthMinor",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "How should vi, vio and VI be parsed in minor?\nDefaults to Minor67Default.QUALITY.\nThis value should be passed into the constructor initially.\nChanging it after construction will not change the pitches.",
        "type": "ListItem"
    },
    {
        "text": "RomanNumeral.",
        "type": "Title"
    },
    {
        "text": "useImpliedScale",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A boolean indicating whether an implied scale is being used:\n>>> roman.RomanNumeral('V').useImpliedScale\nTrue\n>>> roman.RomanNumeral('V', 'A').useImpliedScale\nFalse",
        "type": "ListItem"
    },
    {
        "text": "Instance variables inherited from Chord:",
        "type": "NarrativeText"
    },
    {
        "text": "beams isChord isNote isRest",
        "type": "Table"
    },
    {
        "text": "Instance variables inherited from ChordBase:",
        "type": "NarrativeText"
    },
    {
        "text": "beams isNote isRest",
        "type": "Table"
    },
    {
        "text": "Instance variables inherited from NotRest:",
        "type": "NarrativeText"
    },
    {
        "text": "beams",
        "type": "Table"
    },
    {
        "text": "Instance variables inherited from GeneralNote:",
        "type": "NarrativeText"
    },
    {
        "text": "articulations expressions isChord lyrics",
        "type": "Table"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "ChordFigureTuple\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.roman.",
        "type": "Title"
    },
    {
        "text": "ChordFigureTuple",
        "type": "Title"
    },
    {
        "text": "aboveBass",
        "type": "Title"
    },
    {
        "text": "alter",
        "type": "Title"
    },
    {
        "text": "prefix",
        "type": "Title"
    },
    {
        "text": "pitch",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "FigureTuple\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.roman.",
        "type": "Title"
    },
    {
        "text": "FigureTuple",
        "type": "Title"
    },
    {
        "text": "aboveBass",
        "type": "Title"
    },
    {
        "text": "alter",
        "type": "Title"
    },
    {
        "text": "prefix",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Minor67Default\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.roman.",
        "type": "Title"
    },
    {
        "text": "Minor67Default",
        "type": "Title"
    },
    {
        "text": "value",
        "type": "Title"
    },
    {
        "text": "names",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "module",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "qualname",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "type",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "start",
        "type": "Title"
    },
    {
        "text": "boundary",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Enumeration that can be passed into RomanNumeral's\nkeyword arguments sixthMinor and seventhMinor to define how Roman numerals\non the sixth and seventh scale degrees are parsed in minor.\nHere is a little helper function that creates the chord in c-minor with the given\nsixthMinor interpretation in order to show how Minor67Default affects the\ninterpretation of vi.\n>>> vi = lambda sixChord, quality: ' '.join(p.name for p in roman.RomanNumeral(\n...                                            sixChord,\n...                                            'c',\n...                                            sixthMinor=quality).pitches)\n\n\nThe default for new chords is QUALITY, which means that the chord quality\n(major, minor, diminished) determines what note is the root, lowered ^6\nor raised ^6:\n>>> vi('vi', roman.Minor67Default.QUALITY)\n'A C E'\n>>> vi('VI', roman.Minor67Default.QUALITY)\n'A- C E-'\n\n\nThe enumeration FLAT means that lowered ^6 is used for the root no matter what.\n(Note that FLAT does not mean that the root will have a flat sign on it,\nfor instance, in f-sharp minor, lowered ^6 is D natural. and in a-sharp minor,\nlowered ^6 is F#.)\n>>> vi('vi', roman.Minor67Default.FLAT)\n'A- C- E-'\n>>> vi('VI', roman.Minor67Default.FLAT)\n'A- C E-'\n\n\nConversely, SHARP implies that raised ^6 is used no matter what.\n>>> vi('vi', roman.Minor67Default.SHARP)\n'A C E'\n>>> vi('VI', roman.Minor67Default.SHARP)\n'A C# E'\n\n\nSince FLAT assumes lowered ^6 whether the chord is major or minor (or anything else),\nto get a raised ^6 with the FLAT enumeration add a sharp before the name:\n>>> vi('#vi', roman.Minor67Default.FLAT)\n'A C E'\n\n\nLikewise, with SHARP, a flat sign is needed to get lowered ^6:\n>>> vi('bVI', roman.Minor67Default.SHARP)\n'A- C E-'\n\n\nThe enumeration of CAUTIONARY is identical to QUALITY except that it\nignores the # in #vi and the b in bVI, allowing users to write these\nchords in two different way.  CAUTIONARY is recommended in the case where\nusers from different systems of training are working together, and no\nexotic chords (such as major triads on raised ^6) are used.\n>>> vi('#vi', roman.Minor67Default.CAUTIONARY)\n'A C E'\n>>> vi('vi', roman.Minor67Default.CAUTIONARY)\n'A C E'\n>>> vi('bVI', roman.Minor67Default.CAUTIONARY)\n'A- C E-'\n>>> vi('VI', roman.Minor67Default.CAUTIONARY)\n'A- C E-'\n\n\nWhereas QUALITY follows a strict interpretation of what preceeding sharp and flat\nsigns mean.  With QUALITY, since vi is already sharpened, #vi raises it even more.\nAnd since VI is already flattened, bVI lowers it even further:\n>>> vi('vi', roman.Minor67Default.QUALITY)\n'A C E'\n>>> vi('#vi', roman.Minor67Default.QUALITY)\n'A# C# E#'\n>>> vi('VI', roman.Minor67Default.QUALITY)\n'A- C E-'\n>>> vi('bVI', roman.Minor67Default.QUALITY)\n'A-- C- E--'\n\n\nIf you are using the CAUTIONARY enum, these odd chords can still be created, but\nan additional sharp or flat should be used.\n>>> vi('##vi', roman.Minor67Default.CAUTIONARY)\n'A# C# E#'\n>>> vi('bbVI', roman.Minor67Default.CAUTIONARY)\n'A-- C- E--'\n\n\nFor other odd chords that are contrary to the standard minor interpretation\nin the \u009cwrong\u009d direction, the interpretation is the same as QUALITY.\nFor instance, here is a major triad on raised ^6 (what might be generally\nconceived of as V/ii), in the QUALITY and CAUTIONARY systems:\n>>> vi('#VI', roman.Minor67Default.QUALITY)\n'A C# E'\n>>> vi('#VI', roman.Minor67Default.CAUTIONARY)\n'A C# E'\n\n\nAnd a minor triad on lowered ^6.\n>>> vi('bvi', roman.Minor67Default.QUALITY)\n'A- C- E-'\n>>> vi('bvi', roman.Minor67Default.CAUTIONARY)\n'A- C- E-'\n\n\nAll these examples use ^6, but the same concepts apply to ^7 using\nseventhMinor instead.\nThis enumeration applies to secondary chords built on ^6 or ^7:\n>>> vi('V/vi', roman.Minor67Default.QUALITY)\n'E G# B'\n>>> vi('V/VI', roman.Minor67Default.QUALITY)\n'E- G B-'\n\n\n>>> vi('V/vi', roman.Minor67Default.FLAT)\n'E- G B-'\n>>> vi('V/VI', roman.Minor67Default.FLAT)\n'E- G B-'\n\n\n\nChanged in v8: previously sixthMinor and seventhMinor did\nnot carry over to secondary roman numerals.",
        "type": "ListItem"
    },
    {
        "text": "Functions\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "music21.roman.",
        "type": "Title"
    },
    {
        "text": "correctRNAlterationForMinor",
        "type": "Title"
    },
    {
        "text": "figureTuple",
        "type": "Title"
    },
    {
        "text": "FigureTuple",
        "type": "Title"
    },
    {
        "text": "keyObj",
        "type": "Title"
    },
    {
        "text": "Key",
        "type": "Title"
    },
    {
        "text": "\u2192 FigureTuple",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "(This will become a private function in version 10)\nTakes in a FigureTuple and a Key object and returns the same or a\nnew FigureTuple correcting for the fact that, for instance, Ab in c minor\nis VI not vi.  Works properly only if the note is the root of the chord.\nUsed in RomanNumeralFromChord\nThese return new FigureTuple objects\n>>> ft5 = roman.FigureTuple(aboveBass=6, alter=-1, prefix='')\n>>> ft5a = roman.correctRNAlterationForMinor(ft5, key.Key('c'))\n>>> ft5a\nFigureTuple(aboveBass=6, alter=-1, prefix='b')\n>>> ft5a is ft5\nFalse\n\n\n>>> ft6 = roman.FigureTuple(aboveBass=6, alter=0, prefix='')\n>>> roman.correctRNAlterationForMinor(ft6, key.Key('c'))\nFigureTuple(aboveBass=6, alter=0, prefix='b')\n\n\n>>> ft7 = roman.FigureTuple(aboveBass=7, alter=1, prefix='#')\n>>> roman.correctRNAlterationForMinor(ft7, key.Key('c'))\nFigureTuple(aboveBass=7, alter=0, prefix='')\n\n\nDoes nothing for major and passes in the original Figure Tuple unchanged:\n>>> ft1 = roman.FigureTuple(aboveBass=6, alter=-1, prefix='b')\n>>> ft2 = roman.correctRNAlterationForMinor(ft1, key.Key('C'))\n>>> ft2\nFigureTuple(aboveBass=6, alter=-1, prefix='b')\n>>> ft1 is ft2\nTrue\n\n\nDoes nothing for steps other than 6 or 7:\n>>> ft3 = roman.FigureTuple(aboveBass=4, alter=-1, prefix='b')\n>>> ft4 = roman.correctRNAlterationForMinor(ft3, key.Key('c'))\n>>> ft4\nFigureTuple(aboveBass=4, alter=-1, prefix='b')\n>>> ft3 is ft4\nTrue",
        "type": "ListItem"
    },
    {
        "text": "music21.roman.",
        "type": "Title"
    },
    {
        "text": "correctSuffixForChordQuality",
        "type": "Title"
    },
    {
        "text": "chordObj",
        "type": "Title"
    },
    {
        "text": "inversionString",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Correct a given inversionString suffix given a chord of various qualities.\n>>> c = chord.Chord('E3 C4 G4')\n>>> roman.correctSuffixForChordQuality(c, '6')\n'6'\n\n\n>>> c = chord.Chord('E3 C4 G-4')\n>>> roman.correctSuffixForChordQuality(c, '6')\n'o6'",
        "type": "ListItem"
    },
    {
        "text": "music21.roman.",
        "type": "Title"
    },
    {
        "text": "expandShortHand",
        "type": "Title"
    },
    {
        "text": "shorthand",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Expands shorthand notation into a list with all figures expanded:\n>>> roman.expandShortHand('64')\n['6', '4']\n>>> roman.expandShortHand('973')\n['9', '7', '3']\n>>> roman.expandShortHand('11b3')\n['11', 'b3']\n>>> roman.expandShortHand('b13#9-6')\n['b13', '#9', '-6']\n>>> roman.expandShortHand('-')\n['5', '-3']\n\n\nSlashes don't matter:\n>>> roman.expandShortHand('6/4')\n['6', '4']\n\n\nNote that this is not where abbreviations get expanded:\n>>> roman.expandShortHand('')\n[]\n>>> roman.expandShortHand('7')  # not 7, 5, 3\n['7']\n>>> roman.expandShortHand('4/3')  # not 6, 4, 3\n['4', '3']\n\n\nNote that this is [\u00986'] not [\u00986', \u00983']:\n>>> roman.expandShortHand('6')\n['6']\n\n\nReturns a list of individual shorthands.",
        "type": "ListItem"
    },
    {
        "text": "music21.roman.",
        "type": "Title"
    },
    {
        "text": "figureTupleSolo",
        "type": "Title"
    },
    {
        "text": "pitchObj",
        "type": "Title"
    },
    {
        "text": "Pitch",
        "type": "Title"
    },
    {
        "text": "keyObj",
        "type": "Title"
    },
    {
        "text": "Key",
        "type": "Title"
    },
    {
        "text": "bass",
        "type": "Title"
    },
    {
        "text": "Pitch",
        "type": "Title"
    },
    {
        "text": "\u2192 FigureTuple",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return a single tuple for a pitch and key showing the interval above\nthe bass, its alteration from a step in the given key, an alteration\nstring, and the pitch object.\nFor instance, in C major, an A-3 above an F# bass would be:\n>>> roman.figureTupleSolo(\n...     pitch.Pitch('A-3'),\n...     key.Key('C'),\n...     pitch.Pitch('F#2'),\n...     )\nFigureTuple(aboveBass=3, alter=-1.0, prefix='b')\n\n\nThese figures can be more complex in minor, so this is a good reference, showing\nthat natural minor is always used.\n>>> c = key.Key('c')\n>>> c_as_bass = pitch.Pitch('C3')\n>>> for name in ('E--', 'E-', 'E', 'E#', 'A--', 'A-', 'A', 'A#', 'B--', 'B-', 'B', 'B#'):\n...     ft = roman.figureTupleSolo(pitch.Pitch(name + '4'), c, c_as_bass)\n...     print(f'{name:4s} {ft}')\nE--  FigureTuple(aboveBass=3, alter=-1.0, prefix='b')\nE-   FigureTuple(aboveBass=3, alter=0.0, prefix='')\nE    FigureTuple(aboveBass=3, alter=1.0, prefix='#')\nE#   FigureTuple(aboveBass=3, alter=2.0, prefix='##')\nA--  FigureTuple(aboveBass=6, alter=-1.0, prefix='b')\nA-   FigureTuple(aboveBass=6, alter=0.0, prefix='')\nA    FigureTuple(aboveBass=6, alter=1.0, prefix='#')\nA#   FigureTuple(aboveBass=6, alter=2.0, prefix='##')\nB--  FigureTuple(aboveBass=7, alter=-1.0, prefix='b')\nB-   FigureTuple(aboveBass=7, alter=0.0, prefix='')\nB    FigureTuple(aboveBass=7, alter=1.0, prefix='#')\nB#   FigureTuple(aboveBass=7, alter=2.0, prefix='##')\n\n\nReturns a namedtuple called a FigureTuple.",
        "type": "ListItem"
    },
    {
        "text": "music21.roman.",
        "type": "Title"
    },
    {
        "text": "figureTuples",
        "type": "Title"
    },
    {
        "text": "chordObject",
        "type": "Title"
    },
    {
        "text": "Chord",
        "type": "Title"
    },
    {
        "text": "keyObject",
        "type": "Title"
    },
    {
        "text": "Key",
        "type": "Title"
    },
    {
        "text": "\u2192 list[music21.roman.ChordFigureTuple]",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "(This will become a private function in v10)\nReturn a set of tuplets for each pitch showing the presence of a note, its\ninterval above the bass its alteration (float) from a step in the given\nkey, an alterationString, and the pitch object.\nNote though that for roman numerals, the applicable key is almost always\nthe root.\nFor instance, in C major, F# D A- C# would be:\n>>> roman.figureTuples(\n...     chord.Chord(['F#2', 'D3', 'A-3', 'C#4']),\n...     key.Key('C'),\n...     )\n[ChordFigureTuple(aboveBass=1, alter=1.0, prefix='#', pitch=<music21.pitch.Pitch F#2>),\n ChordFigureTuple(aboveBass=6, alter=0.0, prefix='', pitch=<music21.pitch.Pitch D3>),\n ChordFigureTuple(aboveBass=3, alter=-1.0, prefix='b', pitch=<music21.pitch.Pitch A-3>),\n ChordFigureTuple(aboveBass=5, alter=1.0, prefix='#', pitch=<music21.pitch.Pitch C#4>)]\n\n\nIn c-minor, the A- is a normal note, so the prefix is \u0098' not \u0098b'.  The natural minor is used\nexclusively.\n>>> roman.figureTuples(\n...     chord.Chord(['F#2', 'D3', 'A-3', 'C#4']),\n...     key.Key('c'),\n...     )\n[ChordFigureTuple(aboveBass=1, alter=1.0, prefix='#', pitch=<music21.pitch.Pitch F#2>),\n ChordFigureTuple(aboveBass=6, alter=0.0, prefix='', pitch=<music21.pitch.Pitch D3>),\n ChordFigureTuple(aboveBass=3, alter=0.0, prefix='', pitch=<music21.pitch.Pitch A-3>),\n ChordFigureTuple(aboveBass=5, alter=1.0, prefix='#', pitch=<music21.pitch.Pitch C#4>)]\n\n\nA C dominant-seventh chord in c minor alters the bass but not the 7th degree\n>>> roman.figureTuples(\n...     chord.Chord(['E3', 'C4', 'G4', 'B-5']),\n...     key.Key('c'),\n...     )\n[ChordFigureTuple(aboveBass=1, alter=1.0, prefix='#', pitch=<music21.pitch.Pitch E3>),\n ChordFigureTuple(aboveBass=6, alter=0.0, prefix='', pitch=<music21.pitch.Pitch C4>),\n ChordFigureTuple(aboveBass=3, alter=0.0, prefix='', pitch=<music21.pitch.Pitch G4>),\n ChordFigureTuple(aboveBass=5, alter=0.0, prefix='', pitch=<music21.pitch.Pitch B-5>)]\n\n\n>>> roman.figureTuples(\n...     chord.Chord(['C4', 'E4', 'G4', 'C#4']),\n...     key.Key('C'),\n...     )\n[ChordFigureTuple(aboveBass=1, alter=0.0, prefix='', pitch=<music21.pitch.Pitch C4>),\n ChordFigureTuple(aboveBass=3, alter=0.0, prefix='', pitch=<music21.pitch.Pitch E4>),\n ChordFigureTuple(aboveBass=5, alter=0.0, prefix='', pitch=<music21.pitch.Pitch G4>),\n ChordFigureTuple(aboveBass=1, alter=1.0, prefix='#', pitch=<music21.pitch.Pitch C#4>)]",
        "type": "ListItem"
    },
    {
        "text": "music21.roman.",
        "type": "Title"
    },
    {
        "text": "identifyAsTonicOrDominant",
        "type": "Title"
    },
    {
        "text": "inChord",
        "type": "Title"
    },
    {
        "text": "list",
        "type": "Title"
    },
    {
        "text": "tuple",
        "type": "Title"
    },
    {
        "text": "Chord",
        "type": "Title"
    },
    {
        "text": "inKey",
        "type": "Title"
    },
    {
        "text": "Key",
        "type": "Title"
    },
    {
        "text": "\u2192 str | Literal[False]",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns the roman numeral string expression (either tonic or dominant) that\nbest matches the inChord. Useful when you know inChord is either tonic or\ndominant, but only two pitches are provided in the chord. If neither tonic\nnor dominant is possibly correct, False is returned\n>>> roman.identifyAsTonicOrDominant(['B2', 'F5'], key.Key('C'))\n'V65'\n\n\n>>> roman.identifyAsTonicOrDominant(['B3', 'G4'], key.Key('g'))\n'i6'\n\n\n>>> roman.identifyAsTonicOrDominant(['C3', 'B-4'], key.Key('f'))\n'V7'\n\n\nNotice that this \u2014 with B-natural is also identified as V7 because\nit is returning the roman numeral root and the inversion name, not yet\nchecking for correctness.\n>>> roman.identifyAsTonicOrDominant(['C3', 'B4'], key.Key('f'))\n'V7'\n\n\n>>> roman.identifyAsTonicOrDominant(['D3'], key.Key('f'))\nFalse",
        "type": "ListItem"
    },
    {
        "text": "music21.roman.",
        "type": "Title"
    },
    {
        "text": "postFigureFromChordAndKey",
        "type": "Title"
    },
    {
        "text": "chordObj",
        "type": "Title"
    },
    {
        "text": "keyObj",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "(Note: this will become a private function by v10.)\nReturns the post-RN figure for a given chord in a given key.\nIf keyObj is none, it uses the root as a major key:\n>>> roman.postFigureFromChordAndKey(\n...     chord.Chord(['F#2', 'D3', 'A-3', 'C#4']),\n...     key.Key('C'),\n...     )\n'o6#5b3'\n\n\nThe function substitutes shorthand (e.g., \u00986' not \u009863')\n>>> roman.postFigureFromChordAndKey(\n...     chord.Chord(['E3', 'C4', 'G4']),\n...     key.Key('C'),\n...     )\n'6'\n\n\n>>> roman.postFigureFromChordAndKey(\n...     chord.Chord(['E3', 'C4', 'G4', 'B-5']),\n...     key.Key('F'),\n...     )\n'65'\n\n\n>>> roman.postFigureFromChordAndKey(\n...     chord.Chord(['E3', 'C4', 'G4', 'B-5']),\n...     key.Key('C'),\n...     )\n'6b5'\n\n\nWe reduce common omissions from seventh chords to be \u00987' instead\nof \u009875', \u009873', etc.\n>>> roman.postFigureFromChordAndKey(\n...     chord.Chord(['A3', 'E-4', 'G-4']),\n...     key.Key('b-'),\n...     )\n'o7'",
        "type": "ListItem"
    },
    {
        "text": "music21.roman.",
        "type": "Title"
    },
    {
        "text": "romanInversionName",
        "type": "Title"
    },
    {
        "text": "inChord",
        "type": "Title"
    },
    {
        "text": "Chord",
        "type": "Title"
    },
    {
        "text": "inv",
        "type": "Title"
    },
    {
        "text": "int | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u2192 str",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Extremely similar to Chord's inversionName() method, but returns string\nvalues and allows incomplete triads.\n>>> roman.romanInversionName(chord.Chord('E4 G4 C5'))\n'6'\n\n\n>>> roman.romanInversionName(chord.Chord('G4 B4 C5 E5'))\n'43'\n\n\nManually set the inversion to see what would happen.\n>>> roman.romanInversionName(chord.Chord('C5 E5 G5'), inv=2)\n'64'\n\n\n>>> roman.romanInversionName(chord.Chord('C5 E5 G5'), inv=0)\n''\n\n\nUncommon/unusual chords return an empty string\n>>> roman.romanInversionName(chord.Chord('C5 C#4'))\n''\n\n\nDoes not return ninth or eleventh chord figures.",
        "type": "ListItem"
    },
    {
        "text": "music21.roman.",
        "type": "Title"
    },
    {
        "text": "romanNumeralFromChord",
        "type": "Title"
    },
    {
        "text": "chordObj",
        "type": "Title"
    },
    {
        "text": "Chord",
        "type": "Title"
    },
    {
        "text": "keyObj",
        "type": "Title"
    },
    {
        "text": "Key",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "preferSecondaryDominants",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "\u2192 RomanNumeral",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Takes a chord object and returns an appropriate chord name.  If keyObj is\nomitted, the root of the chord is considered the key (if the chord has a\nmajor third, it's major; otherwise it's minor).\n>>> rn = roman.romanNumeralFromChord(\n...     chord.Chord(['E-3', 'C4', 'G-6']),\n...     key.Key('g#'),\n...     )\n>>> rn\n<music21.roman.RomanNumeral bivo6 in g# minor>\n\n\nThe pitches remain the same with the same octaves:\n>>> for p in rn.pitches:\n...     p\n<music21.pitch.Pitch E-3>\n<music21.pitch.Pitch C4>\n<music21.pitch.Pitch G-6>\n\n\n>>> romanNumeral2 = roman.romanNumeralFromChord(\n...     chord.Chord(['E3', 'C4', 'G4', 'B-4', 'E5', 'G5']),\n...     key.Key('F'),\n...     )\n>>> romanNumeral2\n<music21.roman.RomanNumeral V65 in F major>\n\n\nNote that vi and vii in minor, by default, signifies what you might think of\nalternatively as #vi and #vii:\n>>> romanNumeral3 = roman.romanNumeralFromChord(\n...     chord.Chord(['A4', 'C5', 'E-5']),\n...     key.Key('c'),\n...     )\n>>> romanNumeral3\n<music21.roman.RomanNumeral vio in c minor>\n\n\n>>> romanNumeral4 = roman.romanNumeralFromChord(\n...     chord.Chord(['A-4', 'C5', 'E-5']),\n...     key.Key('c'),\n...     )\n>>> romanNumeral4\n<music21.roman.RomanNumeral bVI in c minor>\n>>> romanNumeral4.sixthMinor\n<Minor67Default.CAUTIONARY: 2>\n\n\n>>> romanNumeral5 = roman.romanNumeralFromChord(\n...     chord.Chord(['B4', 'D5', 'F5']),\n...     key.Key('c'),\n...     )\n>>> romanNumeral5\n<music21.roman.RomanNumeral viio in c minor>\n\n\n>>> romanNumeral6 = roman.romanNumeralFromChord(\n...     chord.Chord(['B-4', 'D5', 'F5']),\n...     key.Key('c'),\n...     )\n>>> romanNumeral6\n<music21.roman.RomanNumeral bVII in c minor>\n\n\nDiminished and half-diminished seventh chords can omit the third and still\nbe diminished: (n.b. we also demonstrate that chords can be created from a\nstring):\n>>> romanNumeralDim7 = roman.romanNumeralFromChord(\n...     chord.Chord('A3 E-4 G-4'),\n...     key.Key('b-'),\n...     )\n>>> romanNumeralDim7\n<music21.roman.RomanNumeral viio7 in b- minor>\n\n\nFor reference, odder notes:\n>>> romanNumeral7 = roman.romanNumeralFromChord(\n...     chord.Chord(['A--4', 'C-5', 'E--5']),\n...     key.Key('c'),\n...     )\n>>> romanNumeral7\n<music21.roman.RomanNumeral bbVI in c minor>\n\n\n>>> romanNumeral8 = roman.romanNumeralFromChord(\n...     chord.Chord(['A#4', 'C#5', 'E#5']),\n...     key.Key('c'),\n...     )\n>>> romanNumeral8\n<music21.roman.RomanNumeral #vi in c minor>\n\n\n>>> romanNumeral10 = roman.romanNumeralFromChord(\n...     chord.Chord(['F#3', 'A3', 'E4', 'C5']),\n...     key.Key('d'),\n...     )\n>>> romanNumeral10\n<music21.roman.RomanNumeral #iii\u00c3\u00b87 in d minor>\n\n\nAugmented 6ths without key context\n>>> roman.romanNumeralFromChord(\n...     chord.Chord('E-4 G4 C#5'),\n...     )\n<music21.roman.RomanNumeral It6 in g minor>\n\n\n>>> roman.romanNumeralFromChord(\n...     chord.Chord('E-4 G4 B-4 C#5'),\n...     )\n<music21.roman.RomanNumeral Ger65 in g minor>\n\n\n>>> roman.romanNumeralFromChord(\n...     chord.Chord('E-4 G4 A4 C#5'),\n...     )\n<music21.roman.RomanNumeral Fr43 in g minor>\n\n\n>>> roman.romanNumeralFromChord(\n...     chord.Chord('E-4 G4 A#4 C#5'),\n...     )\n<music21.roman.RomanNumeral Sw43 in g minor>\n\n\nWith correct key context:\n>>> roman.romanNumeralFromChord(\n...     chord.Chord('E-4 G4 C#5'),\n...     key.Key('G')\n...     )\n<music21.roman.RomanNumeral It6 in G major>\n\n\nWith incorrect key context does not find an augmented 6th chord:\n>>> roman.romanNumeralFromChord(\n...     chord.Chord('E-4 G4 C#5'),\n...     key.Key('C')\n...     )\n<music21.roman.RomanNumeral #io6b3 in C major>\n\n\nEmpty chords, including NoChord objects, give empty RomanNumerals:\n>>> roman.romanNumeralFromChord(harmony.NoChord())\n<music21.roman.RomanNumeral>\n\n\nAugmented 6th chords in other inversions do not currently find correct roman numerals\n\nChanged in v7: i7 is given for a tonic or subdominant minor-seventh chord in major:\n\n>>> roman.romanNumeralFromChord(\n...     chord.Chord('C4 E-4 G4 B-4'),\n...     key.Key('C'))\n<music21.roman.RomanNumeral i7 in C major>\n\n\n>>> roman.romanNumeralFromChord(\n...     chord.Chord('E-4 G4 B-4 C5'),\n...     key.Key('G'))\n<music21.roman.RomanNumeral iv65 in G major>\n\n\nminor-Major chords are written with a [#7] modifier afterwards:\n>>> roman.romanNumeralFromChord(\n...     chord.Chord('C4 E-4 G4 B4'),\n...     key.Key('C'))\n<music21.roman.RomanNumeral i7[#7] in C major>\n>>> roman.romanNumeralFromChord(\n...     chord.Chord('E-4 G4 B4 C5'),\n...     key.Key('C'))\n<music21.roman.RomanNumeral i65[#7] in C major>\n\n\nFormer bugs that are now fixed:\n>>> romanNumeral11 = roman.romanNumeralFromChord(\n...     chord.Chord(['E4', 'G4', 'B4', 'D5']),\n...     key.Key('C'),\n...     )\n>>> romanNumeral11\n<music21.roman.RomanNumeral iii7 in C major>\n\n\n>>> roman.romanNumeralFromChord(chord.Chord('A3 C4 E-4 G4'), key.Key('c'))\n<music21.roman.RomanNumeral vi\u00c3\u00b87 in c minor>\n\n\n>>> roman.romanNumeralFromChord(chord.Chord('A3 C4 E-4 G4'), key.Key('B-'))\n<music21.roman.RomanNumeral vii\u00c3\u00b87 in B- major>\n\n\n>>> romanNumeral9 = roman.romanNumeralFromChord(\n...     chord.Chord(['C4', 'E5', 'G5', 'C#6']),\n...     key.Key('C'),\n...     )\n>>> romanNumeral9\n<music21.roman.RomanNumeral I#853 in C major>\n\n\nNot an augmented 6th:\n>>> roman.romanNumeralFromChord(\n...     chord.Chord('E4 G4 B-4 C#5')\n...     )\n<music21.roman.RomanNumeral io6b5b3 in c# minor>\n\n\nThe preferSecondaryDominants option defaults to False, but if set to True,\nthen certain rare figures are swapped with their\nmore common secondary dominant equivalent to produce\nRoman numerals like \u0098V/V' instead of \u0098II'.\nThis has no effect on most chords.\nA change is triggered if and only if:\n\nthe chord is a major triad or dominant seventh\nthe chord is not diatonic to the primary key (i.e., chromatically altered)\nthe root of secondary key is diatonic to the primary key.\n\nSo first without setting preferSecondaryDominants:\n>>> cd = chord.Chord('D F# A')\n>>> rn = roman.romanNumeralFromChord(cd, 'C')\n>>> rn.figure\n'II'\n\n\nAnd now with preferSecondaryDominants=True:\n>>> rn = roman.romanNumeralFromChord(cd, 'C', preferSecondaryDominants=True)\n>>> rn.figure\n'V/V'\n\n\nDominant sevenths must be spelt correctly\n(see conditions at isDominantSeventh()).\nSo let's try D dominant seventh in various contexts.\n>>> cd = chord.Chord('F#4 A4 C5 D5')\n\n\nIn G major this still comes out without recourse to a secondary,\nwhether preferSecondaryDominants is True or False.\n>>> rn = roman.romanNumeralFromChord(cd, 'G')\n>>> rn.figure\n'V65'\n\n\n>>> rn = roman.romanNumeralFromChord(cd, 'G', preferSecondaryDominants=True)\n>>> rn.figure\n'V65'\n\n\nIn C major it does come through as a secondary\n>>> rn = roman.romanNumeralFromChord(cd, 'C', preferSecondaryDominants=True)\n>>> rn.figure\n'V65/V'\n\n\n\u009cGerman Augmented sixth\u009d chords are left intact, without change.\nThis is thanks to the constraints on\nspelling and on the root of the secondary degree.\n>>> cd = chord.Chord('Ab4 C5 Eb5 F#5')\n>>> rn = roman.romanNumeralFromChord(cd, 'C', preferSecondaryDominants=True)\n>>> rn.figure\n'Ger65'\n\n\nLet's check that with a dominant seventh spelling and minor key context:\n>>> cd = chord.Chord('Ab4 C5 Eb5 Gb5')\n>>> rn = roman.romanNumeralFromChord(cd, 'c', preferSecondaryDominants=True)\n>>> rn.figure\n'bVIb753'\n\n\nSo that's a context in which the root is diatonic,\nbut the possible secondary root is not.\nNow let's do the opposite case with a root that is not diatonic\nand a secondary that is.\n>>> cd = chord.Chord('Ab4 C5 Eb5 Gb5')\n>>> rn = roman.romanNumeralFromChord(cd, 'c', preferSecondaryDominants=True)\n>>> rn.figure\n'bVIb753'\n\n\nWatch out, because there are still a lot of chords that\npreferSecondaryDominants will alter.\nThis is deliberate: this option defaults to false\nso it does not run unless a user specifically initiates it\nand actively wants to make modifications.\nPower users could create more specific conditions in which to call it,\ne.g., before/after specific chords,\nand they can only do so if it errs on the side of more changes.\nFor example, in minor, \u0098I' will be mapped to \u0098V/iv'.\n>>> cd = chord.Chord('F4 A4 C5')\n>>> rn = roman.romanNumeralFromChord(cd, 'f')\n>>> rn.figure\n'I'\n\n\n>>> cd = chord.Chord('F4 A4 C5')\n>>> rn = roman.romanNumeralFromChord(cd, 'f', preferSecondaryDominants=True)\n>>> rn.figure\n'V/iv'\n\n\nThis might be appropriate in the middle of a progression like\ni, V/iv, iv.\nBy contrast, it's probably not wanted for a tierce de picardie at the end\niv6, V, I.\nThis kind of context-sensitivity is not currently included.",
        "type": "ListItem"
    },
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.roman",
        "type": "ListItem"
    },
    {
        "text": "\u00a9 Copyright 2006-2023 Michael Scott Asato Cuthbert.\n      Last updated on Jun 12, 2023.",
        "type": "NarrativeText"
    }
]