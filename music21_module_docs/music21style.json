[
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.style",
        "type": "ListItem"
    },
    {
        "text": "Previous topic",
        "type": "Title"
    },
    {
        "text": "music21.stream.tools",
        "type": "Title"
    },
    {
        "text": "Next topic",
        "type": "Title"
    },
    {
        "text": "music21.tablature",
        "type": "Title"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "music21.style\nBeamStyle\nBeamStyle\n\n\nBezierStyle\nBezierStyle\n\n\nEnclosure\nEnclosure\n\n\nLineStyle\nLineStyle\n\n\nNoteStyle\nNoteStyle\nNoteStyle.accidentalStyle\nNoteStyle.noteSize\nNoteStyle.stemStyle\n\n\n\n\nStreamStyle\nStreamStyle\n\n\nStyle\nStyle\nStyle.absoluteY\nStyle.enclosure\nStyle.hideObjectOnPrint\nStyle.units\n\n\n\n\nStyleMixin\nStyleMixin\nStyleMixin.hasEditorialInformation\nStyleMixin.hasStyleInformation\nStyleMixin.editorial\nStyleMixin.style\n\n\n\n\nTextStyle\nTextStyle\nTextStyle.alignHorizontal\nTextStyle.alignVertical\nTextStyle.fontFamily\nTextStyle.fontSize\nTextStyle.fontStyle\nTextStyle.fontWeight\nTextStyle.justify\nTextStyle.letterSpacing\n\n\n\n\nTextStylePlacement\nTextStylePlacement",
        "type": "ListItem"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "About music21",
        "type": "ListItem"
    },
    {
        "text": "User's Guide",
        "type": "ListItem"
    },
    {
        "text": "Module Reference",
        "type": "ListItem"
    },
    {
        "text": "Installation",
        "type": "ListItem"
    },
    {
        "text": "Developer Reference",
        "type": "ListItem"
    },
    {
        "text": "Documentation and tests in progress",
        "type": "ListItem"
    },
    {
        "text": "Quick search",
        "type": "Title"
    },
    {
        "text": "This Page",
        "type": "Title"
    },
    {
        "text": "Show Source",
        "type": "ListItem"
    },
    {
        "text": "music21.style\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "The style module represents information about the style of a Note, Accidental,\netc. such that precise positioning information, layout, size, etc. can be specified.",
        "type": "NarrativeText"
    },
    {
        "text": "BeamStyle\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.style.",
        "type": "Title"
    },
    {
        "text": "BeamStyle",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Style for beams",
        "type": "ListItem"
    },
    {
        "text": "BeamStyle bases",
        "type": "Title"
    },
    {
        "text": "Style",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "BeamStyle read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "BeamStyle read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Style:",
        "type": "NarrativeText"
    },
    {
        "text": "absoluteY enclosure",
        "type": "Table"
    },
    {
        "text": "BeamStyle methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "BeamStyle instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Style:",
        "type": "NarrativeText"
    },
    {
        "text": "hideObjectOnPrint units",
        "type": "Table"
    },
    {
        "text": "BezierStyle\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.style.",
        "type": "Title"
    },
    {
        "text": "BezierStyle",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "From the MusicXML Definition.",
        "type": "ListItem"
    },
    {
        "text": "BezierStyle bases",
        "type": "Title"
    },
    {
        "text": "Style",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "BezierStyle read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "BezierStyle read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Style:",
        "type": "NarrativeText"
    },
    {
        "text": "absoluteY enclosure",
        "type": "Table"
    },
    {
        "text": "BezierStyle methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "BezierStyle instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Style:",
        "type": "NarrativeText"
    },
    {
        "text": "hideObjectOnPrint units",
        "type": "Table"
    },
    {
        "text": "Enclosure\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.style.",
        "type": "Title"
    },
    {
        "text": "Enclosure",
        "type": "Title"
    },
    {
        "text": "value",
        "type": "Title"
    },
    {
        "text": "names",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "module",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "qualname",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "type",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "start",
        "type": "Title"
    },
    {
        "text": "boundary",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Enclosure bases",
        "type": "Title"
    },
    {
        "text": "StrEnum",
        "type": "ListItem"
    },
    {
        "text": "LineStyle\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.style.",
        "type": "Title"
    },
    {
        "text": "LineStyle",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "from the MusicXML Definition\nDefines lineShape (\u0098straight', \u0098curved' or None)\nlineType (\u0098solid', \u0098dashed', \u0098dotted', \u0098wavy' or None)\ndashLength (in tenths)\nspaceLength (in tenths)",
        "type": "ListItem"
    },
    {
        "text": "LineStyle bases",
        "type": "Title"
    },
    {
        "text": "Style",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "LineStyle read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "LineStyle read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Style:",
        "type": "NarrativeText"
    },
    {
        "text": "absoluteY enclosure",
        "type": "Table"
    },
    {
        "text": "LineStyle methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "LineStyle instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Style:",
        "type": "NarrativeText"
    },
    {
        "text": "hideObjectOnPrint units",
        "type": "Table"
    },
    {
        "text": "NoteStyle\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.style.",
        "type": "Title"
    },
    {
        "text": "NoteStyle",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A Style object that also includes stem and accidental style information.\nBeam style is stored on the Beams object.  Lyric style is stored on the Lyric\nobject.",
        "type": "ListItem"
    },
    {
        "text": "NoteStyle bases",
        "type": "Title"
    },
    {
        "text": "Style",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "NoteStyle read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "NoteStyle read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Style:",
        "type": "NarrativeText"
    },
    {
        "text": "absoluteY enclosure",
        "type": "Table"
    },
    {
        "text": "NoteStyle methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "NoteStyle instance variables",
        "type": "Title"
    },
    {
        "text": "NoteStyle.",
        "type": "Title"
    },
    {
        "text": "accidentalStyle",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An optional style.Style object describing what the accidental looks like.\n>>> n = note.Note()\n>>> n.style.accidentalStyle is None\nTrue\n\n\nNote that accidentalStyle is not created automatically.  Users must\ninstantiate a Style object.\n>>> n.style.accidentalStyle = style.Style()\n>>> n.style.accidentalStyle.relativeX = -2.0\n\n\nNote: do not use .hideObjectOnPrint in accidentalStyle to hide the\naccidental.  Set the displayType on the Accidental itself.\nThis object may eventually move to Note.pitch.accidental.style.",
        "type": "ListItem"
    },
    {
        "text": "NoteStyle.",
        "type": "Title"
    },
    {
        "text": "noteSize",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An optional string representing the size of the note as a type of note.\nValid values are None (=normal), \u0098cue', \u0098grace', \u0098graceCue', and \u0098large'\n(taken from MusicXML, with \u009cgraceCue\u009d replacing \u009cgrace-cue\u009d).",
        "type": "ListItem"
    },
    {
        "text": "NoteStyle.",
        "type": "Title"
    },
    {
        "text": "stemStyle",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An optional style.Style object describing what the stem looks like.\n>>> n = note.Note()\n>>> n.style.stemStyle is None\nTrue\n\n\nNote that stemStyle is not created automatically.  Users must\ninstantiate a Style object.\n>>> n.style.stemStyle = style.Style()\n>>> n.style.stemStyle.color = 'red'",
        "type": "ListItem"
    },
    {
        "text": "Instance variables inherited from Style:",
        "type": "NarrativeText"
    },
    {
        "text": "hideObjectOnPrint units",
        "type": "Table"
    },
    {
        "text": "StreamStyle\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.style.",
        "type": "Title"
    },
    {
        "text": "StreamStyle",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Includes several elements in the MusicXML <appearance> tag in <defaults>\nalong with <music-font> and <word-font>",
        "type": "ListItem"
    },
    {
        "text": "StreamStyle bases",
        "type": "Title"
    },
    {
        "text": "Style",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "StreamStyle read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "StreamStyle read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Style:",
        "type": "NarrativeText"
    },
    {
        "text": "absoluteY enclosure",
        "type": "Table"
    },
    {
        "text": "StreamStyle methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "StreamStyle instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Style:",
        "type": "NarrativeText"
    },
    {
        "text": "hideObjectOnPrint units",
        "type": "Table"
    },
    {
        "text": "Style\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.style.",
        "type": "Title"
    },
    {
        "text": "Style",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A style object is a lightweight object that\nkeeps track of information about the look of an object.\n>>> st = style.Style()\n>>> st.units\n'tenths'\n>>> st.absoluteX is None\nTrue\n\n\n>>> st.absoluteX = 20.4\n>>> st.absoluteX\n20.4",
        "type": "ListItem"
    },
    {
        "text": "Style bases",
        "type": "Title"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "Style read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "Style read/write properties",
        "type": "Title"
    },
    {
        "text": "Style.",
        "type": "Title"
    },
    {
        "text": "absoluteY",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get or set the vertical position, where 0\nis the top line of the staff and units\nare whatever is defined in .units, generally \u009ctenths\u009d, meaning\n1/10th of a staff space.\nOther legal positions are \u0098above' and \u0098below' which\nare synonyms for 10 and -70 respectively (for 5-line\nstaves; other staves are not yet implemented)\nThis behavior may change in music21 v8 or after.\n>>> te = style.Style()\n>>> te.absoluteY = 10\n>>> te.absoluteY\n10\n\n\n>>> te.absoluteY = 'below'\n>>> te.absoluteY\n-70\n\n\nSetting an invalid position raises a TextFormatException\n>>> te.absoluteY = 'hello'\nTraceback (most recent call last):\nmusic21.style.TextFormatException:\n    Not a supported absoluteY position: 'hello'",
        "type": "ListItem"
    },
    {
        "text": "Style.",
        "type": "Title"
    },
    {
        "text": "enclosure",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get or set the enclosure as a style.Enclosure enum or None.\nValid names are\n\u009crectangle\u009d/style.Enclosure.RECTANGLE,\n\u009csquare\u009d/style.Enclosure.SQUARE,\n\u009coval\u009d/style.Enclosure.OVAL,\n\u009ccircle\u009d/style.Enclosure.CIRCLE,\n\u009cbracket\u009d/style.Enclosure.BRACKET,\n\u009cinverted-bracket\u009d/style.Enclosure.INVERTED_BRACKET (output in musicxml 4 only)\nNone/\u009dnone\u009d/style.Enclosure.NONE (returns Python None object)\nor the following other shapes with their ALLCAPS Enclosure equivalents:\ntriangle, diamond,\npentagon, hexagon, heptagon, octagon,\nnonagon, or decagon.\n>>> tst = style.TextStyle()\n>>> tst.enclosure = None\n>>> tst.enclosure = style.Enclosure.RECTANGLE\n>>> tst.enclosure\n<Enclosure.RECTANGLE>\n\n\nSetting as a string is still supported, but is converted to\nan enum.\n>>> tst.enclosure = 'octagon'\n>>> tst.enclosure\n<Enclosure.OCTAGON>\n\n\nSetting an invalid enclosure raises a TextFormatException\n>>> tst.enclosure = 'parabola'\nTraceback (most recent call last):\nmusic21.style.TextFormatException:\n    Not a supported enclosure: 'parabola'",
        "type": "ListItem"
    },
    {
        "text": "Style methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "Style instance variables",
        "type": "Title"
    },
    {
        "text": "Style.",
        "type": "Title"
    },
    {
        "text": "hideObjectOnPrint",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "If set to True, the Music21Object will not print upon output\n(only used in MusicXML output at this point and\nin Lilypond output for notes, chords, and rests).",
        "type": "ListItem"
    },
    {
        "text": "Style.",
        "type": "Title"
    },
    {
        "text": "units",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "What distances are measured in.  The default \u009ctenths\u009d is a concept\nborrowed from MusicXML which refers to 1/10th of the distance between\ntwo staff lines.  It is currently also the only supported unit.",
        "type": "ListItem"
    },
    {
        "text": "StyleMixin\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.style.",
        "type": "Title"
    },
    {
        "text": "StyleMixin",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Mixin for any class that wants to support style and editorial, since several\nnon-music21 objects, such as Lyrics and Accidentals will support Style.\nNot used by Music21Objects because of the added trouble in copying etc. so\nthere is code duplication with base.Music21Object",
        "type": "ListItem"
    },
    {
        "text": "StyleMixin bases",
        "type": "Title"
    },
    {
        "text": "SlottedObjectMixin",
        "type": "ListItem"
    },
    {
        "text": "StyleMixin read-only properties",
        "type": "Title"
    },
    {
        "text": "StyleMixin.",
        "type": "Title"
    },
    {
        "text": "hasEditorialInformation",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns True if there is a Editorial object\nalready associated with this object, False otherwise.\nCalling .style on an object will always create a new\nStyle object, so even though a new Style object isn't too expensive\nto create, this property helps to prevent creating new Styles more than\nnecessary.\n>>> acc = pitch.Accidental('#')\n>>> acc.hasEditorialInformation\nFalse\n>>> acc.editorial\n<music21.editorial.Editorial {}>\n>>> acc.hasEditorialInformation\nTrue",
        "type": "ListItem"
    },
    {
        "text": "StyleMixin.",
        "type": "Title"
    },
    {
        "text": "hasStyleInformation",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns True if there is a Style object\nalready associated with this object, False otherwise.\nCalling .style on an object will always create a new\nStyle object, so even though a new Style object isn't too expensive\nto create, this property helps to prevent creating new Styles more than\nnecessary.\n>>> lObj = note.Lyric('hello')\n>>> lObj.hasStyleInformation\nFalse\n>>> lObj.style\n<music21.style.TextStylePlacement object at 0x10b0a2080>\n>>> lObj.hasStyleInformation\nTrue",
        "type": "ListItem"
    },
    {
        "text": "StyleMixin read/write properties",
        "type": "Title"
    },
    {
        "text": "StyleMixin.",
        "type": "Title"
    },
    {
        "text": "editorial",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "a Editorial object that stores editorial information\n(comments, footnotes, harmonic information, ficta).\nCreated automatically as needed:\n>>> acc = pitch.Accidental()\n>>> acc.editorial\n<music21.editorial.Editorial {}>\n>>> acc.editorial.ficta = pitch.Accidental('sharp')\n>>> acc.editorial.ficta\n<music21.pitch.Accidental sharp>\n>>> acc.editorial\n<music21.editorial.Editorial {'ficta': <music21.pitch.Accidental sharp>}>",
        "type": "ListItem"
    },
    {
        "text": "StyleMixin.",
        "type": "Title"
    },
    {
        "text": "style",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns (or Creates and then Returns) the Style object\nassociated with this object, or sets a new\nstyle object.  Different classes might use\ndifferent Style objects because they might have different\nstyle needs (such as text formatting or bezier positioning)\nEventually will also query the groups to see if they have\nany styles associated with them.\n>>> acc = pitch.Accidental()\n>>> st = acc.style\n>>> st\n<music21.style.TextStyle object at 0x10ba96208>\n>>> st.absoluteX = 20.0\n>>> st.absoluteX\n20.0\n>>> acc.style = style.TextStyle()\n>>> acc.style.absoluteX is None\nTrue",
        "type": "ListItem"
    },
    {
        "text": "TextStyle\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.style.",
        "type": "Title"
    },
    {
        "text": "TextStyle",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A Style object that also includes text formatting.\n>>> ts = style.TextStyle()\n>>> ts.classes\n('TextStyle', 'Style', 'ProtoM21Object', 'object')",
        "type": "ListItem"
    },
    {
        "text": "TextStyle bases",
        "type": "Title"
    },
    {
        "text": "Style",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "TextStyle read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "TextStyle read/write properties",
        "type": "Title"
    },
    {
        "text": "TextStyle.",
        "type": "Title"
    },
    {
        "text": "alignHorizontal",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get or set the horizontal alignment.  Valid values are left, right, center,\nor None\n>>> te = style.TextStyle()\n>>> te.alignHorizontal = 'right'\n>>> te.alignHorizontal\n'right'\n\n\nInvalid horizontal aligns raise a TextFormatException:\n>>> te.alignHorizontal = 'hello'\nTraceback (most recent call last):\nmusic21.style.TextFormatException:\n    Invalid horizontal align: 'hello'",
        "type": "ListItem"
    },
    {
        "text": "TextStyle.",
        "type": "Title"
    },
    {
        "text": "alignVertical",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get or set the vertical align. Valid values are top, middle, bottom, baseline\nor None\n>>> te = style.TextStyle()\n>>> te.alignVertical = 'top'\n>>> te.alignVertical\n'top'\n\n\nInvalid vertical aligns raise a TextFormatException:\n>>> te.alignVertical = 'hello'\nTraceback (most recent call last):\nmusic21.style.TextFormatException:\n    Invalid vertical align: 'hello'",
        "type": "ListItem"
    },
    {
        "text": "TextStyle.",
        "type": "Title"
    },
    {
        "text": "fontFamily",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns a list of font family names associated with\nthe style, or sets the font family name list.\nIf a single string is passed then it is converted to\na list.\n>>> ts = style.TextStyle()\n>>> ff = ts.fontFamily\n>>> ff\n[]\n>>> ff.append('Times')\n>>> ts.fontFamily\n['Times']\n>>> ts.fontFamily.append('Garamond')\n>>> ts.fontFamily\n['Times', 'Garamond']\n>>> ts.fontFamily = 'Helvetica, sans-serif'\n>>> ts.fontFamily\n['Helvetica', 'sans-serif']",
        "type": "ListItem"
    },
    {
        "text": "TextStyle.",
        "type": "Title"
    },
    {
        "text": "fontSize",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get or set the size.  Best, an int or float, but also a css font size\n>>> tst = style.TextStyle()\n>>> tst.fontSize = 20\n>>> tst.fontSize\n20",
        "type": "ListItem"
    },
    {
        "text": "TextStyle.",
        "type": "Title"
    },
    {
        "text": "fontStyle",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get or set the style, as normal, italic, bold, and bolditalic.\nNone is currently an acceptable value which should be \u009cnormal\u009d.\n>>> tst = style.TextStyle()\n>>> tst.fontStyle = 'bold'\n>>> tst.fontStyle\n'bold'\n\n\nInvalid values raise a TextFormatException\n>>> tst.fontStyle = 'hello'\nTraceback (most recent call last):\nmusic21.style.TextFormatException:\n    Not a supported fontStyle: 'hello'",
        "type": "ListItem"
    },
    {
        "text": "TextStyle.",
        "type": "Title"
    },
    {
        "text": "fontWeight",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get or set the weight, as normal, or bold.\n>>> tst = style.TextStyle()\n>>> tst.fontWeight = 'bold'\n>>> tst.fontWeight\n'bold'",
        "type": "ListItem"
    },
    {
        "text": "TextStyle.",
        "type": "Title"
    },
    {
        "text": "justify",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get or set the justification.  Valid values are left,\ncenter, right, full (not supported by MusicXML), and None\n>>> tst = style.TextStyle()\n>>> tst.justify = 'center'\n>>> tst.justify\n'center'\n\n\nInvalid values raise a TextFormatException\n>>> tst.justify = 'hello'\nTraceback (most recent call last):\nmusic21.style.TextFormatException:\n    Not a supported justification: 'hello'",
        "type": "ListItem"
    },
    {
        "text": "TextStyle.",
        "type": "Title"
    },
    {
        "text": "letterSpacing",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get or set the letter spacing.\n\n>>> tst = style.TextStyle()\n>>> tst.letterSpacing = 20\n>>> tst.letterSpacing\n20.0\n>>> tst.letterSpacing = 'normal'",
        "type": "ListItem"
    },
    {
        "text": "Read/write properties inherited from Style:",
        "type": "NarrativeText"
    },
    {
        "text": "absoluteY enclosure",
        "type": "Table"
    },
    {
        "text": "TextStyle methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "TextStyle instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Style:",
        "type": "NarrativeText"
    },
    {
        "text": "hideObjectOnPrint units",
        "type": "Table"
    },
    {
        "text": "TextStylePlacement\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.style.",
        "type": "Title"
    },
    {
        "text": "TextStylePlacement",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "TextStyle plus a placement attribute",
        "type": "ListItem"
    },
    {
        "text": "TextStylePlacement bases",
        "type": "Title"
    },
    {
        "text": "TextStyle",
        "type": "ListItem"
    },
    {
        "text": "Style",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "TextStylePlacement read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "TextStylePlacement read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from TextStyle:",
        "type": "NarrativeText"
    },
    {
        "text": "alignHorizontal alignVertical fontFamily fontSize fontStyle fontWeight justify letterSpacing",
        "type": "Table"
    },
    {
        "text": "Read/write properties inherited from Style:",
        "type": "NarrativeText"
    },
    {
        "text": "absoluteY enclosure",
        "type": "Table"
    },
    {
        "text": "TextStylePlacement methods",
        "type": "Title"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "TextStylePlacement instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Style:",
        "type": "NarrativeText"
    },
    {
        "text": "hideObjectOnPrint units",
        "type": "Table"
    },
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.style",
        "type": "ListItem"
    },
    {
        "text": "\u00a9 Copyright 2006-2023 Michael Scott Asato Cuthbert.\n      Last updated on Jun 12, 2023.",
        "type": "NarrativeText"
    }
]