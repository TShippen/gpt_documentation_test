[
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.stream.core",
        "type": "ListItem"
    },
    {
        "text": "Previous topic",
        "type": "Title"
    },
    {
        "text": "music21.stream.base",
        "type": "Title"
    },
    {
        "text": "Next topic",
        "type": "Title"
    },
    {
        "text": "music21.stream.enums",
        "type": "Title"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "music21.stream.core\nStreamCore\nStreamCore\nStreamCore.spannerBundle\nStreamCore.asTimespans()\nStreamCore.asTree()\nStreamCore.coreAppend()\nStreamCore.coreCopyAsDerivation()\nStreamCore.coreElementsChanged()\nStreamCore.coreGatherMissingSpanners()\nStreamCore.coreGetElementByMemoryLocation()\nStreamCore.coreGuardBeforeAddElement()\nStreamCore.coreHasElementByMemoryLocation()\nStreamCore.coreInsert()\nStreamCore.coreSelfActiveSite()\nStreamCore.coreSetElementOffset()\nStreamCore.coreStoreAtEnd()",
        "type": "ListItem"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "About music21",
        "type": "ListItem"
    },
    {
        "text": "User's Guide",
        "type": "ListItem"
    },
    {
        "text": "Module Reference",
        "type": "ListItem"
    },
    {
        "text": "Installation",
        "type": "ListItem"
    },
    {
        "text": "Developer Reference",
        "type": "ListItem"
    },
    {
        "text": "Documentation and tests in progress",
        "type": "ListItem"
    },
    {
        "text": "Quick search",
        "type": "Title"
    },
    {
        "text": "This Page",
        "type": "Title"
    },
    {
        "text": "Show Source",
        "type": "ListItem"
    },
    {
        "text": "music21.stream.core\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "the Stream Core Mixin handles the core attributes of streams that\nshould be thought of almost as private values and not used except\nby advanced programmers who need the highest speed in programming.",
        "type": "NarrativeText"
    },
    {
        "text": "Nothing here promises to be stable.  The music21 team can make\nany changes here for efficiency reasons while being considered\nbackwards compatible so long as the public methods that call these\nmethods remain stable.",
        "type": "NarrativeText"
    },
    {
        "text": "All functions here will eventually begin with .core.",
        "type": "NarrativeText"
    },
    {
        "text": "StreamCore\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.stream.core.",
        "type": "Title"
    },
    {
        "text": "StreamCore",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Core aspects of a Stream's behavior.  Any of these can change at any time.\nUsers are encouraged only to create stream.Stream objects.",
        "type": "ListItem"
    },
    {
        "text": "StreamCore bases",
        "type": "Title"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "StreamCore read-only properties",
        "type": "Title"
    },
    {
        "text": "StreamCore.",
        "type": "Title"
    },
    {
        "text": "spannerBundle",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A low-level object for Spanner management. This is a read-only property.",
        "type": "ListItem"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "StreamCore read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "StreamCore methods",
        "type": "Title"
    },
    {
        "text": "StreamCore.",
        "type": "Title"
    },
    {
        "text": "asTimespans",
        "type": "Title"
    },
    {
        "text": "flatten",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "classList",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Convert stream to a TimespanTree instance, a\nhighly optimized data structure for searching through elements and\noffsets.\n>>> score = tree.makeExampleScore()\n>>> scoreTree = score.asTimespans()\n>>> print(scoreTree)\n<TimespanTree {20} (0.0 to 8.0) <music21.stream.Score exampleScore>>\n    <ElementTimespan (0.0 to 0.0) <music21.clef.BassClef>>\n    <ElementTimespan (0.0 to 0.0) <music21.meter.TimeSignature 2/4>>\n    <ElementTimespan (0.0 to 0.0) <music21.instrument.Instrument 'PartA: : '>>\n    <ElementTimespan (0.0 to 0.0) <music21.clef.BassClef>>\n    <ElementTimespan (0.0 to 0.0) <music21.meter.TimeSignature 2/4>>\n    <ElementTimespan (0.0 to 0.0) <music21.instrument.Instrument 'PartB: : '>>\n    <PitchedTimespan (0.0 to 1.0) <music21.note.Note C>>\n    <PitchedTimespan (0.0 to 2.0) <music21.note.Note C#>>\n    <PitchedTimespan (1.0 to 2.0) <music21.note.Note D>>\n    <PitchedTimespan (2.0 to 3.0) <music21.note.Note E>>\n    <PitchedTimespan (2.0 to 4.0) <music21.note.Note G#>>\n    <PitchedTimespan (3.0 to 4.0) <music21.note.Note F>>\n    <PitchedTimespan (4.0 to 5.0) <music21.note.Note G>>\n    <PitchedTimespan (4.0 to 6.0) <music21.note.Note E#>>\n    <PitchedTimespan (5.0 to 6.0) <music21.note.Note A>>\n    <PitchedTimespan (6.0 to 7.0) <music21.note.Note B>>\n    <PitchedTimespan (6.0 to 8.0) <music21.note.Note D#>>\n    <PitchedTimespan (7.0 to 8.0) <music21.note.Note C>>\n    <ElementTimespan (8.0 to 8.0) <music21.bar.Barline type=final>>\n    <ElementTimespan (8.0 to 8.0) <music21.bar.Barline type=final>>",
        "type": "ListItem"
    },
    {
        "text": "StreamCore.",
        "type": "Title"
    },
    {
        "text": "asTree",
        "type": "Title"
    },
    {
        "text": "flatten",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "classList",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "useTimespans",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "groupOffsets",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns an elementTree of the score, using exact positioning.\nSee tree.fromStream.asTree() for more details.\n>>> score = tree.makeExampleScore()\n>>> scoreTree = score.asTree(flatten=True)\n>>> scoreTree\n<ElementTree {20} (0.0 <0.-25...> to 8.0) <music21.stream.Score exampleScore>>",
        "type": "ListItem"
    },
    {
        "text": "StreamCore.",
        "type": "Title"
    },
    {
        "text": "coreAppend",
        "type": "Title"
    },
    {
        "text": "element",
        "type": "Title"
    },
    {
        "text": "Music21Object",
        "type": "Title"
    },
    {
        "text": "setActiveSite",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u2192 None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "N.B. \u2014 a \u009ccore\u009d method, not to be used by general users.  Run .append() instead.\nLow level appending; like coreInsert does not error check,\ndetermine elements changed, or similar operations.\nWhen using this method, the caller is responsible for calling\nStream.coreElementsChanged after all operations are completed.",
        "type": "ListItem"
    },
    {
        "text": "StreamCore.",
        "type": "Title"
    },
    {
        "text": "coreCopyAsDerivation",
        "type": "Title"
    },
    {
        "text": "methodName",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "recurse",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "deep",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u2192 M21ObjType",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "This is a Core method that most users will not need to use.\nMake a copy of this stream with the proper derivation set.\n>>> s = stream.Stream()\n>>> n = note.Note()\n>>> s.append(n)\n>>> s2 = s.coreCopyAsDerivation('exampleCopy')\n>>> s2.derivation.method\n'exampleCopy'\n>>> s2.derivation.origin is s\nTrue\n>>> s2[0].derivation.method\n'exampleCopy'",
        "type": "ListItem"
    },
    {
        "text": "StreamCore.",
        "type": "Title"
    },
    {
        "text": "coreElementsChanged",
        "type": "NarrativeText"
    },
    {
        "text": "updateIsFlat",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "clearIsSorted",
        "type": "NarrativeText"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "memo",
        "type": "Title"
    },
    {
        "text": "list",
        "type": "Title"
    },
    {
        "text": "int",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "keepIndex",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "\u2192 None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "NB \u2014 a \u009ccore\u009d stream method that is not necessary for most users.\nThis method is called automatically any time the elements in the Stream are changed.\nHowever, it may be called manually in case sites or other advanced features of an\nelement have been modified.  It was previously a private method and for most users\nshould still be treated as such.\nThe various arguments permit optimizing the clearing of cached data in situations\nwhen completely dropping all cached data is excessive.\n>>> a = stream.Stream()\n>>> a.isFlat\nTrue\n\n\nHere we manipulate the private ._elements storage (which generally shouldn't\nbe done) using coreAppend and thus need to call .coreElementsChanged directly.\n>>> a.coreAppend(stream.Stream())\n>>> a.isFlat  # this is wrong.\nTrue\n\n\n>>> a.coreElementsChanged()\n>>> a.isFlat\nFalse",
        "type": "ListItem"
    },
    {
        "text": "StreamCore.",
        "type": "Title"
    },
    {
        "text": "coreGatherMissingSpanners",
        "type": "Title"
    },
    {
        "text": "recurse",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "requireAllPresent",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "insert",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "constrainingSpannerBundle",
        "type": "Title"
    },
    {
        "text": "SpannerBundle | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u2192 list[music21.spanner.Spanner] | None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "find all spanners that are referenced by elements in the\n(recursed if recurse=True) stream and either inserts them in the Stream\n(if insert is True) or returns them if insert is False.\nIf requireAllPresent is True (default) then only those spanners whose complete\nspanned elements are in the Stream are returned.\nBecause spanners are stored weakly in .sites this is only guaranteed to find\nthe spanners in cases where the spanner is in another stream that is still active.\nHere's a little helper function since we'll make the same Stream several times,\nwith two slurred notes, but without the slur itself.  Python's garbage collection\nwill get rid of the slur if we do not prevent it\n>>> preventGarbageCollection = []\n>>> def getStream():\n...    s = stream.Stream()\n...    n = note.Note('C')\n...    m = note.Note('D')\n...    sl = spanner.Slur(n, m)\n...    preventGarbageCollection.append(sl)\n...    s.append([n, m])\n...    return s\n\n\nOkay now we have a Stream with two slurred notes, but without the slur.\ncoreGatherMissingSpanners() will put it in at the beginning.\n>>> s = getStream()\n>>> s.show('text')\n{0.0} <music21.note.Note C>\n{1.0} <music21.note.Note D>\n>>> s.coreGatherMissingSpanners()\n>>> s.show('text')\n{0.0} <music21.note.Note C>\n{0.0} <music21.spanner.Slur <music21.note.Note C><music21.note.Note D>>\n{1.0} <music21.note.Note D>\n\n\nNow, the same Stream, but insert is False, so it will return a list of\nSpanners that should be inserted, rather than inserting them.\n>>> s = getStream()\n>>> spList = s.coreGatherMissingSpanners(insert=False)\n>>> spList\n[<music21.spanner.Slur <music21.note.Note C><music21.note.Note D>>]\n>>> s.show('text')\n{0.0} <music21.note.Note C>\n{1.0} <music21.note.Note D>\n\n\nNow we'll remove the second note so not all elements of the Slur\nare present. This, by default, will not insert the Slur:\n>>> s = getStream()\n>>> s.remove(s[-1])\n>>> s.show('text')\n{0.0} <music21.note.Note C>\n>>> s.coreGatherMissingSpanners()\n>>> s.show('text')\n{0.0} <music21.note.Note C>\n\n\nBut with requireAllPresent=False, the spanner appears!\n>>> s.coreGatherMissingSpanners(requireAllPresent=False)\n>>> s.show('text')\n{0.0} <music21.note.Note C>\n{0.0} <music21.spanner.Slur <music21.note.Note C><music21.note.Note D>>\n\n\nWith recurse=False, then spanners are not gathered inside the inner\nstream:\n>>> part = stream.Part()\n>>> s = getStream()\n>>> part.insert(0, s)\n>>> part.coreGatherMissingSpanners(recurse=False)\n>>> part.show('text')\n{0.0} <music21.stream.Stream 0x104935b00>\n    {0.0} <music21.note.Note C>\n    {1.0} <music21.note.Note D>\n\n\nBut the default acts with recursion:\n>>> part.coreGatherMissingSpanners()\n>>> part.show('text')\n{0.0} <music21.stream.Stream 0x104935b00>\n    {0.0} <music21.note.Note C>\n    {1.0} <music21.note.Note D>\n{0.0} <music21.spanner.Slur <music21.note.Note C><music21.note.Note D>>\n\n\nSpanners already in the stream are not put there again:\n>>> s = getStream()\n>>> sl = s.notes.first().getSpannerSites()[0]\n>>> sl\n<music21.spanner.Slur <music21.note.Note C><music21.note.Note D>>\n>>> s.insert(0, sl)\n>>> s.coreGatherMissingSpanners()\n>>> s.show('text')\n{0.0} <music21.note.Note C>\n{0.0} <music21.spanner.Slur <music21.note.Note C><music21.note.Note D>>\n{1.0} <music21.note.Note D>\n\n\nAlso does not happen with recursion.\n>>> part = stream.Part()\n>>> s = getStream()\n>>> sl = s.notes.first().getSpannerSites()[0]\n>>> s.insert(0, sl)\n>>> part.insert(0, s)\n>>> part.coreGatherMissingSpanners()\n>>> part.show('text')\n{0.0} <music21.stream.Stream 0x104935b00>\n    {0.0} <music21.note.Note C>\n    {0.0} <music21.spanner.Slur <music21.note.Note C><music21.note.Note D>>\n    {1.0} <music21.note.Note D>\n\n\nIf constrainingSpannerBundle is set then only spanners also present in\nthat spannerBundle are added.  This can be useful, for instance, in restoring\nspanners from an excerpt that might already have spanners removed.  In\nJacob Tyler Walls's brilliant phrasing, it prevents regrowing zombie spanners\nthat you thought you had killed.\nHere we will constrain only to spanners also present in another Stream:\n>>> s = getStream()\n>>> s2 = stream.Stream()\n>>> s.coreGatherMissingSpanners(constrainingSpannerBundle=s2.spannerBundle)\n>>> s.show('text')\n{0.0} <music21.note.Note C>\n{1.0} <music21.note.Note D>\n\n\nNow with the same constraint, but we will put the Slur into the other stream.\n>>> sl = s.notes.first().getSpannerSites()[0]\n>>> s2.insert(0, sl)\n>>> s.coreGatherMissingSpanners(constrainingSpannerBundle=s2.spannerBundle)\n>>> s.show('text')\n{0.0} <music21.note.Note C>\n{0.0} <music21.spanner.Slur <music21.note.Note C><music21.note.Note D>>\n{1.0} <music21.note.Note D>",
        "type": "ListItem"
    },
    {
        "text": "StreamCore.",
        "type": "Title"
    },
    {
        "text": "coreGetElementByMemoryLocation",
        "type": "Title"
    },
    {
        "text": "objId",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "NB \u2014 a \u009ccore\u009d stream method that is not necessary for most users.\nLow-level tool to get an element based only on the object id.\nThis is not the same as getElementById, which refers to the id\nattribute which may be manually set and not unique.\nHowever, some implementations of python will reuse object locations, sometimes\nquickly, so don't keep these around.\nUsed by spanner and variant.\n>>> s = stream.Stream()\n>>> n1 = note.Note('g')\n>>> n2 = note.Note('g#')\n>>> s.append(n1)\n>>> s.coreGetElementByMemoryLocation(id(n1)) is n1\nTrue\n>>> s.coreGetElementByMemoryLocation(id(n2)) is None\nTrue\n>>> b = bar.Barline()\n>>> s.storeAtEnd(b)\n>>> s.coreGetElementByMemoryLocation(id(b)) is b\nTrue",
        "type": "ListItem"
    },
    {
        "text": "StreamCore.",
        "type": "Title"
    },
    {
        "text": "coreGuardBeforeAddElement",
        "type": "Title"
    },
    {
        "text": "element",
        "type": "Title"
    },
    {
        "text": "checkRedundancy",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Before adding an element, this method performs\nimportant checks on that element.\nUsed by:\n\n\ninsert()\nappend()\nstoreAtEnd()\nStream.__init__()\n\n\nReturns None or raises a StreamException\n>>> s = stream.Stream()\n>>> s.coreGuardBeforeAddElement(s)\nTraceback (most recent call last):\nmusic21.exceptions21.StreamException: this Stream cannot be contained within itself\n\n\n>>> s.append(s.iter())\nTraceback (most recent call last):\nmusic21.exceptions21.StreamException: cannot insert StreamIterator into a Stream\nIterate over it instead (User's Guide chs. 6 and 26)\n\n\n>>> s.insert(4, 3.14159)\nTraceback (most recent call last):\nmusic21.exceptions21.StreamException: The object you tried to add to\nthe Stream, 3.14159, is not a Music21Object.  Use an ElementWrapper\nobject if this is what you intend.",
        "type": "ListItem"
    },
    {
        "text": "StreamCore.",
        "type": "Title"
    },
    {
        "text": "coreHasElementByMemoryLocation",
        "type": "Title"
    },
    {
        "text": "objId",
        "type": "Title"
    },
    {
        "text": "int",
        "type": "Title"
    },
    {
        "text": "\u2192 bool",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "NB \u2014 a \u009ccore\u009d stream method that is not necessary for most users. use hasElement(obj)\nReturn True if an element object id, provided as an argument, is contained in this Stream.\n>>> s = stream.Stream()\n>>> n1 = note.Note('g')\n>>> n2 = note.Note('g#')\n>>> s.append(n1)\n>>> s.coreHasElementByMemoryLocation(id(n1))\nTrue\n>>> s.coreHasElementByMemoryLocation(id(n2))\nFalse",
        "type": "ListItem"
    },
    {
        "text": "StreamCore.",
        "type": "Title"
    },
    {
        "text": "coreInsert",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "float | Fraction",
        "type": "Title"
    },
    {
        "text": "element",
        "type": "Title"
    },
    {
        "text": "Music21Object",
        "type": "Title"
    },
    {
        "text": "ignoreSort",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "setActiveSite",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u2192 bool",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "N.B. \u2014 a \u009ccore\u009d method, not to be used by general users.  Run .insert() instead.\nA faster way of inserting elements that performs no checks,\njust insertion.\nOnly be used in contexts that we know we have a proper, single Music21Object.\nBest for usage when taking objects in a known Stream and creating a new Stream\nWhen using this method, the caller is responsible for calling Stream.coreElementsChanged\nafter all operations are completed.\nDo not mix coreInsert with coreAppend operations.\nReturns boolean if the Stream (assuming it was sorted before) is still guaranteed\nto be sorted.  (False doesn't mean that it's not sorted, just that we can't guarantee it.)\nIf you don't care and plan to sort the stream later, then use ignoreSort=True.",
        "type": "ListItem"
    },
    {
        "text": "StreamCore.",
        "type": "Title"
    },
    {
        "text": "coreSelfActiveSite",
        "type": "Title"
    },
    {
        "text": "el",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Set the activeSite of el to be self.\nOverride for SpannerStorage, VariantStorage, which should never\nbecome the activeSite",
        "type": "ListItem"
    },
    {
        "text": "StreamCore.",
        "type": "Title"
    },
    {
        "text": "coreSetElementOffset",
        "type": "Title"
    },
    {
        "text": "element",
        "type": "Title"
    },
    {
        "text": "Music21Object",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "int",
        "type": "Title"
    },
    {
        "text": "float",
        "type": "Title"
    },
    {
        "text": "Fraction",
        "type": "Title"
    },
    {
        "text": "OffsetSpecial",
        "type": "Title"
    },
    {
        "text": "addElement",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "setActiveSite",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u2192 None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Sets the Offset for an element, very quickly.\nCaller is responsible for calling coreElementsChanged()\nafterward.\n>>> s = stream.Stream()\n>>> s.id = 'Stream1'\n>>> n = note.Note('B-4')\n>>> s.insert(10, n)\n>>> n.offset\n10.0\n>>> s.coreSetElementOffset(n, 20.0)\n>>> n.offset\n20.0\n>>> n.getOffsetBySite(s)\n20.0",
        "type": "ListItem"
    },
    {
        "text": "StreamCore.",
        "type": "Title"
    },
    {
        "text": "coreStoreAtEnd",
        "type": "Title"
    },
    {
        "text": "element",
        "type": "Title"
    },
    {
        "text": "setActiveSite",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "NB \u2014 this is a \u009ccore\u009d method.  General users should use .storeAtEnd() instead.\nCore method for adding end elements.\nTo be called by other methods.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "StreamCore instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.stream.core",
        "type": "ListItem"
    },
    {
        "text": "\u00a9 Copyright 2006-2023 Michael Scott Asato Cuthbert.\n      Last updated on Jun 12, 2023.",
        "type": "NarrativeText"
    }
]