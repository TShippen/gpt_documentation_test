[
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.text",
        "type": "ListItem"
    },
    {
        "text": "Previous topic",
        "type": "Title"
    },
    {
        "text": "music21.braille.segment",
        "type": "Title"
    },
    {
        "text": "Next topic",
        "type": "Title"
    },
    {
        "text": "music21.braille.translate",
        "type": "Title"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "music21.braille.text\nBrailleKeyboard\nBrailleKeyboard\nBrailleKeyboard.addNoteGroupings()\nBrailleKeyboard.makeNewLines()\n\n\n\n\nBrailleText\nBrailleText\nBrailleText.showHand\nBrailleText.addHeading()\nBrailleText.addInaccord()\nBrailleText.addLongExpression()\nBrailleText.addMeasureNumber()\nBrailleText.addSignatures()\nBrailleText.addToNewLine()\nBrailleText.appendOrInsertCurrent()\nBrailleText.makeNewLine()\nBrailleText.optionalAddKeyboardSymbolsAndDots()\nBrailleText.recenterHeadings()\n\n\n\n\nBrailleTextLine\nBrailleTextLine\nBrailleTextLine.append()\nBrailleTextLine.canAppend()\nBrailleTextLine.canInsert()\nBrailleTextLine.insert()\nBrailleTextLine.lastHyphenToSpace()",
        "type": "ListItem"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "About music21",
        "type": "ListItem"
    },
    {
        "text": "User's Guide",
        "type": "ListItem"
    },
    {
        "text": "Module Reference",
        "type": "ListItem"
    },
    {
        "text": "Installation",
        "type": "ListItem"
    },
    {
        "text": "Developer Reference",
        "type": "ListItem"
    },
    {
        "text": "Documentation and tests in progress",
        "type": "ListItem"
    },
    {
        "text": "Quick search",
        "type": "Title"
    },
    {
        "text": "This Page",
        "type": "Title"
    },
    {
        "text": "Show Source",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.text\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "BrailleKeyboard\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.braille.text.",
        "type": "Title"
    },
    {
        "text": "BrailleKeyboard",
        "type": "Title"
    },
    {
        "text": "lineLength",
        "type": "Title"
    },
    {
        "text": "40",
        "type": "UncategorizedText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A subclass of BrailleText that handles both hands at once.",
        "type": "ListItem"
    },
    {
        "text": "BrailleKeyboard bases",
        "type": "Title"
    },
    {
        "text": "BrailleText",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "BrailleKeyboard read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "BrailleKeyboard read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from BrailleText:",
        "type": "NarrativeText"
    },
    {
        "text": "showHand",
        "type": "Table"
    },
    {
        "text": "BrailleKeyboard methods",
        "type": "Title"
    },
    {
        "text": "BrailleKeyboard.",
        "type": "Title"
    },
    {
        "text": "addNoteGroupings",
        "type": "Title"
    },
    {
        "text": "measureNumber",
        "type": "Title"
    },
    {
        "text": "noteGroupingR",
        "type": "Title"
    },
    {
        "text": "noteGroupingL",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "BrailleKeyboard.",
        "type": "Title"
    },
    {
        "text": "makeNewLines",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from BrailleText:",
        "type": "NarrativeText"
    },
    {
        "text": "addHeading() addInaccord() addLongExpression() addMeasureNumber() addSignatures() addToNewLine() appendOrInsertCurrent() makeNewLine() optionalAddKeyboardSymbolsAndDots() recenterHeadings()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "BrailleText\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.braille.text.",
        "type": "Title"
    },
    {
        "text": "BrailleText",
        "type": "Title"
    },
    {
        "text": "lineLength",
        "type": "Title"
    },
    {
        "text": "40",
        "type": "UncategorizedText"
    },
    {
        "text": "showHand",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Object that handles all the formatting associated with braille music notation on multiple lines.\n>>> bt = braille.text.BrailleText(lineLength=10, showHand='right')\n>>> bt\n<music21.braille.text.BrailleText 1 line, 0 headings, 10 cols>\n>>> bt.lineLength\n10\n>>> bt.allLines\n[<music21.braille.text.BrailleTextLine '\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080'>]\n>>> bt.rightHandSymbol\nTrue\n>>> bt.leftHandSymbol\nFalse\n>>> bt.allHeadings\n[]",
        "type": "ListItem"
    },
    {
        "text": "BrailleText bases",
        "type": "Title"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "BrailleText read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "BrailleText read/write properties",
        "type": "Title"
    },
    {
        "text": "BrailleText.",
        "type": "Title"
    },
    {
        "text": "showHand",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "BrailleText methods",
        "type": "Title"
    },
    {
        "text": "BrailleText.",
        "type": "Title"
    },
    {
        "text": "addHeading",
        "type": "NarrativeText"
    },
    {
        "text": "heading",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "adds a heading to the BrailleText.  Heading can be a single or multiple line\nUnicode string representing a heading.\nThese headings are not stored in allHeadings, but instead in .allLines,\nwhat .allHeadings stores is the index of the start of a heading section\nand the index of the end of a heading section.\n(since each BrailleTextLine knows whether it is a heading or not, storing\nthe index of headings might be overkill)\n>>> bt = braille.text.BrailleText(lineLength=10)\n>>> headingText = braille.basic.timeSigToBraille(meter.TimeSignature('4/8'))\n>>> bt.addHeading(headingText)\n>>> len(bt.allLines)\n2\n>>> bt.allLines[0].isHeading\nTrue\n>>> print(str(bt.allLines[0]))\n\u00e2\u00a0\u00bc\u00e2\u00a0\u0099\u00e2\u00a0\u00a6\n>>> bt.allHeadings\n[(0, 1)]\n>>> bt.addMeasureNumber(7)\n>>> headingText = braille.basic.timeSigToBraille(meter.TimeSignature('3/4'))\n>>> bt.addHeading(headingText)\n>>> len(bt.allLines)\n4\n>>> bt.allHeadings\n[(0, 1), (2, 3)]",
        "type": "ListItem"
    },
    {
        "text": "BrailleText.",
        "type": "Title"
    },
    {
        "text": "addInaccord",
        "type": "Title"
    },
    {
        "text": "inaccord",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "BrailleText.",
        "type": "Title"
    },
    {
        "text": "addLongExpression",
        "type": "Title"
    },
    {
        "text": "longExpr",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Adds an expression long enough that it is split at\neach space symbol such that line wrapping could occur.",
        "type": "ListItem"
    },
    {
        "text": "BrailleText.",
        "type": "Title"
    },
    {
        "text": "addMeasureNumber",
        "type": "Title"
    },
    {
        "text": "measureNumber",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Add a measure number (either a braille number or an int).\n>>> bt = braille.text.BrailleText(lineLength=10)\n>>> bt\n<music21.braille.text.BrailleText 1 line, 0 headings, 10 cols>\n>>> bt.allLines\n[<music21.braille.text.BrailleTextLine '\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080'>]\n>>> bt.addMeasureNumber(4)\n>>> print(str(bt.allLines[0]))\n\u00e2\u00a0\u00bc\u00e2\u00a0\u0099\n>>> bt.currentLine.textLocation\n2\n\n\nIf there are already lines, then add a new one:\n>>> bt.addMeasureNumber(5)\n>>> bt.allLines\n[<music21.braille.text.BrailleTextLine '\u00e2\u00a0\u00bc\u00e2\u00a0\u0099\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080'>,\n <music21.braille.text.BrailleTextLine '\u00e2\u00a0\u00bc\u00e2\u00a0\u2018\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080'>]\n>>> print(str(bt.allLines[-1]))\n\u00e2\u00a0\u00bc\u00e2\u00a0\u2018",
        "type": "ListItem"
    },
    {
        "text": "BrailleText.",
        "type": "Title"
    },
    {
        "text": "addSignatures",
        "type": "Title"
    },
    {
        "text": "signatures",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Appends signatures to the current location if there is space, otherwise appends to\na new line:\n>>> bt = braille.text.BrailleText(lineLength=5)\n>>> bt.addSignatures(braille.basic.timeSigToBraille(meter.TimeSignature('4/8')))\n>>> print(str(bt.currentLine))\n\u00e2\u00a0\u00bc\u00e2\u00a0\u0099\u00e2\u00a0\u00a6\n>>> bt.addSignatures(braille.basic.timeSigToBraille(meter.TimeSignature('3/4')))\n>>> print(str(bt.currentLine))\n\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u00bc\u00e2\u00a0\u0089\u00e2\u00a0\u00b2\n>>> len(bt.allLines)\n2",
        "type": "ListItem"
    },
    {
        "text": "BrailleText.",
        "type": "Title"
    },
    {
        "text": "addToNewLine",
        "type": "Title"
    },
    {
        "text": "brailleNoteGrouping",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Adds a NoteGrouping to a new line, prefacing that new line\nwith the appropriate spaces or keyboard symbols and dots.\n>>> bt = braille.text.BrailleText(10)\n>>> bt.currentLine.append('hi', addSpace=False)\n>>> print(str(bt))\nhi\n>>> c = braille.lookup.pitchNameToNotes['C']['quarter']  # dots 1456\n>>> bt.addToNewLine(c + c + c)\n>>> print(str(bt))\nhi\n\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u00b9\u00e2\u00a0\u00b9\u00e2\u00a0\u00b9\n\n\nIt is done differently if there are hand symbols involved:\n>>> bt = braille.text.BrailleText(10)\n>>> bt.showHand = 'right'\n>>> bt.currentLine.append('hi', addSpace=False)\n>>> bt.addToNewLine(c + c + c)\n>>> print(str(bt))\nhi\n\u00e2\u00a0\u00a8\u00e2\u00a0\u009c\u00e2\u00a0\u0084\u00e2\u00a0\u00b9\u00e2\u00a0\u00b9\u00e2\u00a0\u00b9",
        "type": "ListItem"
    },
    {
        "text": "BrailleText.",
        "type": "Title"
    },
    {
        "text": "appendOrInsertCurrent",
        "type": "Title"
    },
    {
        "text": "brailleExpr",
        "type": "Title"
    },
    {
        "text": "addSpace",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "append expression to the current line if it is possible,\nor make a new line and insert it there:\n>>> bt = braille.text.BrailleText(lineLength=10)\n>>> bt.appendOrInsertCurrent('hello', addSpace=False)\n>>> print(str(bt))\nhello\n>>> bt.appendOrInsertCurrent(braille.lookup.symbols['space'] + 'hi')\n>>> print(str(bt))\nhello\u00e2\u00a0\u0080\u00e2\u00a0\u0080hi\n>>> bt.appendOrInsertCurrent(braille.lookup.symbols['space'] + 'there')\n>>> print(str(bt))\nhello\u00e2\u00a0\u0080\u00e2\u00a0\u0080hi\n\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080there",
        "type": "ListItem"
    },
    {
        "text": "BrailleText.",
        "type": "Title"
    },
    {
        "text": "makeNewLine",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Add a newline to the BrailleText\n>>> bt = braille.text.BrailleText(lineLength=10)\n>>> len(bt.allLines)\n1\n>>> bt.makeNewLine()\n>>> len(bt.allLines)\n2\n>>> bt.makeNewLine()\n>>> len(bt.allLines)\n3",
        "type": "ListItem"
    },
    {
        "text": "BrailleText.",
        "type": "Title"
    },
    {
        "text": "optionalAddKeyboardSymbolsAndDots",
        "type": "Title"
    },
    {
        "text": "noteGrouping",
        "type": "NarrativeText"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Adds symbols for rh_keyboard or lh_keyboard depending on what\nis appropriate\nreturns a boolean indicating whether a space needs to be added\nbefore the next symbol is needed.",
        "type": "ListItem"
    },
    {
        "text": "BrailleText.",
        "type": "Title"
    },
    {
        "text": "recenterHeadings",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Recenter each of the headings so that they exactly align\nwith the text beneath them.\nDemonstration with non braille text\u2026\n>>> heading1 = 'hello'\n>>> body1 = 'anyoneHome?' + braille.lookup.symbols['space'] + 'yup!'\n>>> bt = braille.text.BrailleText(lineLength=12)\n>>> bt.addHeading(heading1)\n>>> bt.addLongExpression(body1)\n>>> bt.allHeadings\n[(0, 1)]\n>>> bt.recenterHeadings()\n>>> print(str(bt))\n\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080hello\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\n\u00e2\u00a0\u0080anyoneHome?\n\u00e2\u00a0\u0080\u00e2\u00a0\u0080yup!\n\n\nEach heading is aligned with its own text\n>>> heading2 = 'buh'\n>>> body2 = 'short' + braille.lookup.symbols['space'] + 'court'\n>>> bt.addHeading(heading2)\n>>> bt.addLongExpression(body2)\n>>> bt.allHeadings\n[(0, 1), (3, 4)]\n>>> bt.recenterHeadings()\n>>> print(str(bt))\n\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080hello\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\n\u00e2\u00a0\u0080anyoneHome?\n\u00e2\u00a0\u0080\u00e2\u00a0\u0080yup!\n\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080buh\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\n\u00e2\u00a0\u0080short\u00e2\u00a0\u0080court",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "BrailleTextLine\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.braille.text.",
        "type": "Title"
    },
    {
        "text": "BrailleTextLine",
        "type": "Title"
    },
    {
        "text": "lineLength",
        "type": "Title"
    },
    {
        "text": "int",
        "type": "Title"
    },
    {
        "text": "40",
        "type": "UncategorizedText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An object representing a single line of braille text:\nThe initial value is the length of the line:\n>>> btl = braille.text.BrailleTextLine(40)\n>>> btl\n<music21.braille.text.BrailleTextLine '\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080'>\n>>> btl.isHeading\nFalse\n>>> btl.containsNoteGrouping\nFalse\n>>> btl.lineLength\n40\n>>> btl.textLocation\n0\n>>> btl.highestUsedLocation\n0\n>>> btl.allChars == 40 * [braille.lookup.symbols['space']]\nTrue\n\n\n>>> btl.append(braille.lookup.symbols['tie'])\n>>> btl\n<music21.braille.text.BrailleTextLine '\u00e2\u00a0\u0080\u00e2\u00a0\u0088\u00e2\u00a0\u0089\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0080'>\n>>> print(str(btl))\n\u00e2\u00a0\u0080\u00e2\u00a0\u0088\u00e2\u00a0\u0089",
        "type": "ListItem"
    },
    {
        "text": "BrailleTextLine bases",
        "type": "Title"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "BrailleTextLine read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "BrailleTextLine methods",
        "type": "Title"
    },
    {
        "text": "BrailleTextLine.",
        "type": "Title"
    },
    {
        "text": "append",
        "type": "Title"
    },
    {
        "text": "text",
        "type": "Title"
    },
    {
        "text": "addSpace",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Appends text (with optional space at the beginning) or raises an\nexception if it cannot be appended.\n>>> btl = braille.text.BrailleTextLine(6)\n>>> btl.append(braille.lookup.symbols['tie'], addSpace=False)\n>>> print(str(btl))\n\u00e2\u00a0\u0088\u00e2\u00a0\u0089\n>>> btl.textLocation\n2\n>>> btl.highestUsedLocation\n2\n\n\nDefault is to add a space:\n>>> btl.append(braille.lookup.symbols['tie'])\n>>> print(str(btl))\n\u00e2\u00a0\u0088\u00e2\u00a0\u0089\u00e2\u00a0\u0080\u00e2\u00a0\u0088\u00e2\u00a0\u0089\n\n\nOut of room:\n>>> btl.append(braille.lookup.symbols['tie'])\nTraceback (most recent call last):\nmusic21.braille.text.BrailleTextException: Text does not fit at end of braille text line.\n\n\nText is appended at textLocation, overwriting other text that might be there.\n>>> btl.textLocation = btl.highestUsedLocation = 0\n>>> btl.append('hi', addSpace=False)\n>>> btl.textLocation = btl.highestUsedLocation = 5\n>>> print(str(btl))\nhi\u00e2\u00a0\u0080\u00e2\u00a0\u0088\u00e2\u00a0\u0089",
        "type": "ListItem"
    },
    {
        "text": "BrailleTextLine.",
        "type": "Title"
    },
    {
        "text": "canAppend",
        "type": "Title"
    },
    {
        "text": "text",
        "type": "Title"
    },
    {
        "text": "addSpace",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns True if there is enough space in this line to append the text, or False\nif not:\n>>> btl = braille.text.BrailleTextLine(10)\n>>> btl.canAppend('1234567890', addSpace=False)\nTrue\n>>> btl.canAppend('12345678901', addSpace=False)\nFalse\n>>> btl.canAppend('1234567890', addSpace=True)\nFalse\n>>> btl.textLocation\n0\n>>> btl.textLocation = 5\n>>> btl.canAppend('12345', addSpace=False)\nTrue\n>>> btl.canAppend('123456', addSpace=False)\nFalse\n\n\nIf highestUsedLocation > textLocation, highestUsedLocation is used instead:\n>>> btl.highestUsedLocation = 7\n>>> btl.canAppend('123', addSpace=False)\nTrue\n>>> btl.canAppend('1234', addSpace=False)\nFalse",
        "type": "ListItem"
    },
    {
        "text": "BrailleTextLine.",
        "type": "Title"
    },
    {
        "text": "canInsert",
        "type": "Title"
    },
    {
        "text": "textLocation",
        "type": "Title"
    },
    {
        "text": "text",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns True if there is enough space starting at textLocation to append\nthe text. False otherwise:\n>>> btl = braille.text.BrailleTextLine(10)\n>>> btl.canInsert(4, '123456')\nTrue\n>>> btl.canInsert(5, '123456')\nFalse",
        "type": "ListItem"
    },
    {
        "text": "BrailleTextLine.",
        "type": "Title"
    },
    {
        "text": "insert",
        "type": "Title"
    },
    {
        "text": "textLocation",
        "type": "Title"
    },
    {
        "text": "text",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Inserts text at a certain location, updating textLocation and possibly\nhighestUsedLocation:\n>>> btl = braille.text.BrailleTextLine(6)\n>>> btl.insert(2, braille.lookup.symbols['tie'])\n>>> print(str(btl))\n\u00e2\u00a0\u0080\u00e2\u00a0\u0080\u00e2\u00a0\u0088\u00e2\u00a0\u0089\n>>> btl.textLocation\n4\n>>> btl.highestUsedLocation\n4\n\n\n>>> btl.insert(0, braille.lookup.symbols['tie'])\n\n\nIt looks like we have deleted the previous tie:\n>>> print(str(btl))\n\u00e2\u00a0\u0088\u00e2\u00a0\u0089\n\n\nBut that's because only characters up to .textLocation are printed\n(this may change later)\n>>> btl.textLocation\n2\n>>> btl.highestUsedLocation\n4\n\n\nLet's change textLocation and now see:\n>>> btl.textLocation = btl.highestUsedLocation\n>>> print(str(btl))\n\u00e2\u00a0\u0088\u00e2\u00a0\u0089\u00e2\u00a0\u0088\u00e2\u00a0\u0089\n\n\nInserting beyond the end creates an error:\n>>> btl.insert(5, braille.lookup.symbols['tie'])\nTraceback (most recent call last):\nmusic21.braille.text.BrailleTextException: Text cannot be inserted at specified location.\n\n\nUnlike list inserts, this insert overwrites the previous text:\n>>> btl.insert(0, 'hi')\n>>> btl.textLocation = btl.highestUsedLocation\n>>> print(str(btl))\nhi\u00e2\u00a0\u0088\u00e2\u00a0\u0089",
        "type": "ListItem"
    },
    {
        "text": "BrailleTextLine.",
        "type": "Title"
    },
    {
        "text": "lastHyphenToSpace",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Occasionally a line ends with a hyphen because\nthe last appender thought it would be helpful, such as\nto put more characters into a line.  But in case it\nis not, then this method will change that last character\nto a space and set textLocation back one character,\nso it is not printed.\n>>> bt = braille.text.BrailleTextLine(10)\n>>> bt.append('hi', addSpace=False)\n>>> bt.append(braille.lookup.symbols['music_hyphen'], addSpace=False)\n>>> print(str(bt))\nhi\u00e2\u00a0\u0090\n>>> bt.textLocation\n3\n>>> print(bt.allChars[2])\n\u00e2\u00a0\u0090\n>>> bt.lastHyphenToSpace()\n>>> print(str(bt))\nhi\n>>> bt.allChars[2] == braille.lookup.symbols['space']\nTrue\n>>> bt.textLocation\n2",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.braille.text",
        "type": "ListItem"
    },
    {
        "text": "\u00a9 Copyright 2006-2023 Michael Scott Asato Cuthbert.\n      Last updated on Jun 12, 2023.",
        "type": "NarrativeText"
    }
]