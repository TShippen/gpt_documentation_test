[
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.omr.correctors",
        "type": "ListItem"
    },
    {
        "text": "Previous topic",
        "type": "Title"
    },
    {
        "text": "music21.noteworthy.translate",
        "type": "Title"
    },
    {
        "text": "Next topic",
        "type": "Title"
    },
    {
        "text": "music21.omr.evaluators",
        "type": "Title"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "music21.omr.correctors\nMeasureHash\nMeasureHash\nMeasureHash.differenceProbabilityForOneOpCode()\nMeasureHash.getHashString()\nMeasureHash.getMeasureDifference()\nMeasureHash.getOpCodes()\nMeasureHash.getProbabilityBasedOnChanges()\nMeasureHash.getProbabilityFromOneCharSub()\nMeasureHash.getProbabilityOnAddition()\nMeasureHash.getProbabilityOnEquality()\nMeasureHash.getProbabilityOnOmission()\nMeasureHash.getProbabilityOnSubstitute()\nMeasureHash.hashGrace()\nMeasureHash.hashNote()\nMeasureHash.hashQuarterLength()\nMeasureHash.hashRest()\nMeasureHash.setSequenceMatcher()\n\n\n\n\nMeasureRelationship\nMeasureRelationship\n\n\nMeasureSlice\nMeasureSlice\nMeasureSlice.getSliceHashes()\nMeasureSlice.runSliceSearch()\n\n\n\n\nPriorsIntegrationScore\nPriorsIntegrationScore\n\n\nScoreCorrector\nScoreCorrector\nScoreCorrector.generateCorrectedScore()\nScoreCorrector.getAllHashes()\nScoreCorrector.getAllIncorrectMeasures()\nScoreCorrector.getMeasureSlice()\nScoreCorrector.getSinglePart()\nScoreCorrector.getVerticalProbabilityDistributionSinglePart()\nScoreCorrector.getVerticalProbabilityDistributionSinglePartSingleMeasure()\nScoreCorrector.run()\nScoreCorrector.runHorizontalCorrectionModel()\nScoreCorrector.runPriorModel()\nScoreCorrector.runVerticalCorrectionModel()\nScoreCorrector.runVerticalSearch()\nScoreCorrector.substituteOneMeasureContentsForAnother()\nScoreCorrector.verticalProbabilityDist()\n\n\n\n\nSinglePart\nSinglePart\nSinglePart.getIncorrectMeasureIndices()\nSinglePart.getMeasures()\nSinglePart.getProbabilityDistribution()\nSinglePart.getSequenceHashesFromMeasureStream()\nSinglePart.horizontalProbabilityDist()\nSinglePart.runHorizontalCorrectionModel()\nSinglePart.runHorizontalSearch()",
        "type": "ListItem"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "About music21",
        "type": "ListItem"
    },
    {
        "text": "User's Guide",
        "type": "ListItem"
    },
    {
        "text": "Module Reference",
        "type": "ListItem"
    },
    {
        "text": "Installation",
        "type": "ListItem"
    },
    {
        "text": "Developer Reference",
        "type": "ListItem"
    },
    {
        "text": "Documentation and tests in progress",
        "type": "ListItem"
    },
    {
        "text": "Quick search",
        "type": "Title"
    },
    {
        "text": "This Page",
        "type": "Title"
    },
    {
        "text": "Show Source",
        "type": "ListItem"
    },
    {
        "text": "music21.omr.correctors\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "MeasureHash\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.omr.correctors.",
        "type": "Title"
    },
    {
        "text": "MeasureHash",
        "type": "Title"
    },
    {
        "text": "measureObject",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Able to do a number of matching, substitution and hashing operations on\na given measure object",
        "type": "ListItem"
    },
    {
        "text": "MeasureHash methods",
        "type": "Title"
    },
    {
        "text": "MeasureHash.",
        "type": "Title"
    },
    {
        "text": "differenceProbabilityForOneOpCode",
        "type": "Title"
    },
    {
        "text": "opCodeTuple",
        "type": "Title"
    },
    {
        "text": "source",
        "type": "Title"
    },
    {
        "text": "destination",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given an opCodeTuple and a source, differenceProbabilityForOneOpCode\nreturns the difference probability for one type of op-code\n(replace, insert, delete, or equal).\nHere, the destination is in the set F of flagged measures and the\nsource is in the set C of correcting measures.\nSource and destination are both hashStrings\n>>> source = 'PFPFFF'\n>>> destination = 'PFPFGF'\n>>> ops = ('equal', 0, 4, 0, 4)\n>>> mh = omr.correctors.MeasureHash()\n>>> mh.differenceProbabilityForOneOpCode(ops, source, destination)\n0.8762013031640626\n\n\nOmission\n>>> ops2 = ('insert', 4, 4, 4, 5)\n>>> mh2 = omr.correctors.MeasureHash()\n>>> mh2.differenceProbabilityForOneOpCode(ops2, source, destination)\n0.009\n\n\n>>> ops3 = ('replace', 2, 4, 2, 4)\n>>> mh3 = omr.correctors.MeasureHash()\n>>> mh3.differenceProbabilityForOneOpCode(ops3, 'PPPPP', 'PPVZP')\n0.0001485\n\n\nFive deletes in a row:\n>>> ops4 = ('delete', 0, 5, 0, 0)\n>>> mh3 = omr.correctors.MeasureHash()\n>>> mh3.differenceProbabilityForOneOpCode(ops4, 'e', 'GFPGF')\n1.024e-12\n\n\nExample of Violin II vs. Viola in K525 I, m. 17\n>>> vlnII = converter.parse('tinynotation: 4/4 e4 e8. e8 c4 c8 c8').flatten().notes.stream()\n>>> viola = converter.parse('tinynotation: 4/4 c4 c8  c8 A4 A8 A8').flatten().notes.stream()\n>>> vlnIIMH = omr.correctors.MeasureHash(vlnII)\n>>> violaMH = omr.correctors.MeasureHash(viola)\n>>> vlnIIMH.hashString\n'PLFPFF'\n>>> violaMH.hashString\n'PFFPFF'\n>>> opCodes = vlnIIMH.getOpCodes(violaMH.hashString)\n>>> for oc in opCodes:\n...    print('%30r : %.3f' %\n...           (oc, vlnIIMH.differenceProbabilityForOneOpCode(oc, violaMH.hashString)))\n         ('equal', 0, 1, 0, 1) : 0.968\n       ('replace', 1, 2, 1, 2) : 0.009\n         ('equal', 2, 6, 2, 6) : 0.876",
        "type": "ListItem"
    },
    {
        "text": "MeasureHash.",
        "type": "Title"
    },
    {
        "text": "getHashString",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "takes a stream and returns a hashed string for searching on\nand stores it in self.hashString\nIf a measure object has multiple voices, use the first  voice.\n>>> m = stream.Measure()\n>>> m.append(note.Note('C', quarterLength=1.5))\n>>> m.append(note.Note('C', quarterLength=0.5))\n>>> m.append(note.Rest(quarterLength=1.5))\n>>> m.append(note.Note('B', quarterLength=0.5))\n\n\n>>> hasher = omr.correctors.MeasureHash(m)\n>>> hasher.getHashString()\n'VFUF'\n>>> hasher.hashString == 'VFUF'\nTrue",
        "type": "ListItem"
    },
    {
        "text": "MeasureHash.",
        "type": "Title"
    },
    {
        "text": "getMeasureDifference",
        "type": "Title"
    },
    {
        "text": "hashString",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns the difference ratio between two measures\nb is the \u009ccorrect\u009d measure that we want to replace the flagged measure with\nTakes a hashString\n>>> m = stream.Measure()\n>>> m.append(note.Note('C', quarterLength=1.5))\n>>> m.append(note.Note('C', quarterLength=0.5))\n>>> m.append(note.Rest(quarterLength=1.5))\n>>> m.append(note.Note('B', quarterLength=0.5))\n\n\n>>> hasher = omr.correctors.MeasureHash(m)\n>>> hasher.setSequenceMatcher()\n>>> hasher.getMeasureDifference('VGUF')\n0.25\n\n\n>>> m = stream.Measure()\n>>> m.append(note.Note('C', quarterLength=1.5))\n>>> m.append(note.Note('C', quarterLength=0.5))\n>>> m.append(note.Rest(quarterLength=1.5))\n>>> m.append(note.Note('B', quarterLength=0.5))\n\n\n>>> hasher = omr.correctors.MeasureHash(m)\n>>> hasher.setSequenceMatcher()\n>>> hasher.getMeasureDifference('VFUF')\n1.0",
        "type": "ListItem"
    },
    {
        "text": "MeasureHash.",
        "type": "Title"
    },
    {
        "text": "getOpCodes",
        "type": "Title"
    },
    {
        "text": "otherHash",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Gets the opcodes from a simple sequenceMatcher for the current measureHash\nExample of Violin II vs. Viola and Cello in K525 I, m. 17\n>>> vlnII = converter.parse('tinynotation: 4/4 e4 e8. e8 c4 c8 c8').flatten().notes.stream()\n>>> viola = converter.parse('tinynotation: 4/4 c4 c8  c8 A4 A8 A8').flatten().notes.stream()\n>>> cello = converter.parse('tinynotation: 4/4 C4 C4     D4 D4   ').flatten().notes.stream()\n>>> vlnII_MH = omr.correctors.MeasureHash(vlnII)\n>>> viola_MH = omr.correctors.MeasureHash(viola)\n>>> cello_MH = omr.correctors.MeasureHash(cello)\n>>> vlnII_MH.getOpCodes(viola_MH.hashString)\n[('equal', 0, 1, 0, 1), ('replace', 1, 2, 1, 2), ('equal', 2, 6, 2, 6)]\n>>> vlnII_MH.getOpCodes(cello_MH.hashString)\n[('equal', 0, 1, 0, 1), ('delete', 1, 3, 1, 1),\n ('equal', 3, 4, 1, 2), ('replace', 4, 6, 2, 4)]",
        "type": "ListItem"
    },
    {
        "text": "MeasureHash.",
        "type": "Title"
    },
    {
        "text": "getProbabilityBasedOnChanges",
        "type": "Title"
    },
    {
        "text": "otherHash",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Takes a hash string and gets the probability based on changes.\n>>> otherHash = 'e'\n>>> hashString = 'GFPGF'\n>>> mh = omr.correctors.MeasureHash()\n>>> mh.hashString = hashString\n>>> mh.getProbabilityBasedOnChanges(otherHash)\n2.9472832125e-14\n\n\nExample of Violin II vs. Viola and Cello in K525 I, m. 17\n>>> vlnII = converter.parse('tinynotation: 4/4 e4 e8. e8 c4 c8 c8').flatten().notes.stream()\n>>> viola = converter.parse('tinynotation: 4/4 c4 c8  c8 A4 A8 A8').flatten().notes.stream()\n>>> cello = converter.parse('tinynotation: 4/4 C4 C4     D4 D4   ').flatten().notes.stream()\n>>> vlnII_MH = omr.correctors.MeasureHash(vlnII)\n>>> viola_MH = omr.correctors.MeasureHash(viola)\n>>> cello_MH = omr.correctors.MeasureHash(cello)\n>>> vlnII_MH.getProbabilityBasedOnChanges(viola_MH.hashString)\n0.0076295...\n>>> vlnII_MH.getProbabilityBasedOnChanges(cello_MH.hashString)\n4.077...e-09",
        "type": "ListItem"
    },
    {
        "text": "MeasureHash.",
        "type": "Title"
    },
    {
        "text": "getProbabilityFromOneCharSub",
        "type": "Title"
    },
    {
        "text": "source",
        "type": "Title"
    },
    {
        "text": "destination",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Source and destination are strings of one character\n>>> mh = omr.correctors.MeasureHash()\n\n\nEighth note to eighth rest:\n>>> mh.getProbabilityFromOneCharSub('F', 'G')\n0.003\n\n\nEighth note to quarter note:\n>>> mh.getProbabilityFromOneCharSub('F', 'P')\n0.0165\n\n\nEighth note to half note:\n>>> mh.getProbabilityFromOneCharSub('F', 'Z')\n0.0002722...\n\n\nQuarter note to dotted quarter note:\n>>> mh.getProbabilityFromOneCharSub('P', 'V')\n0.009\n\n\nDotted quarter note to quarter note:\n>>> mh.getProbabilityFromOneCharSub('V', 'P')\n0.004\n\n\n>>> mh.getProbabilityFromOneCharSub('A', 'Y')\n3.6e-05",
        "type": "ListItem"
    },
    {
        "text": "MeasureHash.",
        "type": "Title"
    },
    {
        "text": "getProbabilityOnAddition",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "In order for the source to be correct,\nthe destination added a symbol\nAssociated with type \u0098insert'\n>>> omr.correctors.MeasureHash().getProbabilityOnAddition()\n0.004",
        "type": "ListItem"
    },
    {
        "text": "MeasureHash.",
        "type": "Title"
    },
    {
        "text": "getProbabilityOnEquality",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Parts or the whole of a string were equal.\n>>> omr.correctors.MeasureHash().getProbabilityOnEquality()\n0.9675",
        "type": "ListItem"
    },
    {
        "text": "MeasureHash.",
        "type": "Title"
    },
    {
        "text": "getProbabilityOnOmission",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "In order for the source to be correct,\nthe destination omitted a symbol.\nAssociated with type \u0098delete' and in the case of replacement of\na dotted version of a note with an undotted version (or double dot with dotted, etc.)\n>>> omr.correctors.MeasureHash().getProbabilityOnOmission()\n0.009",
        "type": "ListItem"
    },
    {
        "text": "MeasureHash.",
        "type": "Title"
    },
    {
        "text": "getProbabilityOnSubstitute",
        "type": "Title"
    },
    {
        "text": "source",
        "type": "Title"
    },
    {
        "text": "destination",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Source and destination are measureHash strings\nSource is in set C of correcting measures.\nDestination is in set F of flagged measures.\n(Rossant & Bloch)\n\nvalue change: 50.77% of all errors (inverse: 0.0197)\n\nconfusions: 9.23% of all errors (inverse: 0.108)Note: these get the most probability, because they are the rarest\n\n\n\nomission: 27.69% of all errors (inverse: 0.0361)\naddition: 12.31% of all errors (inverse: 0.08125)\n\n>>> mh = omr.correctors.MeasureHash()\n\n\nReplacement of eighth note (F) for quarter note (P) = shift of one value:\n>>> mh.getProbabilityOnSubstitute('F', 'P')\n0.0165\n\n\nReplacement of eighth note (F) for eighth rest (G) = shift of one type:\n>>> mh.getProbabilityOnSubstitute('F', 'G')\n0.003\n\n\nOmission of any symbol, less common so costs more\nThe proposed correction assumes that the incorrect measure omitted a symbol\n>>> mh.getProbabilityOnSubstitute('', 'P')\n0.009\n\n\nAddition of any symbol, less common so costs more\nThe proposed correction assumes that the incorrect measure added a symbol\n>>> mh.getProbabilityOnSubstitute('P', '')\n0.004\n\n\nCombination of value shift and an addition:\n>>> mh.getProbabilityOnSubstitute('F', 'PP')\n0.0001485\n\n\nTake minimum length. Compare index to index. Any additional letters\nin the flagged measure get graded as additions. Any additional letters\nin the comparison measure get graded as omissions.",
        "type": "ListItem"
    },
    {
        "text": "MeasureHash.",
        "type": "Title"
    },
    {
        "text": "hashGrace",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Gives a Grace Note a duration of a 128th note",
        "type": "ListItem"
    },
    {
        "text": "MeasureHash.",
        "type": "Title"
    },
    {
        "text": "hashNote",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Encodes a note\n>>> hasher = omr.correctors.MeasureHash()\n\n\n>>> n = note.Note('C')\n>>> n.duration.type = 'quarter'\n>>> hasher.hashNote(n)\n'P'\n>>> n2 = note.Note('C')\n>>> n2.duration.type = 'half'\n>>> hasher.hashNote(n2)\n'Z'\n>>> n3 = note.Note('C', quarterLength=1.5)\n>>> hasher.hashNote(n3)\n'V'",
        "type": "ListItem"
    },
    {
        "text": "MeasureHash.",
        "type": "Title"
    },
    {
        "text": "hashQuarterLength",
        "type": "Title"
    },
    {
        "text": "ql",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Turns a QuarterLength duration into an integer from 1 to 127\n>>> hasher = omr.correctors.MeasureHash()\n>>> hasher.hashQuarterLength(1.0)\n80\n\n\n>>> hasher.hashQuarterLength(2.0)\n90",
        "type": "ListItem"
    },
    {
        "text": "MeasureHash.",
        "type": "Title"
    },
    {
        "text": "hashRest",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Encodes a rest\n>>> r = note.Rest(1.0)\n>>> hasher = omr.correctors.MeasureHash()\n>>> hasher.hashRest(r)\n'Q'",
        "type": "ListItem"
    },
    {
        "text": "MeasureHash.",
        "type": "Title"
    },
    {
        "text": "setSequenceMatcher",
        "type": "Title"
    },
    {
        "text": "hashes",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "MeasureRelationship\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.omr.correctors.",
        "type": "Title"
    },
    {
        "text": "MeasureRelationship",
        "type": "Title"
    },
    {
        "text": "flaggedMeasurePart",
        "type": "Title"
    },
    {
        "text": "flaggedMeasureIndex",
        "type": "Title"
    },
    {
        "text": "correctMeasurePart",
        "type": "Title"
    },
    {
        "text": "correctMeasureIndex",
        "type": "Title"
    },
    {
        "text": "correctionProbability",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "MeasureSlice\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.omr.correctors.",
        "type": "Title"
    },
    {
        "text": "MeasureSlice",
        "type": "Title"
    },
    {
        "text": "score",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "represents a single measure from all parts",
        "type": "ListItem"
    },
    {
        "text": "MeasureSlice methods",
        "type": "Title"
    },
    {
        "text": "MeasureSlice.",
        "type": "Title"
    },
    {
        "text": "getSliceHashes",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": ">>> omrPath = omr.correctors.K525omrShortPath\n>>> omrScore = converter.parse(omrPath)\n>>> ssOMR = omr.correctors.ScoreCorrector(omrScore)\n>>> ssOMR\n<music21.omr.correctors.ScoreCorrector object at 0x...>\n>>> measureSlice = ssOMR.getMeasureSlice(2)\n>>> measureSlice\n<music21.omr.correctors.MeasureSlice object at 0x...>",
        "type": "ListItem"
    },
    {
        "text": "MeasureSlice.",
        "type": "Title"
    },
    {
        "text": "runSliceSearch",
        "type": "Title"
    },
    {
        "text": "incorrectPartIndex",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Takes in an incorrectPartIndex and returns an array\nof the measure indices within the slice that have the\nmaximum probability to correct a given flagged measures.\nReturns a namedtuple (MeasureRelationship)\n>>> omrPath = omr.correctors.K525omrShortPath\n>>> omrScore = converter.parse(omrPath)\n>>> ssOMR = omr.correctors.ScoreCorrector(omrScore)\n>>> measureSlice = ssOMR.getMeasureSlice(2)\n>>> measureSlice\n<music21.omr.correctors.MeasureSlice object at 0x...>\n>>> measureSlice.runSliceSearch(1)\nMeasureRelationship(flaggedMeasurePart=1, flaggedMeasureIndex=2,\n    correctMeasurePart=3, correctMeasureIndex=2, correctionProbability=0.0054...)\n\n\n>>> measureSlice = ssOMR.getMeasureSlice(3)\n>>> measureSlice.runSliceSearch(0)\nMeasureRelationship(flaggedMeasurePart=0,\n    flaggedMeasureIndex=3, correctMeasurePart=1, correctMeasureIndex=3,\n    correctionProbability=2.41...e-14)",
        "type": "ListItem"
    },
    {
        "text": "PriorsIntegrationScore\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.omr.correctors.",
        "type": "Title"
    },
    {
        "text": "PriorsIntegrationScore",
        "type": "Title"
    },
    {
        "text": "total",
        "type": "Title"
    },
    {
        "text": "horizontal",
        "type": "Title"
    },
    {
        "text": "vertical",
        "type": "Title"
    },
    {
        "text": "ignored",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "ScoreCorrector\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.omr.correctors.",
        "type": "Title"
    },
    {
        "text": "ScoreCorrector",
        "type": "Title"
    },
    {
        "text": "score",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "takes in a music21.stream.Score object and runs OMR correction on it.",
        "type": "ListItem"
    },
    {
        "text": "ScoreCorrector methods",
        "type": "Title"
    },
    {
        "text": "ScoreCorrector.",
        "type": "Title"
    },
    {
        "text": "generateCorrectedScore",
        "type": "Title"
    },
    {
        "text": "horizontalArray",
        "type": "Title"
    },
    {
        "text": "verticalArray",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given two correcting arrays (one from the horizontal model and one from\nthe vertical model),\nwhich offer source measures for each flagged measure in each part,\nthis method compares the probabilities of proposed\nsource measures for each flagged measure,\nand replaces the flagged measures contents with the more probable source measure\nusing substituteOneMeasureContentsForAnother.\nIt then rehashes the score so that a new difference comparison can be run.\nReturns a collections.namedtuple of the total number of flagged measures, the total number\ncorrected by the horizontal (Prior based on Distance) and the\nvertical (Prior based on Parts)\nmethods.",
        "type": "ListItem"
    },
    {
        "text": "ScoreCorrector.",
        "type": "Title"
    },
    {
        "text": "getAllHashes",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns an array of arrays, each of which is the hashed notes for a part\n>>> p1 = stream.Part()\n>>> p1.insert(0, meter.TimeSignature('4/4'))\n>>> p1.append(note.Note('C', type = 'half'))\n>>> p1.append(note.Rest(type='half'))\n>>> p1.append(note.Note('C', type = 'half'))\n>>> p1.append(note.Rest(type='half'))\n>>> p1.makeMeasures(inPlace=True)\n>>> p2 = stream.Part()\n>>> p2.insert(0, meter.TimeSignature('4/4'))\n>>> p2.repeatAppend(note.Note('C', type='quarter'), 8)\n>>> p2.makeMeasures(inPlace=True)\n>>> s = stream.Score()\n>>> s.insert(0, p1)\n>>> s.insert(0, p2)\n>>> ss = omr.correctors.ScoreCorrector(s)\n>>> ss.getAllHashes()\n[['Z[', 'Z['], ['PPPP', 'PPPP']]",
        "type": "ListItem"
    },
    {
        "text": "ScoreCorrector.",
        "type": "Title"
    },
    {
        "text": "getAllIncorrectMeasures",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns an array of the incorrect measure indices arrays for each part.\nThis is used in the MeasureSlice object to make sure we're not comparing a flagged\nmeasure to other flagged measures in its slice\n>>> omrPath = omr.correctors.K525omrShortPath\n>>> omrScore = converter.parse(omrPath)\n>>> ssOMR = omr.correctors.ScoreCorrector(omrScore)\n>>> ssOMR\n<music21.omr.correctors.ScoreCorrector object at 0x...>\n>>> ssOMR.getAllIncorrectMeasures()\n[[1, 3, 9, 10, 12, 17, 20], [2, 12, 14, 17], [1, 9], []]",
        "type": "ListItem"
    },
    {
        "text": "ScoreCorrector.",
        "type": "Title"
    },
    {
        "text": "getMeasureSlice",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given an index, i, returns a MeasureSlice object at that index\n>>> omrPath = omr.correctors.K525omrShortPath\n>>> omrScore = converter.parse(omrPath)\n>>> ssOMR = omr.correctors.ScoreCorrector(omrScore)\n>>> ssOMR.getMeasureSlice(4)\n<music21.omr.correctors.MeasureSlice object at 0x...>",
        "type": "ListItem"
    },
    {
        "text": "ScoreCorrector.",
        "type": "Title"
    },
    {
        "text": "getSinglePart",
        "type": "Title"
    },
    {
        "text": "pn",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "returns a NEW SinglePart object for part number pn from the score",
        "type": "ListItem"
    },
    {
        "text": "ScoreCorrector.",
        "type": "Title"
    },
    {
        "text": "getVerticalProbabilityDistributionSinglePart",
        "type": "Title"
    },
    {
        "text": "pn",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns the Vertical Probability Distribution (PrP) for a single part.\nGet the Priors for the Violin II part (first 20 measures only)\n>>> omrPath = omr.correctors.K525omrShortPath\n>>> omrScore = converter.parse(omrPath)\n>>> ssOMR = omr.correctors.ScoreCorrector(omrScore)\n>>> allDists = ssOMR.getVerticalProbabilityDistributionSinglePart(1)\n>>> ['%0.3f' % p for p in allDists]\n['0.571', '1.000', '0.667', '0.714']",
        "type": "ListItem"
    },
    {
        "text": "ScoreCorrector.",
        "type": "Title"
    },
    {
        "text": "getVerticalProbabilityDistributionSinglePartSingleMeasure",
        "type": "Title"
    },
    {
        "text": "pn",
        "type": "Title"
    },
    {
        "text": "measureIndex",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "ScoreCorrector.",
        "type": "Title"
    },
    {
        "text": "run",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Run all known models for OMR correction on\nthis score",
        "type": "ListItem"
    },
    {
        "text": "ScoreCorrector.",
        "type": "Title"
    },
    {
        "text": "runHorizontalCorrectionModel",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "runs for sp in self.singleParts:sp.runHorizontalCorrectionModel()\n\n\nreturns correctingArrayAllParts",
        "type": "ListItem"
    },
    {
        "text": "ScoreCorrector.",
        "type": "Title"
    },
    {
        "text": "runPriorModel",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "run the horizontal and vertical correction models\non the score.  Returns the new self.score object.",
        "type": "ListItem"
    },
    {
        "text": "ScoreCorrector.",
        "type": "Title"
    },
    {
        "text": "runVerticalCorrectionModel",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Runs a basic vertical correction model on a ScoreCorrector object.\nThat is, for each flagged measure, this method replaces the rhythm in that flagged measure\nwith the rhythm of a measure with the least difference.",
        "type": "ListItem"
    },
    {
        "text": "ScoreCorrector.",
        "type": "Title"
    },
    {
        "text": "runVerticalSearch",
        "type": "Title"
    },
    {
        "text": "pn",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns an array of the minimum distance measure indices\ngiven a measure (with index i) within a part pn to compare to",
        "type": "ListItem"
    },
    {
        "text": "ScoreCorrector.",
        "type": "Title"
    },
    {
        "text": "substituteOneMeasureContentsForAnother",
        "type": "Title"
    },
    {
        "text": "sourceHorizontalIndex",
        "type": "Title"
    },
    {
        "text": "sourceVerticalIndex",
        "type": "Title"
    },
    {
        "text": "destinationHorizontalIndex",
        "type": "Title"
    },
    {
        "text": "destinationVerticalIndex",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Takes a destination measure, deletes its contents, and replaces them\nwith the contents of a source measure but retains as many pitches as possible\nThe destination measure would normally be in the set F of flagged measures\n(having an incorrect number of beats)\nwhile the source measure is in the set C of correcting measures.\n>>> s = corpus.parse('bwv66.6').measures(1, 2)\n>>> s.show('text')\n{0.0} <music21.stream.Part Soprano>\n    ...\n    {0.0} <music21.stream.Measure 1 offset=0.0>\n        {0.0} <music21.note.Note A>\n        {1.0} <music21.note.Note B>\n        {2.0} <music21.note.Note C#>\n        {3.0} <music21.note.Note E>\n    {4.0} <music21.stream.Measure 2 offset=4.0>\n        {0.0} <music21.note.Note C#>\n        {1.0} <music21.note.Note B>\n        {2.0} <music21.note.Note A>\n        {3.0} <music21.note.Note C#>\n{0.0} <music21.stream.Part Alto>\n     ...\n    {0.0} <music21.stream.Measure 1 offset=0.0>\n        {0.0} <music21.note.Note F#>\n        {1.0} <music21.note.Note E>\n        {2.0} <music21.note.Note E>\n        {3.0} <music21.note.Note E>\n    {4.0} <music21.stream.Measure 2 offset=4.0>\n        {0.0} <music21.note.Note E>\n        {0.5} <music21.note.Note A>\n        {1.0} <music21.note.Note G#>\n        {2.0} <music21.note.Note E>\n        {3.0} <music21.note.Note G#>\n...\n\n\nReplace part 1, measure 2 (index 1) with part 0, measure 1 (index 0) while retaining\nas many pitches as possible. The eighth-notes will become quarters:\n>>> scOMR = omr.correctors.ScoreCorrector(s)\n>>> scOMR.substituteOneMeasureContentsForAnother(0, 0, 1, 1)\n>>> s2 = scOMR.score\n>>> s2.show('text')\n{0.0} <music21.stream.Part Soprano>\n    ...\n    {0.0} <music21.stream.Measure 1 offset=0.0>\n        {0.0} <music21.note.Note A>\n        {1.0} <music21.note.Note B>\n        {2.0} <music21.note.Note C#>\n        {3.0} <music21.note.Note E>\n    {4.0} <music21.stream.Measure 2 offset=4.0>\n        {0.0} <music21.note.Note C#>\n        {1.0} <music21.note.Note B>\n        {2.0} <music21.note.Note A>\n        {3.0} <music21.note.Note C#>\n{0.0} <music21.stream.Part Alto>\n     ...\n    {0.0} <music21.stream.Measure 1 offset=0.0>\n        {0.0} <music21.note.Note F#>\n        {1.0} <music21.note.Note E>\n        {2.0} <music21.note.Note E>\n        {3.0} <music21.note.Note E>\n    {4.0} <music21.stream.Measure 2 offset=4.0>\n        {0.0} <music21.note.Note E>\n        {1.0} <music21.note.Note A>\n        {2.0} <music21.note.Note G#>\n        {3.0} <music21.note.Note E>\n...",
        "type": "ListItem"
    },
    {
        "text": "ScoreCorrector.",
        "type": "Title"
    },
    {
        "text": "verticalProbabilityDist",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Uses a score and returns an array of probabilities.\nFor n in the array, n is the probability that the nth part",
        "type": "ListItem"
    },
    {
        "text": "SinglePart\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.omr.correctors.",
        "type": "Title"
    },
    {
        "text": "SinglePart",
        "type": "Title"
    },
    {
        "text": "part",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "pn",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "SinglePart methods",
        "type": "Title"
    },
    {
        "text": "SinglePart.",
        "type": "Title"
    },
    {
        "text": "getIncorrectMeasureIndices",
        "type": "Title"
    },
    {
        "text": "runFast",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns an array of all the measures that OMR software would flag - that is,\nmeasures that do\nnot have the correct number of beats given the current time signature\nif runFast is True (by default), assumes that the initial TimeSignature\nis the TimeSignature for the entire piece.\n>>> p = stream.Part()\n>>> ts = meter.TimeSignature('6/8')\n>>> m1 = stream.Measure()\n>>> m1.number = 1\n>>> m1.append(ts)\n>>> m1.append(note.Note('C4', quarterLength = 3.0))\n>>> p.append(m1)\n>>> m2 = stream.Measure()\n>>> m2.number = 2\n>>> m2.append(note.Note('C4', quarterLength = 1.5))\n>>> p.append(m2)\n\n\n>>> sp = omr.correctors.SinglePart(p, pn = 0)\n>>> sp.getIncorrectMeasureIndices()\n[1]\n\n\n>>> p[1]\n<music21.stream.Measure 2 offset=3.0>\n>>> p[1].insert(0, meter.TimeSignature('3/8'))\n>>> sp.getIncorrectMeasureIndices(runFast=False)\n[]",
        "type": "ListItem"
    },
    {
        "text": "SinglePart.",
        "type": "Title"
    },
    {
        "text": "getMeasures",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "SinglePart.",
        "type": "Title"
    },
    {
        "text": "getProbabilityDistribution",
        "type": "Title"
    },
    {
        "text": "sourceIndex",
        "type": "Title"
    },
    {
        "text": "destinationIndex",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "SinglePart.",
        "type": "Title"
    },
    {
        "text": "getSequenceHashesFromMeasureStream",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "takes in a measure stream of a part\nreturns an array of hashed strings",
        "type": "ListItem"
    },
    {
        "text": "SinglePart.",
        "type": "Title"
    },
    {
        "text": "horizontalProbabilityDist",
        "type": "Title"
    },
    {
        "text": "regenerate",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Uses (takes?) an array of hashed measures and returns an array of probabilities.\nFor n in the array, n is the probability that the measure (n-(length of score)) away\nfrom a flagged measure will offer a rhythmic solution.\nThese are the probabilities that, within a part, a measure offers a solution, given its\ndistance from a flagged measure.",
        "type": "ListItem"
    },
    {
        "text": "SinglePart.",
        "type": "Title"
    },
    {
        "text": "runHorizontalCorrectionModel",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Runs a basic horizontal correction model on a score.\nThat is, for each flagged measure, this method replaces the rhythm in that flagged measure\nwith the rhythm of a measure with the least difference.",
        "type": "ListItem"
    },
    {
        "text": "SinglePart.",
        "type": "Title"
    },
    {
        "text": "runHorizontalSearch",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns an array of the indices of the minimum distance measures\ngiven a measure (with index i) to compare to.",
        "type": "ListItem"
    },
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.omr.correctors",
        "type": "ListItem"
    },
    {
        "text": "\u00a9 Copyright 2006-2023 Michael Scott Asato Cuthbert.\n      Last updated on Jun 12, 2023.",
        "type": "NarrativeText"
    }
]