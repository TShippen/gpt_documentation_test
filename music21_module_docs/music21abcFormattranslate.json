[
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.abcFormat.translate",
        "type": "ListItem"
    },
    {
        "text": "Previous topic",
        "type": "Title"
    },
    {
        "text": "music21.abcFormat",
        "type": "Title"
    },
    {
        "text": "Next topic",
        "type": "Title"
    },
    {
        "text": "music21.alpha.analysis.aligner",
        "type": "Title"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "music21.abcFormat.translate\nFunctions\nabcToStreamOpus()\nabcToStreamPart()\nabcToStreamScore()\nmetadataToM21Object()\nparseABCNote()\nparseTokens()\nreBar()",
        "type": "ListItem"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "About music21",
        "type": "ListItem"
    },
    {
        "text": "User's Guide",
        "type": "ListItem"
    },
    {
        "text": "Module Reference",
        "type": "ListItem"
    },
    {
        "text": "Installation",
        "type": "ListItem"
    },
    {
        "text": "Developer Reference",
        "type": "ListItem"
    },
    {
        "text": "Documentation and tests in progress",
        "type": "ListItem"
    },
    {
        "text": "Quick search",
        "type": "Title"
    },
    {
        "text": "This Page",
        "type": "Title"
    },
    {
        "text": "Show Source",
        "type": "ListItem"
    },
    {
        "text": "music21.abcFormat.translate\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "Functions for translating music21 objects and\nABCHandler instances.\nMostly, these functions are for advanced, low level usage.\nFor basic importing of ABC files from a file or URL to a\nStream, use the music21 converter\nmodule's parse() function.",
        "type": "NarrativeText"
    },
    {
        "text": "Functions\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "music21.abcFormat.translate.",
        "type": "Title"
    },
    {
        "text": "abcToStreamOpus",
        "type": "Title"
    },
    {
        "text": "abcHandler",
        "type": "Title"
    },
    {
        "text": "inputM21",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "number",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Convert a multi-work stream into one or more complete works packed into an Opus Stream.\nIf a number argument is given, and a work is defined by\nthat number, that work is returned.",
        "type": "ListItem"
    },
    {
        "text": "music21.abcFormat.translate.",
        "type": "Title"
    },
    {
        "text": "abcToStreamPart",
        "type": "Title"
    },
    {
        "text": "abcHandler",
        "type": "Title"
    },
    {
        "text": "abcFormat.ABCHandler",
        "type": "Title"
    },
    {
        "text": "inputM21",
        "type": "Title"
    },
    {
        "text": "stream.Part | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "spannerBundle",
        "type": "Title"
    },
    {
        "text": "spanner.SpannerBundle | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u2192 stream.Part",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Handler conversion of a single Part of a Score with multiple Parts.\nResults are added into the provided inputM21 object\nor a newly created Part object\nThe part object is then returned.",
        "type": "ListItem"
    },
    {
        "text": "music21.abcFormat.translate.",
        "type": "Title"
    },
    {
        "text": "abcToStreamScore",
        "type": "Title"
    },
    {
        "text": "abcHandler",
        "type": "Title"
    },
    {
        "text": "inputM21",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given an abcHandler object, build into a\nmulti-part Score with metadata.\nThis assumes that this ABCHandler defines a single work (with 1 or fewer reference numbers).\nif the optional parameter inputM21 is given a music21 Stream subclass, it will use that object\nas the outermost object.  However, inner parts will\nalways be made Part objects.",
        "type": "ListItem"
    },
    {
        "text": "music21.abcFormat.translate.",
        "type": "Title"
    },
    {
        "text": "metadataToM21Object",
        "type": "Title"
    },
    {
        "text": "abcFormat.ABCMetadata",
        "type": "Title"
    },
    {
        "text": "dst",
        "type": "Title"
    },
    {
        "text": "stream.Measure | stream.Part",
        "type": "Title"
    },
    {
        "text": "postTransposition",
        "type": "Title"
    },
    {
        "text": "int",
        "type": "Title"
    },
    {
        "text": "clefSet",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "useMeasures",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "\u2192 tuple[int, bool]",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Parse a single ABCMetadata token, that does not represent what\nmusic21 considers metadata, such as a time signature, key signature,\nclef, or tempo, and put it in dst.\nThis function uses coreAppend operations, so if called separately,\ndst.coreElementsChanged() should be called before accessing the stream.\nReturns the changed transposition and whether clef was set.",
        "type": "ListItem"
    },
    {
        "text": "music21.abcFormat.translate.",
        "type": "Title"
    },
    {
        "text": "parseABCNote",
        "type": "Title"
    },
    {
        "text": "abcFormat.ABCNote",
        "type": "Title"
    },
    {
        "text": "dst",
        "type": "Title"
    },
    {
        "text": "stream.Measure | stream.Part",
        "type": "Title"
    },
    {
        "text": "\u2192 None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Parse an ABCNote object and add it to the destination stream.",
        "type": "ListItem"
    },
    {
        "text": "music21.abcFormat.translate.",
        "type": "Title"
    },
    {
        "text": "parseTokens",
        "type": "Title"
    },
    {
        "text": "mh",
        "type": "Title"
    },
    {
        "text": "abcFormat.ABCHandler",
        "type": "Title"
    },
    {
        "text": "dst",
        "type": "Title"
    },
    {
        "text": "stream.Measure | stream.Part",
        "type": "Title"
    },
    {
        "text": "stream.Part",
        "type": "Title"
    },
    {
        "text": "useMeasures",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "\u2192 tuple[int, bool]",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "parses all the tokens in a measure or part.",
        "type": "ListItem"
    },
    {
        "text": "music21.abcFormat.translate.",
        "type": "Title"
    },
    {
        "text": "reBar",
        "type": "Title"
    },
    {
        "text": "music21Part",
        "type": "Title"
    },
    {
        "text": "inPlace",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Re-bar overflow measures using the last known time signature.\n>>> irl2 = corpus.parse('irl', number=2)\n>>> irl2.metadata.title\n'Aililiu na Gamhna, S.35'\n>>> music21Part = irl2[1]\n\n\nThe whole part is in 2/4 time, but there are some measures expressed in 4/4 time\nwithout an explicit time signature change, an error in abc parsing due to the\nomission of barlines. The method will split those measures such that they conform\nto the last time signature, in this case 2/4. The default is to reBar in place.\nThe measure numbers are updated accordingly.\n(NOTE: reBar is called automatically in abcToStreamPart, hence not demonstrated below\u2026)\nThe key signature and clef are assumed to be the same in the second measure after the\nsplit, so both are omitted. If the time signature is not the same in the second measure,\nthe new time signature is indicated, and the measure following returns to the last time\nsignature, except in the case that a new time signature is indicated.\n>>> music21Part.measure(15).show('text')\n{0.0} <music21.note.Note A>\n{1.0} <music21.note.Note A>\n\n\n>>> music21Part.measure(16).show('text')\n{0.0} <music21.note.Note A>\n{0.5} <music21.note.Note B->\n{1.0} <music21.note.Note A>\n{1.5} <music21.note.Note G>\n\n\nAn example where the time signature wouldn't be the same. This score is\nmistakenly marked as 4/4, but has some measures that are longer.\n>>> irl15 = corpus.parse('irl', number=15)\n>>> irl15.metadata.title\n'Esternowe, S. 60'\n>>> music21Part2 = irl15.parts.first()  # 4/4 time signature\n>>> music21Part2.measure(1).show('text')\n{0.0} <music21.note.Note C>\n{1.0} <music21.note.Note A>\n{1.5} <music21.note.Note G>\n{2.0} <music21.note.Note E>\n{2.5} <music21.note.Note G>\n>>> music21Part2.measure(1)[-1].duration.quarterLength\n1.5\n\n\n>>> music21Part2.measure(2).show('text')\n{0.0} <music21.meter.TimeSignature 1/8>\n{0.0} <music21.note.Note E>\n\n\n\nChanged in v5: inPlace is False by default, and a keyword only argument.",
        "type": "ListItem"
    },
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.abcFormat.translate",
        "type": "ListItem"
    },
    {
        "text": "\u00a9 Copyright 2006-2023 Michael Scott Asato Cuthbert.\n      Last updated on Jun 12, 2023.",
        "type": "NarrativeText"
    }
]