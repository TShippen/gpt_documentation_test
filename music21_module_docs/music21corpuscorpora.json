[
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.corpus.corpora",
        "type": "ListItem"
    },
    {
        "text": "Previous topic",
        "type": "Title"
    },
    {
        "text": "music21.corpus.chorales",
        "type": "Title"
    },
    {
        "text": "Next topic",
        "type": "Title"
    },
    {
        "text": "music21.corpus.manager",
        "type": "Title"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "music21.corpus.corpora\nCorpus\nCorpus\nCorpus.cacheFilePath\nCorpus.directoryInformation\nCorpus.metadataBundle\nCorpus.name\nCorpus.all()\nCorpus.cacheMetadata()\nCorpus.getComposer()\nCorpus.getPaths()\nCorpus.getWorkList()\nCorpus.getWorkReferences()\nCorpus.rebuildMetadataCache()\nCorpus.search()\nCorpus.translateExtensions()\n\n\n\n\nCoreCorpus\nCoreCorpus\nCoreCorpus.cacheFilePath\nCoreCorpus.noCorpus\nCoreCorpus.manualCoreCorpusPath\nCoreCorpus.getPaths()\n\n\n\n\nLocalCorpus\nLocalCorpus\nLocalCorpus.directoryPaths\nLocalCorpus.existsInSettings\nLocalCorpus.name\nLocalCorpus.cacheFilePath\nLocalCorpus.addPath()\nLocalCorpus.delete()\nLocalCorpus.getPaths()\nLocalCorpus.removePath()\nLocalCorpus.save()",
        "type": "ListItem"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "About music21",
        "type": "ListItem"
    },
    {
        "text": "User's Guide",
        "type": "ListItem"
    },
    {
        "text": "Module Reference",
        "type": "ListItem"
    },
    {
        "text": "Installation",
        "type": "ListItem"
    },
    {
        "text": "Developer Reference",
        "type": "ListItem"
    },
    {
        "text": "Documentation and tests in progress",
        "type": "ListItem"
    },
    {
        "text": "Quick search",
        "type": "Title"
    },
    {
        "text": "This Page",
        "type": "Title"
    },
    {
        "text": "Show Source",
        "type": "ListItem"
    },
    {
        "text": "music21.corpus.corpora\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "Corpus\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.corpus.corpora.",
        "type": "Title"
    },
    {
        "text": "Corpus",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Abstract base class of all corpora subclasses.",
        "type": "ListItem"
    },
    {
        "text": "Corpus bases",
        "type": "Title"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "Corpus read-only properties",
        "type": "Title"
    },
    {
        "text": "Corpus.",
        "type": "Title"
    },
    {
        "text": "cacheFilePath",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Corpus.",
        "type": "Title"
    },
    {
        "text": "directoryInformation",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns a tuple of DirectoryInformation objects for\neach directory in self._directoryInformation.\n>>> core = corpus.corpora.CoreCorpus()\n>>> diBrief = core.directoryInformation[0:5]\n>>> diBrief\n(<music21.corpus.work.DirectoryInformation airdsAirs>,\n <music21.corpus.work.DirectoryInformation bach>,\n <music21.corpus.work.DirectoryInformation beach>,\n <music21.corpus.work.DirectoryInformation beethoven>,\n <music21.corpus.work.DirectoryInformation chopin>)\n>>> diBrief[2].directoryTitle\n'Amy Beach'",
        "type": "ListItem"
    },
    {
        "text": "Corpus.",
        "type": "Title"
    },
    {
        "text": "metadataBundle",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The metadata bundle for a corpus:\n>>> corpus.corpora.CoreCorpus().metadataBundle\n<music21.metadata.bundles.MetadataBundle 'core': {151... entries}>\n\n\nAs a technical aside, the metadata bundle for a corpus is actually\nstored in corpus.manager, in order to cache most effectively over\nmultiple calls. There might be good reasons to eventually move them\nto each Corpus object, so long as its cached across instances of the\nclass.",
        "type": "ListItem"
    },
    {
        "text": "Corpus.",
        "type": "Title"
    },
    {
        "text": "name",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The name of a given corpus.",
        "type": "ListItem"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "Corpus methods",
        "type": "Title"
    },
    {
        "text": "Corpus.",
        "type": "Title"
    },
    {
        "text": "all",
        "type": "Title"
    },
    {
        "text": "\u2192 bundles.MetadataBundle",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "This is a synonym for the metadataBundle property, but easier to understand\nwhat it does.\n>>> corpus.corpora.CoreCorpus().all()\n<music21.metadata.bundles.MetadataBundle 'core': {151... entries}>",
        "type": "ListItem"
    },
    {
        "text": "Corpus.",
        "type": "Title"
    },
    {
        "text": "cacheMetadata",
        "type": "Title"
    },
    {
        "text": "useMultiprocessing",
        "type": "NarrativeText"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "verbose",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "timer",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Cache the metadata for a single corpus.",
        "type": "ListItem"
    },
    {
        "text": "Corpus.",
        "type": "Title"
    },
    {
        "text": "getComposer",
        "type": "Title"
    },
    {
        "text": "composerName",
        "type": "Title"
    },
    {
        "text": "fileExtensions",
        "type": "Title"
    },
    {
        "text": "Iterable[str]",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return all filenames in the corpus that match a composer's or a\ncollection's name. A fileExtensions, if provided, defines which\nextensions are returned. A fileExtensions of (), (default) returns\nall extensions.\nNote that xml and mxl are treated equivalently.\n>>> coreCorpus = corpus.corpora.CoreCorpus()\n>>> a = coreCorpus.getComposer('bach')\n>>> len(a) > 100\nTrue\n\n\n>>> a = coreCorpus.getComposer('bach', fileExtensions=['krn'])\n>>> len(a) < 10\nTrue\n\n\n>>> a = coreCorpus.getComposer('bach', fileExtensions=('xml',))\n>>> len(a) > 10\nTrue",
        "type": "ListItem"
    },
    {
        "text": "abstract",
        "type": "Title"
    },
    {
        "text": "Corpus.",
        "type": "Title"
    },
    {
        "text": "getPaths",
        "type": "Title"
    },
    {
        "text": "fileExtensions",
        "type": "Title"
    },
    {
        "text": "Iterable[str]",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "expandExtensions",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u2192 list[pathlib.Path]",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The paths of the files in a given corpus.",
        "type": "ListItem"
    },
    {
        "text": "Corpus.",
        "type": "Title"
    },
    {
        "text": "getWorkList",
        "type": "Title"
    },
    {
        "text": "workName",
        "type": "Title"
    },
    {
        "text": "str | Path",
        "type": "Title"
    },
    {
        "text": "movementNumber",
        "type": "Title"
    },
    {
        "text": "int",
        "type": "Title"
    },
    {
        "text": "Collection",
        "type": "Title"
    },
    {
        "text": "int",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "fileExtensions",
        "type": "Title"
    },
    {
        "text": "Iterable[str]",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Search the corpus and return a list of filenames of works, always in a\nlist.\nIf no matches are found, an empty list is returned.\n>>> coreCorpus = corpus.corpora.CoreCorpus()\n\n\nThis returns 1 even though there is a \u0098.mus' file, which cannot be read\u2026\n>>> len(coreCorpus.getWorkList('cpebach/h186'))\n1\n>>> len(coreCorpus.getWorkList('cpebach/h186', None, fileExtensions=['.xml']))\n1\n\n\n>>> len(coreCorpus.getWorkList('schumann_clara/opus17', 3))\n1\n>>> len(coreCorpus.getWorkList('schumann_clara/opus17', 2))\n0\n\n\nNote that \u0098verdi' just gets the single Verdi piece and not the\nMonteverdi pieces:\n>>> len(coreCorpus.getWorkList('verdi'))\n1",
        "type": "ListItem"
    },
    {
        "text": "Corpus.",
        "type": "Title"
    },
    {
        "text": "getWorkReferences",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return a data dictionary for all works in this corpus\nReturns a list of corpus.work.DirectoryInformation objects, one\nfor each directory. A \u0098works' dictionary for each composer\nprovides references to dictionaries for all associated works.\nThis is used in the generation of corpus documentation\n>>> workRefs = corpus.corpora.CoreCorpus().getWorkReferences()\n>>> workRefs[1:3]\n[<music21.corpus.work.DirectoryInformation bach>,\n <music21.corpus.work.DirectoryInformation beach>]",
        "type": "ListItem"
    },
    {
        "text": "Corpus.",
        "type": "Title"
    },
    {
        "text": "rebuildMetadataCache",
        "type": "Title"
    },
    {
        "text": "useMultiprocessing",
        "type": "NarrativeText"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "verbose",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Rebuild a named bundle from scratch.\nIf a bundle is associated with one of music21's corpora, delete any\nmetadata cache on disk, clear the bundle's contents and reload in all\nfiles from that associated corpus.\nReturn the rebuilt metadata bundle.",
        "type": "ListItem"
    },
    {
        "text": "Corpus.",
        "type": "Title"
    },
    {
        "text": "search",
        "type": "Title"
    },
    {
        "text": "query",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "field",
        "type": "Title"
    },
    {
        "text": "str | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "fileExtensions",
        "type": "Title"
    },
    {
        "text": "Iterable[str]",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Search this corpus for metadata entries, returning a metadataBundle\n>>> corpus.corpora.CoreCorpus().search('3/4')\n<music21.metadata.bundles.MetadataBundle {1875 entries}>\n\n\n>>> corpus.corpora.CoreCorpus().search(\n...      'bach',\n...      field='composer',\n...      )\n<music21.metadata.bundles.MetadataBundle {363 entries}>\n\n\n>>> predicate = lambda noteCount: noteCount < 20\n>>> corpus.corpora.CoreCorpus().search(\n...     predicate,\n...     field='noteCount',\n...     )\n<music21.metadata.bundles.MetadataBundle {134 entries}>",
        "type": "ListItem"
    },
    {
        "text": "static",
        "type": "Title"
    },
    {
        "text": "Corpus.",
        "type": "Title"
    },
    {
        "text": "translateExtensions",
        "type": "Title"
    },
    {
        "text": "fileExtensions",
        "type": "Title"
    },
    {
        "text": "Iterable[str]",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "expandExtensions",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u2192 tuple[str, ...]",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Utility to get default extensions, or, optionally, expand extensions to\nall known formats.\n>>> coreCorpus = corpus.corpora.CoreCorpus()\n>>> for extension in coreCorpus.translateExtensions():\n...     extension\n...\n'.abc'\n'.capx'\n'.mid'\n'.midi'\n'.xml'\n'.mxl'\n'.musicxml'\n'.md'\n'.musedata'\n'.zip'\n'.krn'\n'.rntxt'\n'.rntext'\n'.romantext'\n'.rtxt'\n'.nwctxt'\n'.nwc'\n\n\n>>> coreCorpus.translateExtensions(('.mid',), expandExtensions=False)\n('.mid',)\n\n\n>>> coreCorpus.translateExtensions(('.mid',), expandExtensions=True)\n('.mid', '.midi')\n\n\nIt does not matter if you choose a canonical name or not, the output is the same:\n>>> coreCorpus.translateExtensions(('.musicxml',), expandExtensions=True)\n('.xml', '.mxl', '.musicxml')\n\n\n>>> coreCorpus.translateExtensions(('.xml',), expandExtensions=True)\n('.xml', '.mxl', '.musicxml')\n\n\nLeading dots don't matter:\n>>> coreCorpus.translateExtensions(('xml',))\n('.xml', '.mxl', '.musicxml')\n\n\n# With multiple extensions:\n>>> coreCorpus.translateExtensions(('.mid', '.musicxml'), expandExtensions=False)\n('.mid', '.musicxml')\n>>> coreCorpus.translateExtensions(('.mid', '.musicxml'))\n('.mid', '.midi', '.xml', '.mxl', '.musicxml')\n\n\n\nChanged in v9: returns a tuple, not a list.  first element must be an Iterable of strings\n\nTODO: unify with tools in common.formats",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "CoreCorpus\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.corpus.corpora.",
        "type": "Title"
    },
    {
        "text": "CoreCorpus",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A model of the core corpus.\n>>> coreCorpus = corpus.corpora.CoreCorpus()",
        "type": "ListItem"
    },
    {
        "text": "CoreCorpus bases",
        "type": "Title"
    },
    {
        "text": "Corpus",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "CoreCorpus read-only properties",
        "type": "Title"
    },
    {
        "text": "CoreCorpus.",
        "type": "Title"
    },
    {
        "text": "cacheFilePath",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "CoreCorpus.",
        "type": "Title"
    },
    {
        "text": "noCorpus",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return True or False if this is a corpus or noCorpus distribution.\n>>> corpus.corpora.CoreCorpus().noCorpus\nFalse",
        "type": "ListItem"
    },
    {
        "text": "Read-only properties inherited from Corpus:",
        "type": "NarrativeText"
    },
    {
        "text": "directoryInformation metadataBundle",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "CoreCorpus read/write properties",
        "type": "Title"
    },
    {
        "text": "CoreCorpus.",
        "type": "Title"
    },
    {
        "text": "manualCoreCorpusPath",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Set music21's core corpus to a directory, and save that information in\nthe user settings.\nThis is specifically for use with \u009cno corpus\u009d music21 packages, where\nthe core corpus was not included with the rest of the package\nfunctionality, and had to be installed separately.\nSet it to a directory:\n>>> coreCorpus = corpus.corpora.CoreCorpus()\n>>> coreCorpus.manualCoreCorpusPath = '~/Desktop'\n\n\nUnset it:\n>>> coreCorpus.manualCoreCorpusPath = None\n>>> coreCorpus.manualCoreCorpusPath is None\nTrue",
        "type": "ListItem"
    },
    {
        "text": "CoreCorpus methods",
        "type": "Title"
    },
    {
        "text": "CoreCorpus.",
        "type": "Title"
    },
    {
        "text": "getPaths",
        "type": "Title"
    },
    {
        "text": "fileExtensions",
        "type": "Title"
    },
    {
        "text": "Iterable[str]",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "expandExtensions",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u2192 list[pathlib.Path]",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get all paths in the core corpus that match a known extension, or an\nextension provided by an argument.\nIf expandExtensions is True, a format for an extension, and related\nextensions, will be replaced by all known input extensions.\nThis is convenient when an input format might match for multiple\nextensions.\n>>> coreCorpus = corpus.corpora.CoreCorpus()\n>>> corpusFilePaths = coreCorpus.getPaths()\n>>> 3000 < len(corpusFilePaths) < 4000\nTrue\n\n\n>>> kernFilePaths = coreCorpus.getPaths(['krn'])\n>>> len(kernFilePaths) >= 500\nTrue\n\n\n>>> abcFilePaths = coreCorpus.getPaths(['abc'])\n>>> len(abcFilePaths) >= 100\nTrue",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from Corpus:",
        "type": "NarrativeText"
    },
    {
        "text": "all() cacheMetadata() getComposer() getWorkList() getWorkReferences() rebuildMetadataCache() search() translateExtensions()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "LocalCorpus\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.corpus.corpora.",
        "type": "Title"
    },
    {
        "text": "LocalCorpus",
        "type": "Title"
    },
    {
        "text": "name",
        "type": "Title"
    },
    {
        "text": "str | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A model of a local corpus.\n>>> localCorpus = corpus.corpora.LocalCorpus()\n\n\nThe default local corpus is unnamed (or called \u009clocal\u009d or None), but an arbitrary number of\nindependent, named local corpora can be defined and persisted:\n>>> namedLocalCorpus = corpus.corpora.LocalCorpus('funk')\n\n\nIllegal local corpus name (\u0098core' or \u0098virtual')\n>>> corpus.corpora.LocalCorpus('core')\nTraceback (most recent call last):\nmusic21.exceptions21.CorpusException: The name 'core' is reserved.",
        "type": "ListItem"
    },
    {
        "text": "LocalCorpus bases",
        "type": "Title"
    },
    {
        "text": "Corpus",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "LocalCorpus read-only properties",
        "type": "Title"
    },
    {
        "text": "LocalCorpus.",
        "type": "Title"
    },
    {
        "text": "directoryPaths",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The directory paths in use by a given local corpus.",
        "type": "ListItem"
    },
    {
        "text": "LocalCorpus.",
        "type": "Title"
    },
    {
        "text": "existsInSettings",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "True if this local corpus has a corresponding entry in music21's user\nsettings, otherwise false.",
        "type": "ListItem"
    },
    {
        "text": "LocalCorpus.",
        "type": "Title"
    },
    {
        "text": "name",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The name of a given local corpus.  Either \u0098local' for the unnamed corpus\nor a name for a named corpus\n>>> corpus.corpora.LocalCorpus().name\n'local'\n\n\n>>> corpus.corpora.LocalCorpus('funkCorpus').name\n'funkCorpus'",
        "type": "ListItem"
    },
    {
        "text": "Read-only properties inherited from Corpus:",
        "type": "NarrativeText"
    },
    {
        "text": "directoryInformation metadataBundle",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "LocalCorpus read/write properties",
        "type": "Title"
    },
    {
        "text": "LocalCorpus.",
        "type": "Title"
    },
    {
        "text": "cacheFilePath",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get the path to the file path that stores the .json file.\nreturns a pathlib.Path",
        "type": "ListItem"
    },
    {
        "text": "LocalCorpus methods",
        "type": "Title"
    },
    {
        "text": "LocalCorpus.",
        "type": "Title"
    },
    {
        "text": "addPath",
        "type": "Title"
    },
    {
        "text": "directoryPath",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Add a directory path to a local corpus:\n>>> localCorpus = corpus.corpora.LocalCorpus('a new corpus')\n>>> localCorpus.addPath('~/Desktop')\n\n\nPaths added in this way will not be persisted from session to session\nunless explicitly saved by a call to LocalCorpus.save().",
        "type": "ListItem"
    },
    {
        "text": "LocalCorpus.",
        "type": "Title"
    },
    {
        "text": "delete",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Delete a non-default local corpus from the user settings.",
        "type": "ListItem"
    },
    {
        "text": "LocalCorpus.",
        "type": "Title"
    },
    {
        "text": "getPaths",
        "type": "Title"
    },
    {
        "text": "fileExtensions",
        "type": "Title"
    },
    {
        "text": "Iterable[str]",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "expandExtensions",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "\u2192 list[pathlib.Path]",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Access files in additional directories supplied by the user and defined\nin environment settings in the \u0098localCorpusSettings' list.\nIf additional paths are added on a per-session basis with the\naddPath() function, these paths are also returned\nwith this method.",
        "type": "ListItem"
    },
    {
        "text": "LocalCorpus.",
        "type": "Title"
    },
    {
        "text": "removePath",
        "type": "Title"
    },
    {
        "text": "directoryPath",
        "type": "Title"
    },
    {
        "text": "str | Path",
        "type": "Title"
    },
    {
        "text": "\u2192 None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Remove a directory path from a local corpus.\nIf that path is included in the list of persisted paths for the given\ncorpus, it will be removed permanently.\n>>> testCorpus = corpus.corpora.LocalCorpus(name='test')\n>>> testCorpus.addPath('~/Desktop')\n>>> len(testCorpus.directoryPaths)\n1\n>>> testCorpus.removePath('~/Desktop')\n>>> testCorpus.directoryPaths\n()\n\n\nTODO: test for corpus persisted to disk without actually reindexing\nfiles on user's Desktop.",
        "type": "ListItem"
    },
    {
        "text": "LocalCorpus.",
        "type": "Title"
    },
    {
        "text": "save",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Save the current list of directory paths in use by a given corpus in\nthe user settings.  And reindex.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from Corpus:",
        "type": "NarrativeText"
    },
    {
        "text": "all() cacheMetadata() getComposer() getWorkList() getWorkReferences() rebuildMetadataCache() search() translateExtensions()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.corpus.corpora",
        "type": "ListItem"
    },
    {
        "text": "\u00a9 Copyright 2006-2023 Michael Scott Asato Cuthbert.\n      Last updated on Jun 12, 2023.",
        "type": "NarrativeText"
    }
]