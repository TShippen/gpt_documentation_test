[
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.interval",
        "type": "ListItem"
    },
    {
        "text": "Previous topic",
        "type": "Title"
    },
    {
        "text": "music21.instrument",
        "type": "Title"
    },
    {
        "text": "Next topic",
        "type": "Title"
    },
    {
        "text": "music21.ipython21",
        "type": "Title"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "music21.interval\nInterval\nInterval\nInterval.cents\nInterval.complement\nInterval.directedName\nInterval.directedNiceName\nInterval.directedSimpleName\nInterval.directedSimpleNiceName\nInterval.direction\nInterval.generic\nInterval.intervalClass\nInterval.isChromaticStep\nInterval.isDiatonicStep\nInterval.isSkip\nInterval.isStep\nInterval.name\nInterval.niceName\nInterval.semiSimpleName\nInterval.semiSimpleNiceName\nInterval.semitones\nInterval.simpleName\nInterval.simpleNiceName\nInterval.specificName\nInterval.specifier\nInterval.noteEnd\nInterval.noteStart\nInterval.pitchEnd\nInterval.pitchStart\nInterval.__eq__()\nInterval.isConsonant()\nInterval.reverse()\nInterval.transposePitch()\n\n\n\n\nChromaticInterval\nChromaticInterval\nChromaticInterval.cents\nChromaticInterval.directed\nChromaticInterval.direction\nChromaticInterval.intervalClass\nChromaticInterval.isChromaticStep\nChromaticInterval.isStep\nChromaticInterval.mod12\nChromaticInterval.simpleDirected\nChromaticInterval.simpleUndirected\nChromaticInterval.undirected\nChromaticInterval.__eq__()\nChromaticInterval.getDiatonic()\nChromaticInterval.reverse()\nChromaticInterval.transposePitch()\n\n\n\n\nDiatonicInterval\nDiatonicInterval\nDiatonicInterval.cents\nDiatonicInterval.directedName\nDiatonicInterval.directedNiceName\nDiatonicInterval.directedSemiSimpleName\nDiatonicInterval.directedSemiSimpleNiceName\nDiatonicInterval.directedSimpleName\nDiatonicInterval.directedSimpleNiceName\nDiatonicInterval.direction\nDiatonicInterval.isDiatonicStep\nDiatonicInterval.isSkip\nDiatonicInterval.isStep\nDiatonicInterval.mod7\nDiatonicInterval.mod7inversion\nDiatonicInterval.name\nDiatonicInterval.niceName\nDiatonicInterval.perfectable\nDiatonicInterval.semiSimpleName\nDiatonicInterval.semiSimpleNiceName\nDiatonicInterval.simpleName\nDiatonicInterval.simpleNiceName\nDiatonicInterval.specificName\nDiatonicInterval.specifierAbbreviation\nDiatonicInterval.__eq__()\nDiatonicInterval.getChromatic()\nDiatonicInterval.reverse()\nDiatonicInterval.transposePitch()\nDiatonicInterval.generic\nDiatonicInterval.specifier\n\n\n\n\nDirection\nDirection\n\n\nGenericInterval\nGenericInterval\nGenericInterval.direction\nGenericInterval.isDiatonicStep\nGenericInterval.isSkip\nGenericInterval.isStep\nGenericInterval.isUnison\nGenericInterval.mod7\nGenericInterval.mod7inversion\nGenericInterval.niceName\nGenericInterval.octaves\nGenericInterval.perfectable\nGenericInterval.semiSimpleDirected\nGenericInterval.semiSimpleNiceName\nGenericInterval.semiSimpleUndirected\nGenericInterval.simpleDirected\nGenericInterval.simpleNiceName\nGenericInterval.simpleUndirected\nGenericInterval.staffDistance\nGenericInterval.undirected\nGenericInterval.undirectedOctaves\nGenericInterval.directed\nGenericInterval.value\nGenericInterval.__eq__()\nGenericInterval.complement()\nGenericInterval.getDiatonic()\nGenericInterval.reverse()\nGenericInterval.transposePitch()\nGenericInterval.transposePitchKeyAware()\n\n\n\n\nIntervalBase\nIntervalBase\nIntervalBase.reverse()\nIntervalBase.transposeNote()\nIntervalBase.transposePitch()\n\n\n\n\nSpecifier\nSpecifier\n\n\nFunctions\nnotesToChromatic()\nintervalsToDiatonic()\nintervalFromGenericAndChromatic()\nadd()\nconvertDiatonicNumberToStep()\nconvertGeneric()\nconvertSemitoneToSpecifierGeneric()\nconvertSemitoneToSpecifierGenericMicrotone()\nconvertStaffDistanceToInterval()\ngetAbsoluteHigherNote()\ngetAbsoluteLowerNote()\ngetWrittenHigherNote()\ngetWrittenLowerNote()\nintervalToPythagoreanRatio()\nnotesToGeneric()\nnotesToInterval()\nparseSpecifier()\nsubtract()\ntransposeNote()\ntransposePitch()",
        "type": "ListItem"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "About music21",
        "type": "ListItem"
    },
    {
        "text": "User's Guide",
        "type": "ListItem"
    },
    {
        "text": "Module Reference",
        "type": "ListItem"
    },
    {
        "text": "Installation",
        "type": "ListItem"
    },
    {
        "text": "Developer Reference",
        "type": "ListItem"
    },
    {
        "text": "Documentation and tests in progress",
        "type": "ListItem"
    },
    {
        "text": "Quick search",
        "type": "Title"
    },
    {
        "text": "This Page",
        "type": "Title"
    },
    {
        "text": "Show Source",
        "type": "ListItem"
    },
    {
        "text": "music21.interval\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "This module defines various types of interval objects.\nFundamental classes are Interval,\nGenericInterval,\nand ChromaticInterval.",
        "type": "NarrativeText"
    },
    {
        "text": "Interval\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.interval.",
        "type": "Title"
    },
    {
        "text": "Interval",
        "type": "Title"
    },
    {
        "text": "arg0",
        "type": "Title"
    },
    {
        "text": "t.Union",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "int",
        "type": "Title"
    },
    {
        "text": "float",
        "type": "Title"
    },
    {
        "text": "pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "note.Note",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "arg1",
        "type": "Title"
    },
    {
        "text": "pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "note.Note",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "diatonic",
        "type": "Title"
    },
    {
        "text": "DiatonicInterval | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "chromatic",
        "type": "Title"
    },
    {
        "text": "ChromaticInterval | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "pitchStart",
        "type": "Title"
    },
    {
        "text": "pitch.Pitch | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "pitchEnd",
        "type": "Title"
    },
    {
        "text": "pitch.Pitch | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "noteStart",
        "type": "Title"
    },
    {
        "text": "note.Note",
        "type": "Title"
    },
    {
        "text": "pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "noteEnd",
        "type": "Title"
    },
    {
        "text": "note.Note",
        "type": "Title"
    },
    {
        "text": "pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "name",
        "type": "Title"
    },
    {
        "text": "str | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An Interval class that encapsulates both\nChromaticInterval and\nDiatonicInterval objects all in one model.\nThe interval is specified either as named arguments, a\nDiatonicInterval and\na ChromaticInterval,\nor two Note objects\n(or Pitch objects),\nfrom which both a ChromaticInterval and DiatonicInterval are derived.\n>>> p1 = pitch.Pitch('c3')\n>>> p2 = pitch.Pitch('c5')\n>>> aInterval = interval.Interval(pitchStart=p1, pitchEnd=p2)\n>>> aInterval\n<music21.interval.Interval P15>\n>>> aInterval.name\n'P15'\n>>> aInterval.pitchStart is p1\nTrue\n>>> aInterval.pitchEnd is p2\nTrue\n\n\nReduce to less than an octave:\n>>> aInterval.simpleName\n'P1'\n\n\nReduce to no more than an octave:\n>>> aInterval.semiSimpleName\n'P8'\n\n\nAn interval can also be specified directly:\n>>> aInterval = interval.Interval('m3')\n>>> aInterval\n<music21.interval.Interval m3>\n>>> aInterval = interval.Interval('M3')\n>>> aInterval\n<music21.interval.Interval M3>\n\n\n>>> aInterval = interval.Interval('p5')\n>>> aInterval\n<music21.interval.Interval P5>\n>>> aInterval.isChromaticStep\nFalse\n>>> aInterval.isDiatonicStep\nFalse\n>>> aInterval.isStep\nFalse\n\n\nSome ways of creating half-steps.\n>>> aInterval = interval.Interval('half')\n>>> aInterval\n<music21.interval.Interval m2>\n>>> aInterval.isChromaticStep\nTrue\n>>> aInterval.isDiatonicStep\nTrue\n>>> aInterval.isStep\nTrue\n\n\n>>> aInterval = interval.Interval('-h')\n>>> aInterval\n<music21.interval.Interval m-2>\n>>> aInterval.directedName\n'm-2'\n>>> aInterval.name\n'm2'\n\n\nA single int is treated as a number of half-steps:\n>>> aInterval = interval.Interval(4)\n>>> aInterval\n<music21.interval.Interval M3>\n\n\n>>> aInterval = interval.Interval(7)\n>>> aInterval\n<music21.interval.Interval P5>\n\n\nIf giving a starting pitch, an ending pitch has to be specified.\n>>> aInterval = interval.Interval(pitchStart=p1)\nTraceback (most recent call last):\nValueError: either both the starting and the ending pitch (or note) must be given\n    or neither can be given. You cannot have one without the other.\n\n\nAn Interval can be constructed from a DiatonicInterval and ChromaticInterval\nobject (or just one):\n>>> diaInterval = interval.DiatonicInterval('major', 'third')\n>>> chrInterval = interval.ChromaticInterval(4)\n>>> fullInterval = interval.Interval(diatonic=diaInterval, chromatic=chrInterval)\n>>> fullInterval\n<music21.interval.Interval M3>\n\n\n>>> fullInterval = interval.Interval(diatonic=diaInterval)\n>>> fullInterval.semitones\n4\n>>> fullInterval = interval.Interval(chromatic=chrInterval)\n>>> fullInterval.diatonic.name\n'M3'\n>>> fullInterval.implicitDiatonic\nTrue\n\n\nTwo Intervals are the same if their Chromatic and Diatonic intervals\nare the same.\n>>> aInt = interval.Interval('P4')\n>>> bInt = interval.Interval(\n...        diatonic=interval.DiatonicInterval('P', 4),\n...        chromatic=interval.ChromaticInterval(5),\n...        )\n>>> aInt == bInt\nTrue\n\n\nN.B. that interval.Interval(\u0098A4') != \u0098A4'\n>>> interval.Interval('A4') == 'A4'\nFalse\n\n\nMore demonstrations using pitches:\n>>> aPitch = pitch.Pitch('c4')\n>>> bPitch = pitch.Pitch('g5')\n>>> aInterval = interval.Interval(aPitch, bPitch)\n>>> aInterval\n<music21.interval.Interval P12>\n>>> bInterval = interval.Interval(pitchStart=aPitch, pitchEnd=bPitch)\n>>> aInterval.niceName == bInterval.niceName\nTrue\n\n\n>>> aPitch = pitch.Pitch('c#4')\n>>> bPitch = pitch.Pitch('f-5')\n>>> cInterval = interval.Interval(aPitch, bPitch)\n>>> cInterval\n<music21.interval.Interval dd11>\n\n\n>>> cPitch = pitch.Pitch('e#4')\n>>> dPitch = pitch.Pitch('f-4')\n>>> dInterval = interval.Interval(cPitch, dPitch)\n>>> dInterval\n<music21.interval.Interval dd2>\n\n\n>>> ePitch = pitch.Pitch('e##4')\n>>> fPitch = pitch.Pitch('f--4')\n>>> dInterval = interval.Interval(ePitch, fPitch)\n>>> dInterval\n<music21.interval.Interval dddd2>\n\n\n>>> gPitch = pitch.Pitch('c--4')\n>>> hPitch = pitch.Pitch('c##4')\n>>> iInterval = interval.Interval(gPitch, hPitch)\n>>> iInterval\n<music21.interval.Interval AAAA1>\n\n\n>>> interval.Interval(pitch.Pitch('e##4'), pitch.Pitch('f--5'))\n<music21.interval.Interval dddd9>\n\n\n\nChanged in v8:\n- Pitches are emphasized over notes.\n- It is not possible to create an interval with a name and a pitchStart/noteStart\nand automatically get a pitchEnd/noteEnd in the process.  Set them later.\n- Incompatible keywords raise ValueError not IntervalException.\n- An empty instantiation gives a P1 interval.",
        "type": "ListItem"
    },
    {
        "text": "Interval bases",
        "type": "Title"
    },
    {
        "text": "IntervalBase",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "Interval read-only properties",
        "type": "Title"
    },
    {
        "text": "Interval.",
        "type": "Title"
    },
    {
        "text": "cents",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return the cents from the chromatic interval, where 100 cents = a half-step\n>>> aInterval = interval.Interval('M3')\n>>> aInterval.cents\n400.0\n\n\n>>> p1 = pitch.Pitch('C4')\n>>> p2 = pitch.Pitch('D4')\n>>> p2.microtone = 30\n>>> microtoneInterval = interval.Interval(pitchStart=p1, pitchEnd=p2)\n>>> microtoneInterval.cents\n230.0",
        "type": "ListItem"
    },
    {
        "text": "Interval.",
        "type": "Title"
    },
    {
        "text": "complement",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return a new Interval object that is the\ncomplement of this Interval.\n>>> aInterval = interval.Interval('M3')\n>>> bInterval = aInterval.complement\n>>> bInterval\n<music21.interval.Interval m6>\n\n\n>>> cInterval = interval.Interval('A2')\n>>> dInterval = cInterval.complement\n>>> dInterval\n<music21.interval.Interval d7>",
        "type": "ListItem"
    },
    {
        "text": "Interval.",
        "type": "Title"
    },
    {
        "text": "directedName",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Interval.",
        "type": "Title"
    },
    {
        "text": "directedNiceName",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Interval.",
        "type": "Title"
    },
    {
        "text": "directedSimpleName",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Interval.",
        "type": "Title"
    },
    {
        "text": "directedSimpleNiceName",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Interval.",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Interval.",
        "type": "Title"
    },
    {
        "text": "generic",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns the GenericInterval object\nassociated with this Interval\n>>> interval.Interval('P5').generic\n<music21.interval.GenericInterval 5>",
        "type": "ListItem"
    },
    {
        "text": "Interval.",
        "type": "Title"
    },
    {
        "text": "intervalClass",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return the interval class from the chromatic interval,\nthat is, the lesser of the number of half-steps in the\nsimpleInterval or its complement.\n>>> aInterval = interval.Interval('M3')\n>>> aInterval.intervalClass\n4\n\n\n>>> bInterval = interval.Interval('m6')\n>>> bInterval.intervalClass\n4\n\n\nEmpty intervals return 0:\n>>> interval.Interval().intervalClass\n0\n\n\n\nChanged in v6.5: empty intervals return 0",
        "type": "ListItem"
    },
    {
        "text": "Interval.",
        "type": "Title"
    },
    {
        "text": "isChromaticStep",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Interval.",
        "type": "Title"
    },
    {
        "text": "isDiatonicStep",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Interval.",
        "type": "Title"
    },
    {
        "text": "isSkip",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Interval.",
        "type": "Title"
    },
    {
        "text": "isStep",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Interval.",
        "type": "Title"
    },
    {
        "text": "name",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return the simple name of the interval, ignoring direction:\n>>> interval.Interval('Descending Perfect Fourth').name\n'P4'",
        "type": "ListItem"
    },
    {
        "text": "Interval.",
        "type": "Title"
    },
    {
        "text": "niceName",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": ">>> interval.Interval('m3').niceName\n'Minor Third'",
        "type": "ListItem"
    },
    {
        "text": "Interval.",
        "type": "Title"
    },
    {
        "text": "semiSimpleName",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Interval.",
        "type": "Title"
    },
    {
        "text": "semiSimpleNiceName",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Interval.",
        "type": "Title"
    },
    {
        "text": "semitones",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Interval.",
        "type": "Title"
    },
    {
        "text": "simpleName",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Interval.",
        "type": "Title"
    },
    {
        "text": "simpleNiceName",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Interval.",
        "type": "Title"
    },
    {
        "text": "specificName",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Interval.",
        "type": "Title"
    },
    {
        "text": "specifier",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "Interval read/write properties",
        "type": "Title"
    },
    {
        "text": "Interval.",
        "type": "Title"
    },
    {
        "text": "noteEnd",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return or set the Note that pitchEnd is attached to.  For\nbackwards compatibility",
        "type": "ListItem"
    },
    {
        "text": "Interval.",
        "type": "Title"
    },
    {
        "text": "noteStart",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return or set the Note that pitchStart is attached to.  For\nbackwards compatibility",
        "type": "ListItem"
    },
    {
        "text": "Interval.",
        "type": "Title"
    },
    {
        "text": "pitchEnd",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Set the\nend pitch to a new value; this will adjust\nthe value of the start pitch (pitchStart).\n>>> aInterval = interval.Interval('M3')\n>>> aInterval.pitchEnd = pitch.Pitch('E4')\n>>> aInterval.pitchStart.nameWithOctave\n'C4'\n\n\n>>> aInterval = interval.Interval('m2')\n>>> aInterval.pitchEnd = pitch.Pitch('A#3')\n>>> aInterval.pitchStart.nameWithOctave\n'G##3'\n\n\n>>> p1 = pitch.Pitch('G#3')\n>>> p2 = pitch.Pitch('C3')\n>>> aInterval = interval.Interval(p1, p2)\n>>> aInterval.directedName  # downward augmented fifth\n'A-5'\n>>> aInterval.pitchEnd = pitch.Pitch('C4')\n>>> aInterval.pitchStart.nameWithOctave\n'G#4'\n\n\n>>> aInterval = interval.Interval('M3')\n>>> aInterval.pitchEnd = pitch.Pitch('A-3')\n>>> aInterval.pitchStart.nameWithOctave\n'F-3'",
        "type": "ListItem"
    },
    {
        "text": "Interval.",
        "type": "Title"
    },
    {
        "text": "pitchStart",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Get the start pitch or set it a new value.\nSetting this will adjust the value of the end pitch (pitchEnd).\n>>> maj3 = interval.Interval('M3')\n>>> maj3.pitchStart = pitch.Pitch('c4')\n>>> maj3.pitchEnd.nameWithOctave\n'E4'\n\n\n>>> p1 = pitch.Pitch('c3')\n>>> p2 = pitch.Pitch('g#3')\n>>> a5 = interval.Interval(p1, p2)\n>>> a5.name\n'A5'\n\n\n>>> a5.pitchStart = pitch.Pitch('g4')\n>>> a5.pitchEnd.nameWithOctave\n'D#5'\n\n\n>>> descM3 = interval.Interval('-M3')\n>>> descM3.pitchStart = pitch.Pitch('c4')\n>>> descM3.pitchEnd.nameWithOctave\n'A-3'\n\n\n>>> descM2 = interval.Interval('M-2')\n>>> descM2.pitchStart = pitch.Pitch('A#3')\n>>> descM2.pitchEnd.nameWithOctave\n'G#3'\n\n\nImplicit diatonic intervals do not need to\nfollow the diatonic directed name:\n>>> halfStep = interval.Interval('h')\n>>> halfStep.directedName\n'm2'\n>>> halfStep.implicitDiatonic\nTrue\n>>> halfStep.pitchStart = pitch.Pitch('F-3')\n>>> halfStep.pitchEnd.nameWithOctave\n'F3'",
        "type": "ListItem"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "Interval methods",
        "type": "Title"
    },
    {
        "text": "Interval.",
        "type": "Title"
    },
    {
        "text": "__eq__",
        "type": "UncategorizedText"
    },
    {
        "text": "other",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "True if .diatonic and .chromatic are equal.\n>>> a = interval.Interval('a4')\n>>> b = interval.Interval('d5')\n>>> c = interval.Interval('m3')\n>>> d = interval.Interval('d5')\n>>> a == b\nFalse\n>>> b == d\nTrue\n>>> a == c\nFalse\n>>> b in [a, c, d]\nTrue\n\n\nNow, of course, this makes sense:\n>>> a == 'hello'\nFalse\n\n\nBut note well that this is also a False expression:\n>>> a == 'a4'\nFalse",
        "type": "ListItem"
    },
    {
        "text": "Interval.",
        "type": "Title"
    },
    {
        "text": "isConsonant",
        "type": "Title"
    },
    {
        "text": "\u2192 bool",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "returns True if the pitches are a major or\nminor third or sixth or perfect fifth or unison.\nThese rules define all common-practice consonances\n(and earlier back to about 1300 all imperfect consonances)\n>>> i1 = interval.Interval(note.Note('C'), note.Note('E'))\n>>> i1.isConsonant()\nTrue\n>>> i1 = interval.Interval(note.Note('B-'), note.Note('C'))\n>>> i1.isConsonant()\nFalse",
        "type": "ListItem"
    },
    {
        "text": "Interval.",
        "type": "Title"
    },
    {
        "text": "reverse",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return an reversed version of this interval.\nIf Pitch objects are stored as\npitchStart and pitchEnd, these pitches are reversed.\n>>> p1 = pitch.Pitch('c3')\n>>> p2 = pitch.Pitch('g3')\n>>> intvP5 = interval.Interval(pitchStart=p1, pitchEnd=p2)\n>>> intvP5\n<music21.interval.Interval P5>\n>>> revInterval = intvP5.reverse()\n>>> revInterval\n<music21.interval.Interval P-5>\n>>> revInterval.pitchStart is intvP5.pitchEnd\nTrue\n\n\n>>> m3 = interval.Interval('m3')\n>>> m3.reverse()\n<music21.interval.Interval m-3>",
        "type": "ListItem"
    },
    {
        "text": "Interval.",
        "type": "Title"
    },
    {
        "text": "transposePitch",
        "type": "Title"
    },
    {
        "text": "pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "reverse",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "maxAccidental",
        "type": "Title"
    },
    {
        "text": "int | None",
        "type": "Title"
    },
    {
        "text": "inPlace",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given a Pitch object, return a new,\ntransposed Pitch, that is transformed\naccording to this Interval. This is the main public interface to all\ntransposition routines found on higher-level objects.\nThe maxAccidental parameter sets an integer number of half step\nalterations that will be accepted in the transposed pitch before it\nis simplified. For example,\na value of 2 will permit double sharps but not triple sharps.  The\nmaxAccidental default is 4, because music21 does not support quintuple\nsharps/flats.  Set to None to try anyhow.\n>>> p1 = pitch.Pitch('A#4')\n>>> i = interval.Interval('m3')\n>>> p2 = i.transposePitch(p1)\n>>> p2\n<music21.pitch.Pitch C#5>\n>>> p2 = i.transposePitch(p1, reverse=True)\n>>> p2\n<music21.pitch.Pitch F##4>\n>>> i.transposePitch(p1, reverse=True, maxAccidental=1)\n<music21.pitch.Pitch G4>\n\n\nPitch objects without octaves are transposed also into\nobjects without octaves.  This might make them appear to be\nlower than the original even if transposed up:\n>>> anyA = pitch.Pitch('A')\n>>> anyC = i.transposePitch(anyA)\n>>> anyC\n<music21.pitch.Pitch C>\n>>> anyC.ps < anyA.ps  # !!\nTrue\n\n\nIf inPlace is True then function is done in place and no pitch is returned.\n>>> p1 = pitch.Pitch('A4')\n>>> i = interval.Interval('m3')\n>>> i.transposePitch(p1, inPlace=True)\n>>> p1\n<music21.pitch.Pitch C5>\n\n\nNote that reverse=True is only there for historical reasons;\nit is the same as i.reverse().transposePitch(x) and that format\nwill be much faster when calling many times.\n\nChanged in v6: inPlace parameter added.  Reverse and maxAccidental\nchanged to keyword only.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from IntervalBase:",
        "type": "NarrativeText"
    },
    {
        "text": "transposeNote()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "Interval instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "ChromaticInterval\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.interval.",
        "type": "Title"
    },
    {
        "text": "ChromaticInterval",
        "type": "Title"
    },
    {
        "text": "semitones",
        "type": "Title"
    },
    {
        "text": "int | float",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Chromatic interval class. Unlike a DiatonicInterval,\nthis IntervalBase subclass treats interval spaces in half-steps.\nSo Major 3rd and Diminished 4th are the same.\nTwo ChromaticIntervals are equal if their size and direction are equal.\n>>> aInterval = interval.ChromaticInterval(-14)\n>>> aInterval.semitones\n-14\n>>> aInterval.undirected\n14\n>>> aInterval.mod12\n10\n>>> aInterval.intervalClass\n2\n>>> aInterval.isChromaticStep\nFalse\n>>> aInterval.isStep\nFalse\n\n\n>>> aInterval = interval.ChromaticInterval(1)\n>>> aInterval.isChromaticStep\nTrue\n>>> aInterval.isStep\nTrue",
        "type": "ListItem"
    },
    {
        "text": "ChromaticInterval bases",
        "type": "Title"
    },
    {
        "text": "IntervalBase",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "ChromaticInterval read-only properties",
        "type": "Title"
    },
    {
        "text": "ChromaticInterval.",
        "type": "Title"
    },
    {
        "text": "cents",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return the number of cents in a ChromaticInterval:\n>>> dime = interval.ChromaticInterval(0.1)\n>>> dime.cents\n10.0",
        "type": "ListItem"
    },
    {
        "text": "ChromaticInterval.",
        "type": "Title"
    },
    {
        "text": "directed",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A synonym for .semitones\n>>> tritoneDown = interval.ChromaticInterval(-6)\n>>> tritoneDown.directed\n-6",
        "type": "ListItem"
    },
    {
        "text": "ChromaticInterval.",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns an enum of the direction:\n>>> interval.ChromaticInterval(-3).direction\n<Direction.DESCENDING: -1>\n\n\nnote that the number can be helpful for multiplication:\n>>> interval.ChromaticInterval(-3).direction * 9\n-9",
        "type": "ListItem"
    },
    {
        "text": "ChromaticInterval.",
        "type": "Title"
    },
    {
        "text": "intervalClass",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "ChromaticInterval.",
        "type": "Title"
    },
    {
        "text": "isChromaticStep",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "ChromaticInterval.",
        "type": "Title"
    },
    {
        "text": "isStep",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "ChromaticInterval.",
        "type": "Title"
    },
    {
        "text": "mod12",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The number of semitones within an octave using modulo arithmatic.\n(see simpleUndirected()\nfor a similar method that puts musical\nintuition above mathematical intuition)\n>>> interval.ChromaticInterval(15).mod12\n3\n>>> interval.ChromaticInterval(-4).mod12\n8\n>>> interval.ChromaticInterval(-16).mod12\n8",
        "type": "ListItem"
    },
    {
        "text": "ChromaticInterval.",
        "type": "Title"
    },
    {
        "text": "simpleDirected",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The number of semitones within an octave while preserving direction.\n>>> interval.ChromaticInterval(15).simpleDirected\n3\n>>> interval.ChromaticInterval(-4).simpleDirected\n-4\n>>> interval.ChromaticInterval(-16).simpleDirected\n-4",
        "type": "ListItem"
    },
    {
        "text": "ChromaticInterval.",
        "type": "Title"
    },
    {
        "text": "simpleUndirected",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The number of semitones within an octave while ignoring direction.\n(see mod12()\nfor a similar method that puts mathematical\nintuition above musical intuition)\n>>> interval.ChromaticInterval(15).simpleUndirected\n3\n>>> interval.ChromaticInterval(-4).simpleUndirected\n4\n>>> interval.ChromaticInterval(-16).simpleUndirected\n4",
        "type": "ListItem"
    },
    {
        "text": "ChromaticInterval.",
        "type": "Title"
    },
    {
        "text": "undirected",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The absolute value of the number of semitones:\n>>> tritoneDown = interval.ChromaticInterval(-6)\n>>> tritoneDown.undirected\n6",
        "type": "ListItem"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "ChromaticInterval read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "ChromaticInterval methods",
        "type": "Title"
    },
    {
        "text": "ChromaticInterval.",
        "type": "Title"
    },
    {
        "text": "__eq__",
        "type": "UncategorizedText"
    },
    {
        "text": "other",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "True if number of semitones is the same.\n>>> a = interval.ChromaticInterval(-14)\n>>> b = interval.ChromaticInterval(14)\n>>> c = interval.ChromaticInterval(-14)\n>>> d = interval.ChromaticInterval(7)\n>>> e = interval.ChromaticInterval(2)\n\n\n>>> a == b\nFalse\n>>> a == c\nTrue\n>>> a == d\nFalse\n>>> b == e\nFalse\n\n\nIntervals do not equal numbers:\n>>> interval.ChromaticInterval(7) == 7\nFalse",
        "type": "ListItem"
    },
    {
        "text": "ChromaticInterval.",
        "type": "Title"
    },
    {
        "text": "getDiatonic",
        "type": "Title"
    },
    {
        "text": "\u2192 DiatonicInterval",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given a ChromaticInterval, return a DiatonicInterval\nobject of the same size.\nWhile there is more than one Generic Interval for any given chromatic\ninterval, this is needed to permit easy chromatic specification of\nInterval objects.  Augmented or diminished intervals are never returned\nexcept for the interval of 6 which returns a diminished fifth, not\naugmented fourth.\n>>> aInterval = interval.ChromaticInterval(5)\n>>> aInterval.getDiatonic()\n<music21.interval.DiatonicInterval P4>\n\n\n>>> aInterval = interval.ChromaticInterval(6)\n>>> aInterval.getDiatonic()\n<music21.interval.DiatonicInterval d5>\n\n\n>>> aInterval = interval.ChromaticInterval(7)\n>>> aInterval.getDiatonic()\n<music21.interval.DiatonicInterval P5>\n\n\n>>> aInterval = interval.ChromaticInterval(11)\n>>> aInterval.getDiatonic()\n<music21.interval.DiatonicInterval M7>",
        "type": "ListItem"
    },
    {
        "text": "ChromaticInterval.",
        "type": "Title"
    },
    {
        "text": "reverse",
        "type": "Title"
    },
    {
        "text": "\u2192 ChromaticInterval",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return an inverted ChromaticInterval,\nthat is, reversing the direction.\n>>> aInterval = interval.ChromaticInterval(-14)\n>>> aInterval.reverse()\n<music21.interval.ChromaticInterval 14>\n\n\n>>> aInterval = interval.ChromaticInterval(3)\n>>> aInterval.reverse()\n<music21.interval.ChromaticInterval -3>",
        "type": "ListItem"
    },
    {
        "text": "ChromaticInterval.",
        "type": "Title"
    },
    {
        "text": "transposePitch",
        "type": "Title"
    },
    {
        "text": "pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "inPlace",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given a Pitch object, return a new,\ntransposed Pitch, that is transformed\naccording to this ChromaticInterval.\nBecause ChromaticInterval object\ndo not take into account diatonic spelling,\nthe new Pitch is simplified to the most common intervals.  See\nsimplifyEnharmonic() with mostCommon = True\nto see the results.\n>>> tritone = interval.ChromaticInterval(6)\n>>> p = pitch.Pitch('E#4')\n>>> p2 = tritone.transposePitch(p)\n>>> p2\n<music21.pitch.Pitch B4>\n>>> p3 = tritone.transposePitch(p2)\n>>> p3\n<music21.pitch.Pitch F5>\n\n\nIf no octave number is given then octaves \u009cwrap around\u009d and thus even\nafter transposing upward, you could end up with a pitch that is\ndisplayed as lower than the original:\n>>> p4 = pitch.Pitch('B')\n>>> p4.ps\n71.0\n>>> p5 = tritone.transposePitch(p4)\n\n\nSince the octave on p4 was implicit, the ps here wraps around\n>>> p5.ps\n65.0\n\n\nAfterwards, spelling of the new pitch will always be inferred.\n>>> p4.spellingIsInferred\nFalse\n>>> p5.spellingIsInferred\nTrue\n\n\nCan be done inPlace as well:\n>>> p = pitch.Pitch('E#4')\n>>> tritone.transposePitch(p, inPlace=True)\n>>> p\n<music21.pitch.Pitch B4>\n>>> p.spellingIsInferred\nTrue\n\n\n\nChanged in v6: added inPlace",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from IntervalBase:",
        "type": "NarrativeText"
    },
    {
        "text": "transposeNote()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "ChromaticInterval instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "DiatonicInterval\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.interval.",
        "type": "Title"
    },
    {
        "text": "DiatonicInterval",
        "type": "Title"
    },
    {
        "text": "specifier",
        "type": "Title"
    },
    {
        "text": "str | int",
        "type": "Title"
    },
    {
        "text": "'P'",
        "type": "UncategorizedText"
    },
    {
        "text": "generic",
        "type": "Title"
    },
    {
        "text": "int",
        "type": "Title"
    },
    {
        "text": "GenericInterval",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A class representing a diatonic interval. Two required arguments are a string specifier\n(such as perfect, major, or minor) and generic, either an int\nof an interval size (such as 2, 2nd, or second) or a\nGenericInterval object.\nTwo DiatonicIntervals are the same if their GenericIntervals\nare the same and their specifiers are the same and they should be\nif their directions are the same, but this is not checked yet.\nThe specifier is an enumeration/Specifier object.\nThe generic is an integer or GenericInterval instance.\n>>> unison = interval.DiatonicInterval(interval.Specifier.PERFECT, 1)\n>>> unison\n<music21.interval.DiatonicInterval P1>\n>>> unison.simpleName\n'P1'\n>>> unison.specifier\n<Specifier.PERFECT>\n>>> unison.generic\n<music21.interval.GenericInterval 1>\n>>> unison.direction\n<Direction.OBLIQUE: 0>\n\n\nThe first value can be a string:\n>>> major3a = interval.DiatonicInterval('major', 3)\n>>> major3a.simpleName\n'M3'\n>>> major3a.niceName\n'Major Third'\n>>> major3a.semiSimpleName\n'M3'\n>>> major3a.directedSimpleName\n'M3'\n>>> major3a.mod7inversion\n'm6'\n\n\nOr the first attribute can be a string abbreviation\n(not case sensitive, except Major vs. minor):\n>>> major3b = interval.DiatonicInterval('M', 3)\n>>> major3b.niceName\n'Major Third'\n\n\nA string can be given for the second argument (generic interval):\n>>> major3c = interval.DiatonicInterval('major', 'third')\n>>> major3c.niceName\n'Major Third'\n\n\n>>> p8 = interval.DiatonicInterval('perfect', 'octave')\n>>> p8.niceName\n'Perfect Octave'\n\n\n>>> genericTenth = interval.GenericInterval(10)\n>>> minor10 = interval.DiatonicInterval('m', genericTenth)\n>>> minor10.mod7\n'm3'\n>>> minor10.isDiatonicStep\nFalse\n>>> minor10.isStep\nFalse\n\n\n>>> aInterval = interval.DiatonicInterval('major', 2)\n>>> aInterval.isDiatonicStep\nTrue\n>>> aInterval.isStep\nTrue\n\n\n>>> augAscending = interval.DiatonicInterval('augmented', 1)\n>>> augAscending\n<music21.interval.DiatonicInterval A1>\n>>> augAscending.isDiatonicStep\nFalse\n>>> augAscending.isStep  # TODO: should this be True???\nFalse\n>>> augAscending.directedNiceName\n'Ascending Augmented Unison'\n\n\nFor Augmented Unisons, the diatonic interval is ascending while the .generic is oblique:\n>>> augAscending.direction\n<Direction.ASCENDING: 1>\n>>> augAscending.generic.direction\n<Direction.OBLIQUE: 0>\n\n\n>>> dimDescending = augAscending.reverse()\n>>> dimDescending\n<music21.interval.DiatonicInterval d1>\n>>> dimDescending.directedNiceName\n'Descending Diminished Unison'\n>>> dimDescending.direction\n<Direction.DESCENDING: -1>\n\n\nThis raises an error:\n>>> interval.DiatonicInterval('Perfect', -1)\nTraceback (most recent call last):\nmusic21.interval.IntervalException: There is no such thing as a descending Perfect Unison",
        "type": "ListItem"
    },
    {
        "text": "DiatonicInterval bases",
        "type": "Title"
    },
    {
        "text": "IntervalBase",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "DiatonicInterval read-only properties",
        "type": "Title"
    },
    {
        "text": "DiatonicInterval.",
        "type": "Title"
    },
    {
        "text": "cents",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return the number of cents in this interval.  Returns a float,\nalways assuming an equal-tempered presentation.\n>>> i = interval.DiatonicInterval('minor', 'second')\n>>> i.niceName\n'Minor Second'\n>>> i.cents\n100.0",
        "type": "ListItem"
    },
    {
        "text": "DiatonicInterval.",
        "type": "Title"
    },
    {
        "text": "directedName",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The name of the interval in abbreviated form with direction.\n>>> interval.DiatonicInterval('Minor', -6).directedName\n'm-6'",
        "type": "ListItem"
    },
    {
        "text": "DiatonicInterval.",
        "type": "Title"
    },
    {
        "text": "directedNiceName",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The name of the interval in full form with direction.\n>>> interval.DiatonicInterval('P', 11).directedNiceName\n'Ascending Perfect Eleventh'\n>>> interval.DiatonicInterval('Diminished', 'Descending Octave').directedNiceName\n'Descending Diminished Octave'",
        "type": "ListItem"
    },
    {
        "text": "DiatonicInterval.",
        "type": "Title"
    },
    {
        "text": "directedSemiSimpleName",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The name of the interval in abbreviated form with direction, reduced to one octave,\nexcept for octaves themselves\n>>> interval.DiatonicInterval('Minor', -14).directedSemiSimpleName\n'm-7'\n>>> interval.DiatonicInterval('P', 'Octave').directedSemiSimpleName\n'P8'",
        "type": "ListItem"
    },
    {
        "text": "DiatonicInterval.",
        "type": "Title"
    },
    {
        "text": "directedSemiSimpleNiceName",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The name of the interval in full form with direction.\n>>> interval.DiatonicInterval('P', 11).directedSemiSimpleNiceName\n'Ascending Perfect Fourth'\n>>> interval.DiatonicInterval('Diminished', 'Descending Octave').directedSemiSimpleNiceName\n'Descending Diminished Octave'",
        "type": "ListItem"
    },
    {
        "text": "DiatonicInterval.",
        "type": "Title"
    },
    {
        "text": "directedSimpleName",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The name of the interval in abbreviated form with direction, reduced to one octave\n>>> interval.DiatonicInterval('Minor', -14).directedSimpleName\n'm-7'",
        "type": "ListItem"
    },
    {
        "text": "DiatonicInterval.",
        "type": "Title"
    },
    {
        "text": "directedSimpleNiceName",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The name of the interval, reduced to within an octave, in full form with direction.\n>>> interval.DiatonicInterval('P', 11).directedNiceName\n'Ascending Perfect Eleventh'\n>>> interval.DiatonicInterval('Diminished', 'Descending Octave').directedNiceName\n'Descending Diminished Octave'",
        "type": "ListItem"
    },
    {
        "text": "DiatonicInterval.",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The direction of the DiatonicInterval:\n>>> interval.DiatonicInterval('Augmented', 'Twelfth').direction\n<Direction.ASCENDING: 1>\n\n\n>>> interval.DiatonicInterval('M', -2).direction\n<Direction.DESCENDING: -1>\n\n\n>>> interval.DiatonicInterval('P', 1).direction\n<Direction.OBLIQUE: 0>\n\n\nIn the absence of other evidence, assumes that augmented unisons are\nascending and diminished unisons are descending:\n>>> interval.DiatonicInterval('d', 1).direction\n<Direction.DESCENDING: -1>\n\n\n>>> interval.DiatonicInterval('A', 1).direction\n<Direction.ASCENDING: 1>\n\n\nNote that in the case of non-perfect unisons/primes, the .generic.direction\nwill be OBLIQUE while the diatonic direction may be ASCENDING, DESCENDING,\nor OBLIQUE.\n>>> interval.DiatonicInterval('A', 1).generic.direction\n<Direction.OBLIQUE: 0>",
        "type": "ListItem"
    },
    {
        "text": "DiatonicInterval.",
        "type": "Title"
    },
    {
        "text": "isDiatonicStep",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Same as GenericInterval.isDiatonicStep and .isStep\n>>> interval.DiatonicInterval('M', 2).isDiatonicStep\nTrue\n>>> interval.DiatonicInterval('P', 5).isDiatonicStep\nFalse",
        "type": "ListItem"
    },
    {
        "text": "DiatonicInterval.",
        "type": "Title"
    },
    {
        "text": "isSkip",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Same as GenericInterval.isSkip\n>>> interval.DiatonicInterval('M', 2).isSkip\nFalse\n>>> interval.DiatonicInterval('P', 5).isSkip\nTrue",
        "type": "ListItem"
    },
    {
        "text": "DiatonicInterval.",
        "type": "Title"
    },
    {
        "text": "isStep",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Same as GenericInterval.isStep and .isDiatonicStep\n>>> interval.DiatonicInterval('M', 2).isStep\nTrue\n>>> interval.DiatonicInterval('P', 5).isStep\nFalse",
        "type": "ListItem"
    },
    {
        "text": "DiatonicInterval.",
        "type": "Title"
    },
    {
        "text": "mod7",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return this interval as string of a specifier followed by a number 1-7,\nrepresenting a diatonic interval within an octave,\nbut unlike simpleDirected or simpleUndirected, turns descending\nseconds into sevenths, etc.\nFor instance, going down a minor second from C\nwould give a B, which is the same as going up a major seventh to B.\nThis method gives a string representing a diatonic interval that\nwill reach the same note as this DiatonicInterval but within an octave\nup from the basic note.\n>>> interval.DiatonicInterval('m', -2).mod7\n'M7'\n>>> interval.DiatonicInterval('m', 2).mod7\n'm2'\n>>> interval.DiatonicInterval('M', 9).mod7\n'M2'\n>>> interval.DiatonicInterval('Perfect', 'Unison').mod7\n'P1'\n>>> interval.DiatonicInterval('Perfect', 'Descending Octave').mod7\n'P1'\n>>> interval.DiatonicInterval(interval.Specifier.AUGMENTED, -4).mod7\n'd5'\n\n\nSee music21.chord.Chord.semitonesFromChordStep() for a place\nthis is used.",
        "type": "ListItem"
    },
    {
        "text": "DiatonicInterval.",
        "type": "Title"
    },
    {
        "text": "mod7inversion",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return an inversion of the interval within an octave, losing\ndirection.  Returns as a string.\n>>> interval.DiatonicInterval('M', 2).mod7inversion\n'm7'\n>>> interval.DiatonicInterval('A', 4).mod7inversion\n'd5'\n>>> interval.DiatonicInterval('P', 1).mod7inversion\n'P8'\n\n\nEverything is within an octave:\n>>> interval.DiatonicInterval('M', 9).mod7inversion\n'm7'\n\n\nDirection is lost:\n>>> interval.DiatonicInterval('d', -3).mod7inversion\n'A6'",
        "type": "ListItem"
    },
    {
        "text": "DiatonicInterval.",
        "type": "Title"
    },
    {
        "text": "name",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The name of the interval in abbreviated form without direction.\n>>> interval.DiatonicInterval('Perfect', 'Fourth').name\n'P4'\n>>> interval.DiatonicInterval(interval.Specifier.MAJOR, -6).name\n'M6'",
        "type": "ListItem"
    },
    {
        "text": "DiatonicInterval.",
        "type": "Title"
    },
    {
        "text": "niceName",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return the full form of the name of a Diatonic interval\n>>> interval.DiatonicInterval('P', 4).niceName\n'Perfect Fourth'",
        "type": "ListItem"
    },
    {
        "text": "DiatonicInterval.",
        "type": "Title"
    },
    {
        "text": "perfectable",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Is the generic component of this interval able to be made perfect?\nThat is, is this a type of unison, fourth, fifth, or octave (or larger\ncomponent).\nNote that this does not ask if THIS interval is perfect.  A diminished\nfifth is not perfect, but as a fifth it is perfectable.\nAn augmented seventh sounds like a perfect octave but no seventh can\never be perfect.\n>>> interval.DiatonicInterval('M', 2).perfectable\nFalse\n>>> interval.DiatonicInterval('P', 12).perfectable\nTrue\n>>> interval.DiatonicInterval('A', 12).perfectable\nTrue",
        "type": "ListItem"
    },
    {
        "text": "DiatonicInterval.",
        "type": "Title"
    },
    {
        "text": "semiSimpleName",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return the name of a Diatonic interval removing octaves except that\noctaves (and double octaves) themselves are 8 instead of 1\n>>> interval.DiatonicInterval('Augmented', 'Twelfth').semiSimpleName\n'A5'\n>>> interval.DiatonicInterval('Diminished', 'Descending Octave').semiSimpleName\n'd8'",
        "type": "ListItem"
    },
    {
        "text": "DiatonicInterval.",
        "type": "Title"
    },
    {
        "text": "semiSimpleNiceName",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return the full name of a Diatonic interval removing octaves except that\noctaves (and double octaves) themselves are 8 instead of 1\n>>> interval.DiatonicInterval('Augmented', 'Twelfth').semiSimpleNiceName\n'Augmented Fifth'\n>>> interval.DiatonicInterval('Diminished', 'Descending Octave').semiSimpleNiceName\n'Diminished Octave'",
        "type": "ListItem"
    },
    {
        "text": "DiatonicInterval.",
        "type": "Title"
    },
    {
        "text": "simpleName",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return the name of a Diatonic interval removing octaves\n>>> interval.DiatonicInterval('Augmented', 'Twelfth').simpleName\n'A5'",
        "type": "ListItem"
    },
    {
        "text": "DiatonicInterval.",
        "type": "Title"
    },
    {
        "text": "simpleNiceName",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return the full name of a Diatonic interval, simplifying octaves\n>>> interval.DiatonicInterval('d', 14).simpleNiceName\n'Diminished Seventh'",
        "type": "ListItem"
    },
    {
        "text": "DiatonicInterval.",
        "type": "Title"
    },
    {
        "text": "specificName",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Same as .specifier.niceName \u2014 the nice name of the specifier alone\n>>> p12 = interval.DiatonicInterval('P', -12)\n>>> p12.specificName\n'Perfect'",
        "type": "ListItem"
    },
    {
        "text": "DiatonicInterval.",
        "type": "Title"
    },
    {
        "text": "specifierAbbreviation",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns the abbreviation for the specifier.\n>>> i = interval.Interval('M-10')\n>>> d = i.diatonic\n>>> d.specifierAbbreviation\n'M'",
        "type": "ListItem"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "DiatonicInterval read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "DiatonicInterval methods",
        "type": "Title"
    },
    {
        "text": "DiatonicInterval.",
        "type": "Title"
    },
    {
        "text": "__eq__",
        "type": "UncategorizedText"
    },
    {
        "text": "other",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "True if generic, specifier, and direction are the same.\n>>> a = interval.DiatonicInterval('major', 3)\n>>> b = interval.DiatonicInterval('minor', 3)\n>>> c = interval.DiatonicInterval('major', 3)\n>>> d = interval.DiatonicInterval('diminished', 4)\n>>> a == b\nFalse\n>>> a == c\nTrue\n>>> a == d\nFalse\n>>> e = interval.DiatonicInterval('d', 4)\n>>> d == e\nTrue\n\n\nIntervals do not compare to strings:\n>>> e == 'd4'\nFalse",
        "type": "ListItem"
    },
    {
        "text": "DiatonicInterval.",
        "type": "Title"
    },
    {
        "text": "getChromatic",
        "type": "Title"
    },
    {
        "text": "\u2192 ChromaticInterval",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return a music21.interval.ChromaticInterval\nbased on the size of this Interval.\n>>> aInterval = interval.DiatonicInterval('major', 'third')\n>>> aInterval.niceName\n'Major Third'\n>>> aInterval.getChromatic()\n<music21.interval.ChromaticInterval 4>\n\n\n>>> aInterval = interval.DiatonicInterval('augmented', -5)\n>>> aInterval.niceName\n'Augmented Fifth'\n>>> aInterval.getChromatic()\n<music21.interval.ChromaticInterval -8>\n\n\n>>> aInterval = interval.DiatonicInterval('minor', 'second')\n>>> aInterval.niceName\n'Minor Second'\n>>> aInterval.getChromatic()\n<music21.interval.ChromaticInterval 1>",
        "type": "ListItem"
    },
    {
        "text": "DiatonicInterval.",
        "type": "Title"
    },
    {
        "text": "reverse",
        "type": "Title"
    },
    {
        "text": "\u2192 DiatonicInterval",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return a DiatonicInterval that is\nan inversion of this Interval.\n>>> aInterval = interval.DiatonicInterval('major', 3)\n>>> aInterval.reverse().directedName\n'M-3'\n\n\n>>> aInterval = interval.DiatonicInterval('augmented', 5)\n>>> aInterval.reverse().directedName\n'A-5'\n\n\n(Ascending) Augmented Unisons reverse to (Descending)\nDiminished Unisons and vice-versa\n>>> aug1 = interval.DiatonicInterval('augmented', 1)\n>>> aug1.direction\n<Direction.ASCENDING: 1>\n>>> aug1.directedName\n'A1'\n>>> dimUnison = aug1.reverse()\n>>> dimUnison.directedName\n'd1'\n>>> dimUnison.directedNiceName\n'Descending Diminished Unison'",
        "type": "ListItem"
    },
    {
        "text": "DiatonicInterval.",
        "type": "Title"
    },
    {
        "text": "transposePitch",
        "type": "Title"
    },
    {
        "text": "pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "inPlace",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Calls transposePitch from a full interval object.\nThis is not particularly optimized since it\nrequires creating both a ChromaticInterval\nobject and a full Interval object. But it's here for completeness.\n>>> di = interval.DiatonicInterval('P', 11)\n>>> p = pitch.Pitch('C#4')\n>>> di.transposePitch(p)\n<music21.pitch.Pitch F#5>\n\n\nPrevious pitch was unchanged.  inPlace=True changes that.\n>>> p\n<music21.pitch.Pitch C#4>\n>>> di.transposePitch(p, inPlace=True)\n>>> p\n<music21.pitch.Pitch F#5>\n\n\n\nChanged in v6: added inPlace",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from IntervalBase:",
        "type": "NarrativeText"
    },
    {
        "text": "transposeNote()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "DiatonicInterval instance variables",
        "type": "Title"
    },
    {
        "text": "DiatonicInterval.",
        "type": "Title"
    },
    {
        "text": "generic",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A GenericInterval enum representing the general interval.",
        "type": "ListItem"
    },
    {
        "text": "DiatonicInterval.",
        "type": "Title"
    },
    {
        "text": "specifier",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A Specifier enum representing the Quality of the interval.",
        "type": "ListItem"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "Direction\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.interval.",
        "type": "Title"
    },
    {
        "text": "Direction",
        "type": "Title"
    },
    {
        "text": "value",
        "type": "Title"
    },
    {
        "text": "names",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "module",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "qualname",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "type",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "start",
        "type": "Title"
    },
    {
        "text": "boundary",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "",
        "type": "ListItem"
    },
    {
        "text": "GenericInterval\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.interval.",
        "type": "Title"
    },
    {
        "text": "GenericInterval",
        "type": "Title"
    },
    {
        "text": "value",
        "type": "Title"
    },
    {
        "text": "int | str",
        "type": "Title"
    },
    {
        "text": "'Unison'",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "A GenericInterval is an interval such as Third, Seventh, Octave, or Tenth.\nConstructor takes an integer or string specifying the interval and direction.\nThe interval is not specified in half-steps, but in numeric values\nderived from interval names:\na Third is 3; a Seventh is 7, etc. String values for interval names (\u00983rd' or \u0098third')\nare generally accepted, but discouraged since not every one will work.\nstaffDistance: the number of lines or spaces apart, eg:\n\nE.g. C4 to C4 = 0;  C4 to D4 = 1;  C4 to B3 = -1\n\nTwo generic intervals are the equal if their size and direction are the same.\n>>> gi = interval.GenericInterval(8)\n>>> gi\n<music21.interval.GenericInterval 8>\n\n\n>>> third = interval.GenericInterval(3)\n>>> third.directed\n3\n>>> third.direction\n<Direction.ASCENDING: 1>\n>>> third.perfectable\nFalse\n>>> third.staffDistance\n2\n\n\nWe can also specify intervals from strings:\n>>> third = interval.GenericInterval('Third')\n>>> third\n<music21.interval.GenericInterval 3>\n>>> third.directed\n3\n\n\nor like this:\n>>> thirdDown = interval.GenericInterval('Descending Third')\n>>> thirdDown\n<music21.interval.GenericInterval -3>\n>>> thirdDown.directed\n-3\n\n\nA lot of tools for working with large intervals\n>>> twelfthDown = interval.GenericInterval(-12)\n>>> twelfthDown.niceName\n'Twelfth'\n>>> twelfthDown.perfectable\nTrue\n>>> twelfthDown.staffDistance\n-11\n>>> twelfthDown.mod7\n4\n>>> twelfthDown.directed\n-12\n>>> twelfthDown.undirected\n12\n\n\n>>> complement12 = twelfthDown.complement()\n>>> complement12.niceName\n'Fourth'\n>>> complement12.staffDistance\n3\n\n\nNote this illegal interval:\n>>> zeroth = interval.GenericInterval(0)\nTraceback (most recent call last):\nmusic21.interval.IntervalException: The Zeroth is not an interval\n\n\nHowever, this is okay:\n>>> descendingUnison = interval.GenericInterval(-1)\n>>> descendingUnison.direction\n<Direction.DESCENDING: -1>\n>>> descendingUnison.directed\n-1\n>>> descendingUnison.undirected\n1\n\n\nThis is because we don't yet know what type of unison this is: is it\na Perfect Unison or an Augmented Unison (or Augmented Prime as some prefer)?\nThus, the illegal check will be moved to a higher level Interval object.\nA second is a step:\n>>> second = interval.GenericInterval(2)\n>>> second.isDiatonicStep\nTrue\n>>> second.isStep\nTrue\n\n\nA third is not:\n>>> third = interval.GenericInterval(-3)\n>>> third.isDiatonicStep\nFalse\n>>> third.isStep\nFalse\n\n\nIntervals more than three octaves use numbers with abbreviations instead of names\n>>> threeOctaveSecond = interval.GenericInterval(23)\n>>> threeOctaveSecond.niceName\n'23rd'\n\n\n>>> threeOctaveThird = interval.GenericInterval(24)\n>>> threeOctaveThird.niceName\n'24th'\n>>> threeOctaveThird.isDiatonicStep\nFalse\n>>> threeOctaveThird.isStep\nFalse\n>>> threeOctaveThird.simpleNiceName\n'Third'\n\n\n\nChanged in v6: large intervals get abbreviations",
        "type": "ListItem"
    },
    {
        "text": "GenericInterval bases",
        "type": "Title"
    },
    {
        "text": "IntervalBase",
        "type": "ListItem"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "GenericInterval read-only properties",
        "type": "Title"
    },
    {
        "text": "GenericInterval.",
        "type": "Title"
    },
    {
        "text": "direction",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns a Direction Enum value for the direction of this interval:\n>>> interval.GenericInterval('Descending Fifth').direction\n<Direction.DESCENDING: -1>\n\n\n>>> interval.GenericInterval('Unison').direction\n<Direction.OBLIQUE: 0>\n\n\n>>> interval.GenericInterval(4).direction\n<Direction.ASCENDING: 1>",
        "type": "ListItem"
    },
    {
        "text": "GenericInterval.",
        "type": "Title"
    },
    {
        "text": "isDiatonicStep",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return True if this interval is a step (a second).\nA synonym for isStep for generic intervals.\n>>> interval.GenericInterval(-2).isDiatonicStep\nTrue\n>>> interval.GenericInterval(1).isDiatonicStep\nFalse\n>>> interval.GenericInterval(9).isDiatonicStep\nFalse\n\n\nNote that Unisons are neither steps nor skips.",
        "type": "ListItem"
    },
    {
        "text": "GenericInterval.",
        "type": "Title"
    },
    {
        "text": "isSkip",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns True if the undirected interval is bigger than a second.\n>>> interval.GenericInterval('Octave').isSkip\nTrue\n>>> interval.GenericInterval('Descending 2nd').isSkip\nFalse\n>>> interval.GenericInterval(1).isSkip\nFalse\n\n\nNote that Unisons are neither steps nor skips.",
        "type": "ListItem"
    },
    {
        "text": "GenericInterval.",
        "type": "Title"
    },
    {
        "text": "isStep",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return True if this interval is a step (a second).\nA synonym for isDiatonicStep for generic intervals.\n>>> interval.GenericInterval(2).isStep\nTrue\n>>> interval.GenericInterval(1).isStep\nFalse\n>>> interval.GenericInterval(-9).isStep\nFalse",
        "type": "ListItem"
    },
    {
        "text": "GenericInterval.",
        "type": "Title"
    },
    {
        "text": "isUnison",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns True if this interval is a Unison.\nNote that Unisons are neither steps nor skips.",
        "type": "ListItem"
    },
    {
        "text": "GenericInterval.",
        "type": "Title"
    },
    {
        "text": "mod7",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return this interval as a number 1-7, that is, within an octave,\nbut unlike simpleDirected or simpleUndirected, turn descending\nseconds into sevenths, etc.  Used for calculating step names.\nFor instance, going down a step from C, or GenericInterval(-2),\nwould give a B, which is the same as GenericInterval(7) (not counting\noctaves), but going up a step from C, or GenericInterval(2) is D, which\nis the same as going up a 9th.\n>>> interval.GenericInterval(-2).mod7\n7\n>>> interval.GenericInterval(2).mod7\n2\n>>> interval.GenericInterval(9).mod7\n2\n>>> interval.GenericInterval('Unison').mod7\n1\n>>> interval.GenericInterval('Descending Octave').mod7\n1\n>>> interval.GenericInterval(15).mod7\n1\n\n\nSee music21.chord.Chord.semitonesFromChordStep() for a place\nthis is used.",
        "type": "ListItem"
    },
    {
        "text": "GenericInterval.",
        "type": "Title"
    },
    {
        "text": "mod7inversion",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return the inversion of this interval within an octave.\nFor instance, seconds become sevenths, octaves become unisons,\nand vice-versa.\nAll are undirected intervals.\n>>> interval.GenericInterval(4).mod7inversion\n5\n>>> interval.GenericInterval('Descending Octave').mod7inversion\n1\n>>> interval.GenericInterval(9).mod7inversion\n7",
        "type": "ListItem"
    },
    {
        "text": "GenericInterval.",
        "type": "Title"
    },
    {
        "text": "niceName",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return the niceName as a string for this Interval\n>>> interval.GenericInterval(4).niceName\n'Fourth'\n>>> interval.GenericInterval(-12).niceName\n'Twelfth'\n>>> interval.GenericInterval(3).niceName\n'Third'\n\n\nExtremely large intervals get displayed as abbreviations\n>>> interval.GenericInterval(44).niceName\n'44th'\n\n\n\nChanged in v6: large numbers get the \u0098th' or \u0098rd' etc. suffix",
        "type": "ListItem"
    },
    {
        "text": "GenericInterval.",
        "type": "Title"
    },
    {
        "text": "octaves",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return the number of octaves with direction.\n>>> interval.GenericInterval(5).octaves\n0\n>>> interval.GenericInterval('Descending Ninth').octaves\n-1\n>>> interval.GenericInterval(8).octaves\n1\n>>> interval.GenericInterval(-15).octaves\n-2",
        "type": "ListItem"
    },
    {
        "text": "GenericInterval.",
        "type": "Title"
    },
    {
        "text": "perfectable",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns True if the interval might represent a perfect interval,\nthat is, it is a Generic 4th, 5th, or unison/octave\n>>> interval.GenericInterval(4).perfectable\nTrue\n>>> interval.GenericInterval(-12).perfectable\nTrue\n>>> interval.GenericInterval(3).perfectable\nFalse",
        "type": "ListItem"
    },
    {
        "text": "GenericInterval.",
        "type": "Title"
    },
    {
        "text": "semiSimpleDirected",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return the same as semiSimpleUndirected but with descending intervals\nas a negative number\n>>> interval.GenericInterval('Descending Ninth').semiSimpleDirected\n-2\n>>> interval.GenericInterval(8).semiSimpleDirected\n8\n>>> interval.GenericInterval(-15).semiSimpleDirected\n-8\n>>> interval.GenericInterval(-8).semiSimpleDirected\n-8",
        "type": "ListItem"
    },
    {
        "text": "GenericInterval.",
        "type": "Title"
    },
    {
        "text": "semiSimpleNiceName",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return the niceName as a string for this Interval's semiSimple form\n>>> interval.GenericInterval(4).semiSimpleNiceName\n'Fourth'\n>>> interval.GenericInterval(-12).semiSimpleNiceName\n'Fifth'\n>>> interval.GenericInterval(8).semiSimpleNiceName\n'Octave'",
        "type": "ListItem"
    },
    {
        "text": "GenericInterval.",
        "type": "Title"
    },
    {
        "text": "semiSimpleUndirected",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Same as simpleUndirected, but allows octaves and double octaves, etc.\nto remain 8, which is useful for a\nnumber of parallel octave vs. unison routines.\n>>> interval.GenericInterval('Descending Ninth').semiSimpleUndirected\n2\n>>> interval.GenericInterval(8).semiSimpleUndirected\n8\n>>> interval.GenericInterval(-15).semiSimpleUndirected\n8",
        "type": "ListItem"
    },
    {
        "text": "GenericInterval.",
        "type": "Title"
    },
    {
        "text": "simpleDirected",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return the directed distance within an octave\n>>> interval.GenericInterval('Descending Ninth').simpleDirected\n-2\n>>> interval.GenericInterval(8).simpleDirected\n1\n>>> interval.GenericInterval(-8).simpleDirected\n1",
        "type": "ListItem"
    },
    {
        "text": "GenericInterval.",
        "type": "Title"
    },
    {
        "text": "simpleNiceName",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return the niceName as a string for this Interval's simple form\n>>> interval.GenericInterval(4).simpleNiceName\n'Fourth'\n>>> interval.GenericInterval(-12).simpleNiceName\n'Fifth'\n>>> interval.GenericInterval(8).simpleNiceName\n'Unison'",
        "type": "ListItem"
    },
    {
        "text": "GenericInterval.",
        "type": "Title"
    },
    {
        "text": "simpleUndirected",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return the undirected distance within an octave\n>>> interval.GenericInterval('Descending Ninth').simpleUndirected\n2\n>>> interval.GenericInterval(8).simpleUndirected\n1",
        "type": "ListItem"
    },
    {
        "text": "GenericInterval.",
        "type": "Title"
    },
    {
        "text": "staffDistance",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Return the number of spaces/stafflines that this\ninterval represents.  A unison is 0, an ascending second is 1,\na descending third is -2, etc.\nUseful for interval arithmetic\n>>> interval.GenericInterval('Ascending Third').staffDistance\n2\n>>> interval.GenericInterval(-8).staffDistance\n-7\n>>> interval.GenericInterval(1).staffDistance\n0",
        "type": "ListItem"
    },
    {
        "text": "GenericInterval.",
        "type": "Title"
    },
    {
        "text": "undirected",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns the absolute value of self.directed.  Read-only\n>>> sixthDown = interval.GenericInterval(-6)\n>>> sixthDown.undirected\n6",
        "type": "ListItem"
    },
    {
        "text": "GenericInterval.",
        "type": "Title"
    },
    {
        "text": "undirectedOctaves",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns the number of octaves (without direction) for an interval\n>>> interval.GenericInterval(5).undirectedOctaves\n0\n>>> interval.GenericInterval('Descending Ninth').undirectedOctaves\n1\n>>> interval.GenericInterval(8).undirectedOctaves\n1\n>>> interval.GenericInterval(-15).undirectedOctaves\n2",
        "type": "ListItem"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "GenericInterval read/write properties",
        "type": "Title"
    },
    {
        "text": "GenericInterval.",
        "type": "Title"
    },
    {
        "text": "directed",
        "type": "NarrativeText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Synonym for self.value\n>>> sixthDown = interval.GenericInterval(-6)\n>>> sixthDown.directed\n-6\n>>> sixthDown.directed = 2\n>>> sixthDown.value\n2",
        "type": "ListItem"
    },
    {
        "text": "GenericInterval.",
        "type": "Title"
    },
    {
        "text": "value",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "The size of this interval as an integer.  Synonym for self.directed\n>>> interval.GenericInterval('Descending Sixth').value\n-6",
        "type": "ListItem"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "GenericInterval methods",
        "type": "Title"
    },
    {
        "text": "GenericInterval.",
        "type": "Title"
    },
    {
        "text": "__eq__",
        "type": "UncategorizedText"
    },
    {
        "text": "other",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "True if value and direction are the same.\n>>> a = interval.GenericInterval('Third')\n>>> b = interval.GenericInterval(-3)\n>>> c = interval.GenericInterval(3)\n>>> d = interval.GenericInterval(6)\n>>> a == b\nFalse\n>>> a == a == c\nTrue\n>>> b == c\nFalse\n>>> a != d\nTrue\n>>> a in [b, c, d]\nTrue\n\n\n>>> a == ''\nFalse\n>>> a is None\nFalse",
        "type": "ListItem"
    },
    {
        "text": "GenericInterval.",
        "type": "Title"
    },
    {
        "text": "complement",
        "type": "Title"
    },
    {
        "text": "\u2192 GenericInterval",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns a new GenericInterval object where 3rds are 6ths, etc.\n>>> third = interval.GenericInterval('Third')\n>>> third.complement()\n<music21.interval.GenericInterval 6>\n\n\nNote that currently direction is lost after a complement relationship:\n>>> fourth = interval.GenericInterval(-4)\n>>> fourthComp = fourth.complement()\n>>> fourthComp\n<music21.interval.GenericInterval 5>\n>>> fourthComp.directed\n5\n\n\nCalled more than once, this may return the exact identical object:\n>>> fourthComp.complement() is fourthComp.complement()\nTrue",
        "type": "ListItem"
    },
    {
        "text": "GenericInterval.",
        "type": "Title"
    },
    {
        "text": "getDiatonic",
        "type": "Title"
    },
    {
        "text": "specifier",
        "type": "Title"
    },
    {
        "text": "Specifier | str",
        "type": "Title"
    },
    {
        "text": "\u2192 DiatonicInterval",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given a specifier, return a DiatonicInterval object.\nSpecifier should be provided as an interval.Specifier enumeration or\na string name, such as \u0098dd', \u0098M', or \u0098perfect'.\n>>> third = interval.GenericInterval('Third')\n>>> third.getDiatonic(interval.Specifier.MAJOR)\n<music21.interval.DiatonicInterval M3>\n>>> third.getDiatonic('minor')\n<music21.interval.DiatonicInterval m3>\n>>> third.getDiatonic('d')\n<music21.interval.DiatonicInterval d3>\n>>> third.getDiatonic(interval.Specifier.TRPAUG)\n<music21.interval.DiatonicInterval AAA3>\n\n\nOld in, specifier values are also allowed\n>>> third.getDiatonic(2)\n<music21.interval.DiatonicInterval M3>\n\n\n>>> fifth = interval.GenericInterval('fifth')\n>>> fifth.getDiatonic('perfect')\n<music21.interval.DiatonicInterval P5>\n\n\n>>> fifth.getDiatonic('major')\nTraceback (most recent call last):\nmusic21.interval.IntervalException: Cannot create a 'Major Fifth'",
        "type": "ListItem"
    },
    {
        "text": "GenericInterval.",
        "type": "Title"
    },
    {
        "text": "reverse",
        "type": "Title"
    },
    {
        "text": "\u2192 GenericInterval",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns a new GenericInterval object that is inverted.\n>>> aInterval = interval.GenericInterval('Third')\n>>> aInterval.reverse()\n<music21.interval.GenericInterval -3>\n\n\n>>> aInterval = interval.GenericInterval(-13)\n>>> aInterval.direction\n<Direction.DESCENDING: -1>\n>>> aInterval.reverse()\n<music21.interval.GenericInterval 13>\n\n\nUnisons invert to unisons\n>>> aInterval = interval.GenericInterval(1)\n>>> aInterval.reverse()\n<music21.interval.GenericInterval 1>",
        "type": "ListItem"
    },
    {
        "text": "GenericInterval.",
        "type": "Title"
    },
    {
        "text": "transposePitch",
        "type": "Title"
    },
    {
        "text": "pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "inPlace",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "transpose a pitch, retaining the accidental if any.\n>>> aPitch = pitch.Pitch('g4')\n>>> genericFifth = interval.GenericInterval(5)\n>>> bPitch = genericFifth.transposePitch(aPitch)\n>>> bPitch\n<music21.pitch.Pitch D5>\n\n\nIf inPlace is True then applied to the current pitch:\n>>> gPitch = pitch.Pitch('g4')\n>>> genericFifth = interval.GenericInterval(5)\n>>> genericFifth.transposePitch(gPitch, inPlace=True)\n>>> gPitch\n<music21.pitch.Pitch D5>\n\n\nA generic interval transformation retains accidentals:\n>>> a2 = pitch.Pitch('B-')\n>>> cPitch = genericFifth.transposePitch(a2)\n>>> cPitch\n<music21.pitch.Pitch F->\n>>> a2.octave == cPitch.octave\nTrue\n\n\nCan be done inPlace as well, in which case, nothing is returned:\n>>> gSharp = pitch.Pitch('g#4')\n>>> genericFifth = interval.GenericInterval(5)\n>>> genericFifth.transposePitch(gSharp, inPlace=True)\n>>> gSharp\n<music21.pitch.Pitch D#5>",
        "type": "ListItem"
    },
    {
        "text": "GenericInterval.",
        "type": "Title"
    },
    {
        "text": "transposePitchKeyAware",
        "type": "Title"
    },
    {
        "text": "pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "key.KeySignature | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "inPlace",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Transposes a pitch while remaining aware of its key context,\nfor modal transposition:\nIf k is None, works the same as .transposePitch:\n>>> aPitch = pitch.Pitch('g4')\n>>> genericFifth = interval.GenericInterval(5)\n>>> bPitch = genericFifth.transposePitchKeyAware(aPitch, None)\n>>> bPitch\n<music21.pitch.Pitch D5>\n\n\nBut if a key or keySignature (such as one from .getContextByClass(key.KeySignature))\nis given, then the fun begins\u2026\n>>> fis = pitch.Pitch('F#4')\n>>> e = pitch.Pitch('E')\n>>> gMaj = key.Key('G')\n>>> genericStep = interval.GenericInterval('second')\n>>> genericStep.transposePitchKeyAware(fis, gMaj)\n<music21.pitch.Pitch G4>\n>>> genericStep.transposePitchKeyAware(e, gMaj)\n<music21.pitch.Pitch F#>\n\n\nIf a pitch already has an accidental that contradicts the current\nkey, the difference between that pitch and the new key is applied\nto the new pitch:\n>>> fNat = pitch.Pitch('F4')\n>>> genericStep.transposePitchKeyAware(fNat, gMaj)\n<music21.pitch.Pitch G-4>\n\n\ninPlace should work:\n>>> genericStep.transposePitchKeyAware(fis, gMaj, inPlace=True)\n>>> fis\n<music21.pitch.Pitch G4>\n\n\nThis is used for Stream.transpose when a GenericInterval is given:\n>>> s = converter.parse('tinyNotation: 4/4 d4 e f f# g1 a-4 g b- a c1')\n>>> s.measure(1).insert(0, key.Key('G'))\n>>> s.measure(3).insert(0, key.Key('c'))\n>>> s2 = s.transpose(interval.GenericInterval(2))\n>>> s2.show('text')\n{0.0} <music21.stream.Measure 1 offset=0.0>\n    {0.0} <music21.clef.TrebleClef>\n    {0.0} <music21.key.Key of G major>\n    {0.0} <music21.meter.TimeSignature 4/4>\n    {0.0} <music21.note.Note E>\n    {1.0} <music21.note.Note F#>\n    {2.0} <music21.note.Note G->\n    {3.0} <music21.note.Note G>\n{4.0} <music21.stream.Measure 2 offset=4.0>\n    {0.0} <music21.note.Note A>\n{8.0} <music21.stream.Measure 3 offset=8.0>\n    {0.0} <music21.key.Key of c minor>\n    {0.0} <music21.note.Note B->\n    {1.0} <music21.note.Note A->\n    {2.0} <music21.note.Note C>\n    {3.0} <music21.note.Note B>\n{12.0} <music21.stream.Measure 4 offset=12.0>\n    {0.0} <music21.note.Note D>\n    {4.0} <music21.bar.Barline type=final>\n\n\nDoes not take into account harmonic or melodic minor.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from IntervalBase:",
        "type": "NarrativeText"
    },
    {
        "text": "transposeNote()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "GenericInterval instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "IntervalBase\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.interval.",
        "type": "Title"
    },
    {
        "text": "IntervalBase",
        "type": "Title"
    },
    {
        "text": "id",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "int",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "groups",
        "type": "Title"
    },
    {
        "text": "Groups | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "sites",
        "type": "Title"
    },
    {
        "text": "Sites | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "duration",
        "type": "Title"
    },
    {
        "text": "Duration | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "activeSite",
        "type": "Title"
    },
    {
        "text": "stream.Stream | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "style",
        "type": "Title"
    },
    {
        "text": "Style | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "editorial",
        "type": "Title"
    },
    {
        "text": "Editorial | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "OffsetQL",
        "type": "Title"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "quarterLength",
        "type": "Title"
    },
    {
        "text": "OffsetQLIn | None",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "**",
        "type": "UncategorizedText"
    },
    {
        "text": "keywords",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "General base class for inheritance.",
        "type": "ListItem"
    },
    {
        "text": "IntervalBase bases",
        "type": "Title"
    },
    {
        "text": "Music21Object",
        "type": "ListItem"
    },
    {
        "text": "ProtoM21Object",
        "type": "ListItem"
    },
    {
        "text": "IntervalBase read-only properties",
        "type": "Title"
    },
    {
        "text": "Read-only properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "beat beatDuration beatStr beatStrength hasEditorialInformation hasStyleInformation measureNumber",
        "type": "Table"
    },
    {
        "text": "Read-only properties inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSet classes",
        "type": "Table"
    },
    {
        "text": "IntervalBase read/write properties",
        "type": "Title"
    },
    {
        "text": "Read/write properties inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "activeSite derivation duration editorial id offset priority quarterLength seconds style",
        "type": "Table"
    },
    {
        "text": "IntervalBase methods",
        "type": "Title"
    },
    {
        "text": "abstract",
        "type": "Title"
    },
    {
        "text": "IntervalBase.",
        "type": "Title"
    },
    {
        "text": "reverse",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "IntervalBase does not know how to do this, so it must be overridden in\nderived classes.",
        "type": "ListItem"
    },
    {
        "text": "IntervalBase.",
        "type": "Title"
    },
    {
        "text": "transposeNote",
        "type": "Title"
    },
    {
        "text": "note1",
        "type": "Title"
    },
    {
        "text": "note.Note",
        "type": "Title"
    },
    {
        "text": "\u2192 note.Note",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Uses self.transposePitch to do the same to a note.\n>>> n1 = note.Note('C#4', quarterLength=2.0)\n>>> i = interval.Interval('d5')\n>>> n2 = i.transposeNote(n1)\n>>> n2\n<music21.note.Note G>\n>>> n2.pitch\n<music21.pitch.Pitch G4>\n>>> n2.duration.type\n'half'",
        "type": "ListItem"
    },
    {
        "text": "abstract",
        "type": "Title"
    },
    {
        "text": "IntervalBase.",
        "type": "Title"
    },
    {
        "text": "transposePitch",
        "type": "Title"
    },
    {
        "text": "pitch1",
        "type": "Title"
    },
    {
        "text": "pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "inPlace",
        "type": "Title"
    },
    {
        "text": "bool",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "IntervalBase does not know how to do this, so it must be overridden in\nderived classes.",
        "type": "ListItem"
    },
    {
        "text": "Methods inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "__eq__() clearCache() containerHierarchy() contextSites() getAllContextsByClass() getContextByClass() getOffsetBySite() getOffsetInHierarchy() getSpannerSites() informSites() mergeAttributes() next() previous() purgeLocations() purgeOrphans() setOffsetBySite() show() sortTuple() splitAtDurations() splitAtQuarterLength() splitByQuarterLengths() write()",
        "type": "Table"
    },
    {
        "text": "Methods inherited from ProtoM21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "isClassOrSubclass()",
        "type": "Table"
    },
    {
        "text": "IntervalBase instance variables",
        "type": "Title"
    },
    {
        "text": "Instance variables inherited from Music21Object:",
        "type": "NarrativeText"
    },
    {
        "text": "classSortOrder groups isStream sites",
        "type": "Table"
    },
    {
        "text": "Specifier\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "music21.interval.",
        "type": "Title"
    },
    {
        "text": "Specifier",
        "type": "Title"
    },
    {
        "text": "value",
        "type": "Title"
    },
    {
        "text": "names",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "module",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "qualname",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "type",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "start",
        "type": "Title"
    },
    {
        "text": "boundary",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "An enumeration for \u009cspecifiers\u009d such as Major, Minor, etc.\nthat has some special properties.\n>>> from music21.interval import Specifier\n>>> Specifier.PERFECT\n<Specifier.PERFECT>\n\n\nValue numbers are arbitrary and just there for backwards compatibility\nwith pre v6 work:\n>>> Specifier.PERFECT.value\n1\n>>> Specifier.PERFECT.name\n'PERFECT'\n\n\n>>> str(Specifier.PERFECT)\n'P'\n>>> str(Specifier.MINOR)\n'm'\n>>> str(Specifier.DBLDIM)\n'dd'\n>>> Specifier.DBLDIM.niceName\n'Doubly-Diminished'",
        "type": "ListItem"
    },
    {
        "text": "Functions\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "music21.interval.",
        "type": "Title"
    },
    {
        "text": "notesToChromatic",
        "type": "Title"
    },
    {
        "text": "n1",
        "type": "Title"
    },
    {
        "text": "pitch.Pitch | note.Note",
        "type": "Title"
    },
    {
        "text": "n2",
        "type": "Title"
    },
    {
        "text": "pitch.Pitch | note.Note",
        "type": "Title"
    },
    {
        "text": "\u2192 ChromaticInterval",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given two Note objects,\nreturns a ChromaticInterval object.\nWorks equally well with Pitch objects.\n>>> aNote = note.Note('c4')\n>>> bNote = note.Note('g#5')\n>>> interval.notesToChromatic(aNote, bNote)\n<music21.interval.ChromaticInterval 20>\n\n\n>>> aPitch = pitch.Pitch('c#4')\n>>> bPitch = pitch.Pitch('f-5')\n>>> bInterval = interval.notesToChromatic(aPitch, bPitch)\n>>> bInterval\n<music21.interval.ChromaticInterval 15>",
        "type": "ListItem"
    },
    {
        "text": "music21.interval.",
        "type": "Title"
    },
    {
        "text": "intervalsToDiatonic",
        "type": "Title"
    },
    {
        "text": "gInt",
        "type": "Title"
    },
    {
        "text": "GenericInterval",
        "type": "Title"
    },
    {
        "text": "cInt",
        "type": "Title"
    },
    {
        "text": "ChromaticInterval",
        "type": "Title"
    },
    {
        "text": "\u2192 DiatonicInterval",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given a GenericInterval and\na ChromaticInterval object,\nreturn a DiatonicInterval.\n>>> aInterval = interval.GenericInterval('descending fifth')\n>>> bInterval = interval.ChromaticInterval(-7)\n>>> cInterval = interval.intervalsToDiatonic(aInterval, bInterval)\n>>> cInterval\n<music21.interval.DiatonicInterval P5>",
        "type": "ListItem"
    },
    {
        "text": "music21.interval.",
        "type": "Title"
    },
    {
        "text": "intervalFromGenericAndChromatic",
        "type": "Title"
    },
    {
        "text": "gInt",
        "type": "Title"
    },
    {
        "text": "GenericInterval | int",
        "type": "Title"
    },
    {
        "text": "cInt",
        "type": "Title"
    },
    {
        "text": "ChromaticInterval",
        "type": "Title"
    },
    {
        "text": "int",
        "type": "Title"
    },
    {
        "text": "float",
        "type": "Title"
    },
    {
        "text": "\u2192 Interval",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given a GenericInterval and a\nChromaticInterval object, return\na full Interval.\n>>> aInterval = interval.GenericInterval('descending fifth')\n>>> bInterval = interval.ChromaticInterval(-8)\n>>> cInterval = interval.intervalFromGenericAndChromatic(aInterval, bInterval)\n>>> cInterval\n<music21.interval.Interval A-5>\n\n\n>>> cInterval.name\n'A5'\n>>> cInterval.directedName\n'A-5'\n>>> cInterval.directedNiceName\n'Descending Augmented Fifth'\n\n\n>>> interval.intervalFromGenericAndChromatic(3, 4)\n<music21.interval.Interval M3>\n>>> interval.intervalFromGenericAndChromatic(3, 3)\n<music21.interval.Interval m3>\n\n\n>>> interval.intervalFromGenericAndChromatic(5, 6)\n<music21.interval.Interval d5>\n>>> interval.intervalFromGenericAndChromatic(5, 5)\n<music21.interval.Interval dd5>\n>>> interval.intervalFromGenericAndChromatic(-2, -2)\n<music21.interval.Interval M-2>\n\n\n>>> interval.intervalFromGenericAndChromatic(1, 0.5)\n<music21.interval.Interval A1 (-50c)>",
        "type": "ListItem"
    },
    {
        "text": "music21.interval.",
        "type": "Title"
    },
    {
        "text": "add",
        "type": "NarrativeText"
    },
    {
        "text": "intervalList",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Add a list of intervals and return the composite interval\nIntervals can be Interval objects or just strings.\n(Currently not particularly efficient for large lists\u2026)\n>>> A2 = interval.Interval('A2')\n>>> P5 = interval.Interval('P5')\n\n\n>>> interval.add([A2, P5])\n<music21.interval.Interval A6>\n>>> interval.add([P5, 'm2'])\n<music21.interval.Interval m6>\n>>> interval.add(['W', 'W', 'H', 'W', 'W', 'W', 'H'])\n<music21.interval.Interval P8>\n\n\nDirection does matter:\n>>> interval.add([P5, 'P-4'])\n<music21.interval.Interval M2>",
        "type": "ListItem"
    },
    {
        "text": "music21.interval.",
        "type": "Title"
    },
    {
        "text": "convertDiatonicNumberToStep",
        "type": "Title"
    },
    {
        "text": "dn",
        "type": "Title"
    },
    {
        "text": "int",
        "type": "Title"
    },
    {
        "text": "\u2192 tuple[Literal['C', 'D', 'E', 'F', 'G', 'A', 'B'], int]",
        "type": "UncategorizedText"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Convert a diatonic number to a step name (without accidental) and an octave integer.\nThe lowest C on a B\u00c3\u00b6sendorfer Imperial Grand is assigned 1 the D above it is 2,\nE is 3, etc.  See pitch.diatonicNoteNum for more details\n>>> interval.convertDiatonicNumberToStep(15)\n('C', 2)\n>>> interval.convertDiatonicNumberToStep(23)\n('D', 3)\n>>> interval.convertDiatonicNumberToStep(0)\n('B', -1)\n>>> interval.convertDiatonicNumberToStep(1)\n('C', 0)\n\n\nExtremely high and absurdly low numbers also produce \u009cnotes\u009d.\n>>> interval.convertDiatonicNumberToStep(2100)\n('B', 299)\n>>> interval.convertDiatonicNumberToStep(-19)\n('D', -3)",
        "type": "ListItem"
    },
    {
        "text": "music21.interval.",
        "type": "Title"
    },
    {
        "text": "convertGeneric",
        "type": "Title"
    },
    {
        "text": "value",
        "type": "Title"
    },
    {
        "text": "int | str",
        "type": "Title"
    },
    {
        "text": "\u2192 int",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Convert an interval specified in terms of its name (second, third)\ninto an integer. If integers are passed, assume the are correct.\n>>> interval.convertGeneric(3)\n3\n>>> interval.convertGeneric('third')\n3\n>>> interval.convertGeneric('3rd')\n3\n>>> interval.convertGeneric('octave')\n8\n>>> interval.convertGeneric('twelfth')\n12\n>>> interval.convertGeneric('descending twelfth')\n-12\n>>> interval.convertGeneric(12)\n12\n>>> interval.convertGeneric(-12)\n-12\n>>> interval.convertGeneric(1)\n1\n\n\n>>> interval.convertGeneric(None)\nTraceback (most recent call last):\nmusic21.interval.IntervalException: Cannot get a direction from None.\n\n\nStrings are not the same as numbers\u2026\n>>> interval.convertGeneric('1')\nTraceback (most recent call last):\nmusic21.interval.IntervalException: Cannot convert '1' to an interval.\n\n\nBut this works:\n>>> interval.convertGeneric('1st')\n1",
        "type": "ListItem"
    },
    {
        "text": "music21.interval.",
        "type": "Title"
    },
    {
        "text": "convertSemitoneToSpecifierGeneric",
        "type": "Title"
    },
    {
        "text": "count",
        "type": "Title"
    },
    {
        "text": "int | float",
        "type": "Title"
    },
    {
        "text": "\u2192 tuple[music21.interval.Specifier, int]",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given a number of semitones, return a default diatonic specifier, and\na number that can be used as a GenericInterval\n>>> interval.convertSemitoneToSpecifierGeneric(0)\n(<Specifier.PERFECT>, 1)\n>>> interval.convertSemitoneToSpecifierGeneric(-2)\n(<Specifier.MAJOR>, -2)\n>>> interval.convertSemitoneToSpecifierGeneric(1)\n(<Specifier.MINOR>, 2)\n>>> interval.convertSemitoneToSpecifierGeneric(7)\n(<Specifier.PERFECT>, 5)\n>>> interval.convertSemitoneToSpecifierGeneric(11)\n(<Specifier.MAJOR>, 7)\n>>> interval.convertSemitoneToSpecifierGeneric(12)\n(<Specifier.PERFECT>, 8)\n>>> interval.convertSemitoneToSpecifierGeneric(13)\n(<Specifier.MINOR>, 9)\n>>> interval.convertSemitoneToSpecifierGeneric(-15)\n(<Specifier.MINOR>, -10)\n>>> interval.convertSemitoneToSpecifierGeneric(24)\n(<Specifier.PERFECT>, 15)\n\n\nNote that the tritone is given as diminished fifth, not augmented fourth:\n>>> interval.convertSemitoneToSpecifierGeneric(6)\n(<Specifier.DIMINISHED>, 5)\n\n\nMicrotones are rounded here:\n>>> interval.convertSemitoneToSpecifierGeneric(0.4)\n(<Specifier.PERFECT>, 1)\n>>> interval.convertSemitoneToSpecifierGeneric(0.6)\n(<Specifier.MINOR>, 2)",
        "type": "ListItem"
    },
    {
        "text": "music21.interval.",
        "type": "Title"
    },
    {
        "text": "convertSemitoneToSpecifierGenericMicrotone",
        "type": "Title"
    },
    {
        "text": "count",
        "type": "Title"
    },
    {
        "text": "int | float",
        "type": "Title"
    },
    {
        "text": "\u2192 tuple[music21.interval.Specifier, int, float]",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given a number of semitones (positive or negative),\nreturn a default diatonic specifier and cent offset.\n>>> interval.convertSemitoneToSpecifierGenericMicrotone(2.5)\n(<Specifier.MAJOR>, 2, 50.0)\n>>> interval.convertSemitoneToSpecifierGenericMicrotone(-2.5)\n(<Specifier.MINOR>, -3, 50.0)\n>>> interval.convertSemitoneToSpecifierGenericMicrotone(-2.25)\n(<Specifier.MAJOR>, -2, -25.0)\n>>> interval.convertSemitoneToSpecifierGenericMicrotone(-1.0)\n(<Specifier.MINOR>, -2, 0.0)\n>>> interval.convertSemitoneToSpecifierGenericMicrotone(2.25)\n(<Specifier.MAJOR>, 2, 25.0)\n>>> interval.convertSemitoneToSpecifierGenericMicrotone(1.0)\n(<Specifier.MINOR>, 2, 0.0)\n>>> interval.convertSemitoneToSpecifierGenericMicrotone(1.75)\n(<Specifier.MAJOR>, 2, -25.0)\n>>> interval.convertSemitoneToSpecifierGenericMicrotone(1.9)\n(<Specifier.MAJOR>, 2, -10.0...)\n>>> interval.convertSemitoneToSpecifierGenericMicrotone(0.25)\n(<Specifier.PERFECT>, 1, 25.0)\n>>> interval.convertSemitoneToSpecifierGenericMicrotone(12.25)\n(<Specifier.PERFECT>, 8, 25.0)\n>>> interval.convertSemitoneToSpecifierGenericMicrotone(24.25)\n(<Specifier.PERFECT>, 15, 25.0)\n>>> interval.convertSemitoneToSpecifierGenericMicrotone(23.75)\n(<Specifier.PERFECT>, 15, -25.0)",
        "type": "ListItem"
    },
    {
        "text": "music21.interval.",
        "type": "Title"
    },
    {
        "text": "convertStaffDistanceToInterval",
        "type": "Title"
    },
    {
        "text": "staffDist",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns an integer of the generic interval number\n(P5 = 5, M3 = 3, minor 3 = 3 also) etc. from the given staff distance.\n>>> interval.convertStaffDistanceToInterval(3)\n4\n>>> interval.convertStaffDistanceToInterval(7)\n8\n>>> interval.convertStaffDistanceToInterval(0)\n1\n>>> interval.convertStaffDistanceToInterval(-1)\n-2",
        "type": "ListItem"
    },
    {
        "text": "music21.interval.",
        "type": "Title"
    },
    {
        "text": "getAbsoluteHigherNote",
        "type": "Title"
    },
    {
        "text": "note1",
        "type": "Title"
    },
    {
        "text": "note.Note | pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "note2",
        "type": "Title"
    },
    {
        "text": "note.Note | pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "\u2192 note.Note | pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given two Pitch or Note objects,\nreturns the higher element based on sounding pitch.\nIf both sounding pitches are the same, returns the first element given.\n>>> aNote = note.Note('c#3')\n>>> bNote = note.Note('d--3')\n>>> interval.getAbsoluteHigherNote(aNote, bNote)\n<music21.note.Note C#>",
        "type": "ListItem"
    },
    {
        "text": "music21.interval.",
        "type": "Title"
    },
    {
        "text": "getAbsoluteLowerNote",
        "type": "Title"
    },
    {
        "text": "note1",
        "type": "Title"
    },
    {
        "text": "note.Note | pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "note2",
        "type": "Title"
    },
    {
        "text": "note.Note | pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "\u2192 note.Note | pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given two Note or Pitch objects, returns\nthe lower element based on actual pitch.\nIf both pitches are the same, returns the first element given.\n>>> aNote = pitch.Pitch('c#3')\n>>> bNote = pitch.Pitch('d--3')\n>>> interval.getAbsoluteLowerNote(aNote, bNote)\n<music21.pitch.Pitch D--3>",
        "type": "ListItem"
    },
    {
        "text": "music21.interval.",
        "type": "Title"
    },
    {
        "text": "getWrittenHigherNote",
        "type": "Title"
    },
    {
        "text": "note1",
        "type": "Title"
    },
    {
        "text": "note.Note | pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "note2",
        "type": "Title"
    },
    {
        "text": "note.Note | pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "\u2192 note.Note | pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given two Pitch or Note objects,\nthis function returns the higher element based on diatonic note\nnumbers. If the diatonic numbers are\nthe same, returns the sounding higher element,\nor the first element if that is also the same.\n>>> cis = pitch.Pitch('C#')\n>>> deses = pitch.Pitch('D--')\n>>> higher = interval.getWrittenHigherNote(cis, deses)\n>>> higher is deses\nTrue\n\n\n>>> aPitch = pitch.Pitch('c#3')\n>>> bPitch = pitch.Pitch('d-3')\n>>> interval.getWrittenHigherNote(aPitch, bPitch)\n<music21.pitch.Pitch D-3>\n\n\n>>> aNote = note.Note('c#3')\n>>> bNote = note.Note('c3')\n>>> interval.getWrittenHigherNote(aNote, bNote) is aNote\nTrue",
        "type": "ListItem"
    },
    {
        "text": "music21.interval.",
        "type": "Title"
    },
    {
        "text": "getWrittenLowerNote",
        "type": "Title"
    },
    {
        "text": "note1",
        "type": "Title"
    },
    {
        "text": "note.Note | pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "note2",
        "type": "Title"
    },
    {
        "text": "note.Note | pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "\u2192 note.Note | pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given two Pitch or Note objects,\nreturns the lower element based on diatonic note\nnumber. If the diatonic number is\nthe same returns the sounding lower element,\nor the first element if sounding pitch is also the same.\n>>> aNote = pitch.Pitch('c#3')\n>>> bNote = pitch.Pitch('d--3')\n>>> interval.getWrittenLowerNote(aNote, bNote)\n<music21.pitch.Pitch C#3>\n\n\n>>> aNote = pitch.Pitch('c#3')\n>>> bNote = pitch.Pitch('d-3')\n>>> interval.getWrittenLowerNote(aNote, bNote)\n<music21.pitch.Pitch C#3>",
        "type": "ListItem"
    },
    {
        "text": "music21.interval.",
        "type": "Title"
    },
    {
        "text": "intervalToPythagoreanRatio",
        "type": "Title"
    },
    {
        "text": "intervalObj",
        "type": "Title"
    },
    {
        "text": "Interval",
        "type": "Title"
    },
    {
        "text": "\u2192 Fraction",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Returns the interval ratio in pythagorean tuning, always as a Fraction object.\n>>> iList = [interval.Interval(name) for name in ('P4', 'P5', 'M7', 'm23')]\n>>> iList\n[<music21.interval.Interval P4>,\n <music21.interval.Interval P5>,\n <music21.interval.Interval M7>,\n <music21.interval.Interval m23>]\n\n\n>>> [interval.intervalToPythagoreanRatio(i) for i in iList]\n[Fraction(4, 3), Fraction(3, 2), Fraction(243, 128), Fraction(2048, 243)]\n\n\nThrows an exception if no ratio can be found, such as for quarter tones.\n>>> p1, p2 = pitch.Pitch('C1'), pitch.Pitch('C1')\n>>> p2.accidental = 'half-sharp'\n\n\n>>> fiftyCent = interval.Interval(p1, p2)\n>>> fiftyCent\n<music21.interval.Interval A1 (-50c)>\n\n\n>>> interval.intervalToPythagoreanRatio(fiftyCent)\nTraceback (most recent call last):\nmusic21.interval.IntervalException: Could not find a pythagorean ratio for\n    <music21.interval.Interval A1 (-50c)>.",
        "type": "ListItem"
    },
    {
        "text": "music21.interval.",
        "type": "Title"
    },
    {
        "text": "notesToGeneric",
        "type": "Title"
    },
    {
        "text": "n1",
        "type": "Title"
    },
    {
        "text": "pitch.Pitch | note.Note",
        "type": "Title"
    },
    {
        "text": "n2",
        "type": "Title"
    },
    {
        "text": "pitch.Pitch | note.Note",
        "type": "Title"
    },
    {
        "text": "\u2192 GenericInterval",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given two Note objects,\nreturns a GenericInterval object.\nWorks equally well with Pitch objects\n>>> aNote = note.Note('c4')\n>>> bNote = note.Note('g5')\n>>> aInterval = interval.notesToGeneric(aNote, bNote)\n>>> aInterval\n<music21.interval.GenericInterval 12>\n\n\n>>> aPitch = pitch.Pitch('c#4')\n>>> bPitch = pitch.Pitch('f-5')\n>>> bInterval = interval.notesToGeneric(aPitch, bPitch)\n>>> bInterval\n<music21.interval.GenericInterval 11>",
        "type": "ListItem"
    },
    {
        "text": "music21.interval.",
        "type": "Title"
    },
    {
        "text": "notesToInterval",
        "type": "Title"
    },
    {
        "text": "n1",
        "type": "Title"
    },
    {
        "text": "n2",
        "type": "Title"
    },
    {
        "text": "\u2192 Interval",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Soon to be DEPRECATED: Call Interval Directly\nGiven two Note objects, returns an\nInterval object. The same\nfunctionality is available by calling the Interval class\nwith two Notes as arguments.\n>>> aNote = note.Note('c4')\n>>> bNote = note.Note('g5')\n>>> aInterval = interval.notesToInterval(aNote, bNote)\n>>> aInterval\n<music21.interval.Interval P12>",
        "type": "ListItem"
    },
    {
        "text": "music21.interval.",
        "type": "Title"
    },
    {
        "text": "parseSpecifier",
        "type": "Title"
    },
    {
        "text": "value",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "int",
        "type": "Title"
    },
    {
        "text": "Specifier",
        "type": "Title"
    },
    {
        "text": "\u2192 Specifier",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Given an integer or a string representing a \u009cspecifier\u009d (major, minor,\nperfect, diminished, etc.), return the Specifier.\n>>> interval.parseSpecifier('p')\n<Specifier.PERFECT>\n>>> interval.parseSpecifier('P')\n<Specifier.PERFECT>\n>>> interval.parseSpecifier('M')\n<Specifier.MAJOR>\n>>> interval.parseSpecifier('major')\n<Specifier.MAJOR>\n>>> interval.parseSpecifier('m')\n<Specifier.MINOR>\n>>> interval.parseSpecifier('Augmented')\n<Specifier.AUGMENTED>\n>>> interval.parseSpecifier('a')\n<Specifier.AUGMENTED>\n\n\nThis is not very useful, but there for completeness:\n>>> interval.parseSpecifier(interval.Specifier.MAJOR)\n<Specifier.MAJOR>\n\n\nThis is the same as calling a Specifier by value:\n>>> interval.parseSpecifier(3)\n<Specifier.MINOR>\n\n\nWhy? because\u2026\n>>> interval.Specifier.MINOR.value\n3\n\n\nUnparsable strings raise an IntervalException:\n>>> interval.parseSpecifier('Zebra')\nTraceback (most recent call last):\nmusic21.interval.IntervalException: Cannot find a match for value: 'Zebra'\n\n\nIllegal intervals raise a ValueError:\n>>> interval.parseSpecifier(None)\nTraceback (most recent call last):\nValueError: Value None must be int, str, or Specifier",
        "type": "ListItem"
    },
    {
        "text": "music21.interval.",
        "type": "Title"
    },
    {
        "text": "subtract",
        "type": "Title"
    },
    {
        "text": "intervalList",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "Starts with the first interval and subtracts the\nfollowing intervals from it:\n>>> interval.subtract(['P5', 'M3'])\n<music21.interval.Interval m3>\n>>> interval.subtract(['P4', 'd3'])\n<music21.interval.Interval A2>\n\n\n>>> m2Object = interval.Interval('m2')\n>>> interval.subtract(['M6', 'm2', m2Object])\n<music21.interval.Interval AA4>\n>>> interval.subtract(['P4', 'M-2'])\n<music21.interval.Interval P5>\n>>> interval.subtract(['A2', 'A2'])\n<music21.interval.Interval P1>\n>>> interval.subtract(['A1', 'P1'])\n<music21.interval.Interval A1>\n\n\n>>> interval.subtract(['P8', 'P1'])\n<music21.interval.Interval P8>\n>>> interval.subtract(['P8', 'd2'])\n<music21.interval.Interval A7>\n>>> interval.subtract(['P8', 'A1'])\n<music21.interval.Interval d8>\n\n\n>>> a = interval.subtract(['P5', 'A5'])\n>>> a.niceName\n'Diminished Unison'\n>>> a.directedNiceName\n'Descending Diminished Unison'\n>>> a.chromatic.semitones\n-1",
        "type": "ListItem"
    },
    {
        "text": "music21.interval.",
        "type": "Title"
    },
    {
        "text": "transposeNote",
        "type": "Title"
    },
    {
        "text": "note1",
        "type": "Title"
    },
    {
        "text": "note.Note",
        "type": "Title"
    },
    {
        "text": "intervalString",
        "type": "NarrativeText"
    },
    {
        "text": "str | Interval",
        "type": "Title"
    },
    {
        "text": "\u2192 note.Note",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "To be deprecated: call n.transpose(intervalString) directly.\nGiven a Note and\nan interval string (such as \u0098P5') or an Interval object,\nreturn a new Note object at the appropriate pitch level.\n>>> aNote = note.Note('c4')\n>>> bNote = interval.transposeNote(aNote, 'p5')\n>>> bNote\n<music21.note.Note G>\n>>> bNote.pitch\n<music21.pitch.Pitch G4>\n\n\n>>> aNote = note.Note('f#4')\n>>> bNote = interval.transposeNote(aNote, 'm2')\n>>> bNote\n<music21.note.Note G>",
        "type": "ListItem"
    },
    {
        "text": "music21.interval.",
        "type": "Title"
    },
    {
        "text": "transposePitch",
        "type": "Title"
    },
    {
        "text": "pitch1",
        "type": "Title"
    },
    {
        "text": "pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "interval1",
        "type": "Title"
    },
    {
        "text": "str | Interval",
        "type": "Title"
    },
    {
        "text": "inPlace",
        "type": "Title"
    },
    {
        "text": "False",
        "type": "Title"
    },
    {
        "text": "\u2192 pitch.Pitch",
        "type": "Title"
    },
    {
        "text": "\u00c2\u00b6",
        "type": "UncategorizedText"
    },
    {
        "text": "DEPRECATED: call p.transpose(interval1) directly\nGiven a Pitch\nand a Interval object (Not another class such\nas ChromaticInterval) or a string such as \u0098P5' or a number such as 6 (=tritone),\nreturn a new Pitch object at the appropriate pitch level.\n>>> aPitch = pitch.Pitch('C4')\n>>> P5 = interval.Interval('P5')\n>>> bPitch = interval.transposePitch(aPitch, P5)\n>>> bPitch\n<music21.pitch.Pitch G4>\n>>> bInterval = interval.Interval('P-5')\n>>> cPitch = interval.transposePitch(aPitch, bInterval)\n>>> cPitch\n<music21.pitch.Pitch F3>\n\n\nPitches with implicit octaves should work,\n>>> dPitch = pitch.Pitch('G')\n>>> ePitch = interval.transposePitch(dPitch, P5)\n>>> ePitch\n<music21.pitch.Pitch D>\n\n\nCan be done inPlace as well\n>>> C4 = pitch.Pitch('C4')\n>>> interval.transposePitch(C4, P5, inPlace=True)\n>>> C4\n<music21.pitch.Pitch G4>\n\n\n\nChanged in v6: added inPlace parameter",
        "type": "ListItem"
    },
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "Module Reference \u00bb",
        "type": "ListItem"
    },
    {
        "text": "music21.interval",
        "type": "ListItem"
    },
    {
        "text": "\u00a9 Copyright 2006-2023 Michael Scott Asato Cuthbert.\n      Last updated on Jun 12, 2023.",
        "type": "NarrativeText"
    }
]