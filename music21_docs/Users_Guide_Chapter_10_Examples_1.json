[
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "User's Guide \u00bb",
        "type": "ListItem"
    },
    {
        "text": "User's Guide, Chapter 10: Examples 1",
        "type": "ListItem"
    },
    {
        "text": "Previous topic",
        "type": "Title"
    },
    {
        "text": "User's Guide, Chapter 9: Chordify",
        "type": "Title"
    },
    {
        "text": "Next topic",
        "type": "Title"
    },
    {
        "text": "User's Guide, Chapter 11: Corpus Searching",
        "type": "Title"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "User's Guide, Chapter 10: Examples 1\nWhere do Chords move to?",
        "type": "ListItem"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "About music21",
        "type": "ListItem"
    },
    {
        "text": "User's Guide\nUser's Guide: Table of Contents\nUser's Guide, Chapter 1: Installing and Getting Started with music21\nUser's Guide, Chapter 2: Notes\nUser's Guide, Chapter 3: Pitches, Durations, and Notes again\nUser's Guide, Chapter 4: Lists, Streams (I) and Output\nUser's Guide, Chapter 5: Lists of Lists, Functions, and Recursion\nUser's Guide, Chapter 6: Streams (II): Hierarchies, Recursion, and Flattening\nUser's Guide, Chapter 7: Chords\nUser's Guide, Chapter 8: Installing MusicXML Readers and File Formats (1)\nUser's Guide, Chapter 9: Chordify\nUser's Guide, Chapter 10: Examples 1\nUser's Guide, Chapter 11: Corpus Searching\nUser's Guide, Chapter 12: Getting Back to Basics: The Music21Object\nUser's Guide, Chapter 13: More Music21Object Attributes and Properties\nUser's Guide: Chapter 14: Time Signatures and Beats\nUser's Guide, Chapter 15: Keys and KeySignatures\nUser's Guide, Chapter 16: TinyNotation\nUser's Guide: Chapter 17: Derivations\nUser's Guide: Chapter 18: Intervals\nUser's Guide, Chapter 19: Advanced Durations (Complex and Tuplets)\nUser's Guide, Chapter 20: Examples 2\nUser's Guide, Chapter 21: Ordering and Sorting of Stream Elements\nUser's Guide, Chapter 22: Graphing and plotting\nUser's Guide, Chapter 23: Roman Numeral Analysis\nUser's Guide, Chapter 24: Configuring Environment Settings\nUser's Guide, Chapter 25: Post-Tonal Tools (1)\nUser's Guide, Chapter 26: Stream Iteration and Filtering\nUser's Guide, Chapter 27: Grace Notes\nUser's Guide, Chapter 28: Lyric Searching\nUser's Guide, Chapter 29: Spanners 1 (Slurs)\nUser's Guide, Chapter 30: Examples 3\nUser's Guide, Chapter 31: Clefs, Ties, and Beams\nUser's Guide, Chapter 32: Articulations\nUser's Guide, Chapter 44: Advanced Graphing (Axes, Plots, and Graphs)\nUser's Guide, Chapter 53: Advanced Corpus and Metadata Searching\nUser's Guide, Chapter 54: Extending Converter with New Formats\nUser's Guide, Chapter 55: Advanced Meter Topics\nUser's Guide, Chapter 58: Understanding Sites and Contexts\nUser's Guide, Chapter 61: TimespanTrees and Verticalities",
        "type": "ListItem"
    },
    {
        "text": "Module Reference",
        "type": "ListItem"
    },
    {
        "text": "Installation",
        "type": "ListItem"
    },
    {
        "text": "Developer Reference",
        "type": "ListItem"
    },
    {
        "text": "Documentation and tests in progress",
        "type": "ListItem"
    },
    {
        "text": "Quick search",
        "type": "Title"
    },
    {
        "text": "This Page",
        "type": "Title"
    },
    {
        "text": "Show Source",
        "type": "ListItem"
    },
    {
        "text": "User's Guide, Chapter 10: Examples 1\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "Well, that's long enough to go without doing some actual work! Let's see\nwhat is possible to do so far.|",
        "type": "NarrativeText"
    },
    {
        "text": "Where do Chords move to?\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "Let's take our favorite work so far, Bach's BWV 66.6, and see where each\nchord goes.",
        "type": "NarrativeText"
    },
    {
        "text": "We'll begin, as always, with importing music21 and parsing the work\nfrom the corpus.",
        "type": "NarrativeText"
    },
    {
        "text": "from",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "import",
        "type": "Title"
    },
    {
        "text": "corpus",
        "type": "Title"
    },
    {
        "text": "parse",
        "type": "Title"
    },
    {
        "text": "'bwv66.6'",
        "type": "UncategorizedText"
    },
    {
        "text": "Now let's chordify it.",
        "type": "NarrativeText"
    },
    {
        "text": "sChords",
        "type": "Title"
    },
    {
        "text": "chordify",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "sChords",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Part",
        "type": "Title"
    },
    {
        "text": "Soprano",
        "type": "Title"
    },
    {
        "text": "sChords is a Part containing no Chords! It has measures, which\ncontain Chords. We're going to want to see all the chords, so let's\nflatten it with .flatten().",
        "type": "NarrativeText"
    },
    {
        "text": "sFlat",
        "type": "Title"
    },
    {
        "text": "sChords",
        "type": "Title"
    },
    {
        "text": "flatten",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "sFlat",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Part",
        "type": "Title"
    },
    {
        "text": "Soprano_flat",
        "type": "Title"
    },
    {
        "text": "Inside sChords is not just chords, but also the time signatures,\netc., so let's create a Stream that only has the chords in sChords. And\nwe'll get rid of all internal barlines, measures, etc. We'll use\n.getElementsByClass('Chord') for that:",
        "type": "NarrativeText"
    },
    {
        "text": "sOnlyChords",
        "type": "Title"
    },
    {
        "text": "sFlat",
        "type": "Title"
    },
    {
        "text": "getElementsByClass",
        "type": "Title"
    },
    {
        "text": "'Chord'",
        "type": "Title"
    },
    {
        "text": "sOnlyChords",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "iterator",
        "type": "Title"
    },
    {
        "text": "StreamIterator",
        "type": "Title"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "Part",
        "type": "Title"
    },
    {
        "text": "Soprano_flat",
        "type": "Title"
    },
    {
        "text": "We are eventually going to want to display each chord, so we'll create a\nnew Stream to do so. We'll make it a Part object:",
        "type": "NarrativeText"
    },
    {
        "text": "displayPart",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Part",
        "type": "Title"
    },
    {
        "text": "id",
        "type": "Title"
    },
    {
        "text": "'displayPart'",
        "type": "Title"
    },
    {
        "text": "displayPart",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Part",
        "type": "Title"
    },
    {
        "text": "displayPart",
        "type": "Title"
    },
    {
        "text": "Now we're going to want to look at each chord and the following chord,\nso we want to go from the first chord, index 0, to the second to\nlast chord, index len(sOnlyChords) - 1, and then get each chord and\nthe next chord. We will do that with the following sequence of commands",
        "type": "NarrativeText"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "range",
        "type": "Title"
    },
    {
        "text": "len",
        "type": "Title"
    },
    {
        "text": "sOnlyChords",
        "type": "Title"
    },
    {
        "text": "):",
        "type": "UncategorizedText"
    },
    {
        "text": "thisChord",
        "type": "Title"
    },
    {
        "text": "sOnlyChords",
        "type": "Title"
    },
    {
        "text": "nextChord",
        "type": "Title"
    },
    {
        "text": "sOnlyChords",
        "type": "Title"
    },
    {
        "text": "# do something with thisChord and nextChord here",
        "type": "NarrativeText"
    },
    {
        "text": "Python hint: range(min, max) or range(max) is a \u009cgenerator\u009d\nfunction that yields every number starting with min (or zero if no\nmin is given) to one less than the maximum number. range() is a\nreally useful function, and we will use it all the time to do the same\nthing over a whole bunch of items. For instance:",
        "type": "NarrativeText"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "range",
        "type": "Title"
    },
    {
        "text": "):",
        "type": "UncategorizedText"
    },
    {
        "text": "print",
        "type": "Title"
    },
    {
        "text": "Then for each chord pair, we can create a new measure and append it to\ndisplayPart only if the first chord of each group is a triad or a\nseventh. For the purposes of making this example short, let's do it only\nif the first chord's root is \u009cA\u009d. And we can put them all in closed\nposition.",
        "type": "NarrativeText"
    },
    {
        "text": "We can create a new function to do all this and call it\nappendChordPairs()",
        "type": "NarrativeText"
    },
    {
        "text": "def",
        "type": "Title"
    },
    {
        "text": "appendChordPairs",
        "type": "Title"
    },
    {
        "text": "thisChord",
        "type": "Title"
    },
    {
        "text": "nextChord",
        "type": "Title"
    },
    {
        "text": "):",
        "type": "UncategorizedText"
    },
    {
        "text": "if",
        "type": "Title"
    },
    {
        "text": "((",
        "type": "UncategorizedText"
    },
    {
        "text": "thisChord",
        "type": "Title"
    },
    {
        "text": "isTriad",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "is",
        "type": "NarrativeText"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "or",
        "type": "Title"
    },
    {
        "text": "thisChord",
        "type": "Title"
    },
    {
        "text": "isSeventh",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "is",
        "type": "NarrativeText"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "and",
        "type": "Title"
    },
    {
        "text": "thisChord",
        "type": "Title"
    },
    {
        "text": "root",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "name",
        "type": "Title"
    },
    {
        "text": "==",
        "type": "UncategorizedText"
    },
    {
        "text": "'A'",
        "type": "UncategorizedText"
    },
    {
        "text": "):",
        "type": "UncategorizedText"
    },
    {
        "text": "closePositionThisChord",
        "type": "Title"
    },
    {
        "text": "thisChord",
        "type": "Title"
    },
    {
        "text": "closedPosition",
        "type": "Title"
    },
    {
        "text": "forceOctave",
        "type": "Title"
    },
    {
        "text": "closePositionNextChord",
        "type": "Title"
    },
    {
        "text": "nextChord",
        "type": "Title"
    },
    {
        "text": "closedPosition",
        "type": "Title"
    },
    {
        "text": "forceOctave",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "append",
        "type": "Title"
    },
    {
        "text": "closePositionThisChord",
        "type": "Title"
    },
    {
        "text": "append",
        "type": "Title"
    },
    {
        "text": "closePositionNextChord",
        "type": "Title"
    },
    {
        "text": "displayPart",
        "type": "Title"
    },
    {
        "text": "append",
        "type": "Title"
    },
    {
        "text": "Okay, so I think we have this set up. Let's replace \u009c# do something\u009d\nwith appendChordPairs():",
        "type": "NarrativeText"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "range",
        "type": "Title"
    },
    {
        "text": "len",
        "type": "Title"
    },
    {
        "text": "sOnlyChords",
        "type": "Title"
    },
    {
        "text": "):",
        "type": "UncategorizedText"
    },
    {
        "text": "thisChord",
        "type": "Title"
    },
    {
        "text": "sOnlyChords",
        "type": "Title"
    },
    {
        "text": "nextChord",
        "type": "Title"
    },
    {
        "text": "sOnlyChords",
        "type": "Title"
    },
    {
        "text": "appendChordPairs",
        "type": "Title"
    },
    {
        "text": "thisChord",
        "type": "Title"
    },
    {
        "text": "nextChord",
        "type": "Title"
    },
    {
        "text": "Do we have it? Let's see if displayPart has anything in it?",
        "type": "NarrativeText"
    },
    {
        "text": "len",
        "type": "Title"
    },
    {
        "text": "displayPart",
        "type": "Title"
    },
    {
        "text": "Only seven pairs of chords, well, we did limit it to chords built on\nA. Let's see it!",
        "type": "NarrativeText"
    },
    {
        "text": "displayPart",
        "type": "Title"
    },
    {
        "text": "show",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "Learning from the last chapter, we can label the chords with Roman\nNumerals in the key of A. Obviously, the first chord is always going to\nbe \u009cI\u009d, but where does \u009cI\u009d move to? That's more interesting. We'll cheat\nand use an analysis technique we'll later see in\nChapter 23.",
        "type": "NarrativeText"
    },
    {
        "text": "keyA",
        "type": "Title"
    },
    {
        "text": "key",
        "type": "Title"
    },
    {
        "text": "Key",
        "type": "Title"
    },
    {
        "text": "'A'",
        "type": "UncategorizedText"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "displayPart",
        "type": "Title"
    },
    {
        "text": "recurse",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "getElementsByClass",
        "type": "Title"
    },
    {
        "text": "'Chord'",
        "type": "Title"
    },
    {
        "text": "):",
        "type": "UncategorizedText"
    },
    {
        "text": "rn",
        "type": "Title"
    },
    {
        "text": "roman",
        "type": "Title"
    },
    {
        "text": "romanNumeralFromChord",
        "type": "Title"
    },
    {
        "text": "keyA",
        "type": "Title"
    },
    {
        "text": "addLyric",
        "type": "Title"
    },
    {
        "text": "str",
        "type": "Title"
    },
    {
        "text": "rn",
        "type": "Title"
    },
    {
        "text": "figure",
        "type": "Title"
    },
    {
        "text": "))",
        "type": "UncategorizedText"
    },
    {
        "text": "displayPart",
        "type": "Title"
    },
    {
        "text": "show",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "Well, it's basically everything that I expected, except for that\nIII6 chord! I smell a modulation happening here. Let's make all the\npitches of that Chord pink so we can find them later. And we'll softly\nintroduce a new concept, the derivation.chain() (see\nChapter 13) to make sure that\neverything that this note comes from is also pink.",
        "type": "NarrativeText"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "displayPart",
        "type": "Title"
    },
    {
        "text": "recurse",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "getElementsByClass",
        "type": "Title"
    },
    {
        "text": "'Chord'",
        "type": "Title"
    },
    {
        "text": "):",
        "type": "UncategorizedText"
    },
    {
        "text": "if",
        "type": "Title"
    },
    {
        "text": "lyric",
        "type": "Title"
    },
    {
        "text": "==",
        "type": "UncategorizedText"
    },
    {
        "text": "'III6'",
        "type": "UncategorizedText"
    },
    {
        "text": "style",
        "type": "Title"
    },
    {
        "text": "color",
        "type": "Title"
    },
    {
        "text": "'pink'",
        "type": "Title"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "derivation",
        "type": "Title"
    },
    {
        "text": "chain",
        "type": "Title"
    },
    {
        "text": "():",
        "type": "UncategorizedText"
    },
    {
        "text": "style",
        "type": "Title"
    },
    {
        "text": "color",
        "type": "Title"
    },
    {
        "text": "'pink'",
        "type": "Title"
    },
    {
        "text": "displayPart",
        "type": "Title"
    },
    {
        "text": "show",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "Now we can find this chord more easily:",
        "type": "NarrativeText"
    },
    {
        "text": "sChords",
        "type": "Title"
    },
    {
        "text": "show",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "And we can analyze each Measure's key to show that indeed it is part of\na modulation to f# minor:",
        "type": "NarrativeText"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "sChords",
        "type": "Title"
    },
    {
        "text": "getElementsByClass",
        "type": "Title"
    },
    {
        "text": "'Measure'",
        "type": "Title"
    },
    {
        "text": "):",
        "type": "UncategorizedText"
    },
    {
        "text": "analyze",
        "type": "Title"
    },
    {
        "text": "'key'",
        "type": "Title"
    },
    {
        "text": "print",
        "type": "Title"
    },
    {
        "text": "number",
        "type": "Title"
    },
    {
        "text": "major",
        "type": "Title"
    },
    {
        "text": "major",
        "type": "Title"
    },
    {
        "text": "major",
        "type": "Title"
    },
    {
        "text": "# minor",
        "type": "Title"
    },
    {
        "text": "major",
        "type": "Title"
    },
    {
        "text": "major",
        "type": "Title"
    },
    {
        "text": "# minor",
        "type": "Title"
    },
    {
        "text": "# major",
        "type": "Title"
    },
    {
        "text": "# major",
        "type": "Title"
    },
    {
        "text": "minor",
        "type": "Title"
    },
    {
        "text": "This is a brief summary of some things we can do so far. I'd like to use\nother pieces besides this Chorale, so let's move on to\nChapter 11: Corpus Searching to\nlearn more.",
        "type": "NarrativeText"
    },
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "User's Guide \u00bb",
        "type": "ListItem"
    },
    {
        "text": "User's Guide, Chapter 10: Examples 1",
        "type": "ListItem"
    },
    {
        "text": "\u00a9 Copyright 2006-2023 Michael Scott Asato Cuthbert.\n      Last updated on Jun 12, 2023.",
        "type": "NarrativeText"
    }
]