[
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "User's Guide \u00bb",
        "type": "ListItem"
    },
    {
        "text": "User's Guide, Chapter 6: Streams (II): Hierarchies, Recursion, and Flattening",
        "type": "ListItem"
    },
    {
        "text": "Previous topic",
        "type": "Title"
    },
    {
        "text": "User's Guide, Chapter 5: Lists of Lists, Functions, and Recursion",
        "type": "Title"
    },
    {
        "text": "Next topic",
        "type": "Title"
    },
    {
        "text": "User's Guide, Chapter 7: Chords",
        "type": "Title"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "User's Guide, Chapter 6: Streams (II): Hierarchies, Recursion, and Flattening\nClasses and Subclasses\nAccessing Scores, Parts, Measures, and Notes\nRecursion in Streams\nFlattening a Stream",
        "type": "ListItem"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "About music21",
        "type": "ListItem"
    },
    {
        "text": "User's Guide\nUser's Guide: Table of Contents\nUser's Guide, Chapter 1: Installing and Getting Started with music21\nUser's Guide, Chapter 2: Notes\nUser's Guide, Chapter 3: Pitches, Durations, and Notes again\nUser's Guide, Chapter 4: Lists, Streams (I) and Output\nUser's Guide, Chapter 5: Lists of Lists, Functions, and Recursion\nUser's Guide, Chapter 6: Streams (II): Hierarchies, Recursion, and Flattening\nUser's Guide, Chapter 7: Chords\nUser's Guide, Chapter 8: Installing MusicXML Readers and File Formats (1)\nUser's Guide, Chapter 9: Chordify\nUser's Guide, Chapter 10: Examples 1\nUser's Guide, Chapter 11: Corpus Searching\nUser's Guide, Chapter 12: Getting Back to Basics: The Music21Object\nUser's Guide, Chapter 13: More Music21Object Attributes and Properties\nUser's Guide: Chapter 14: Time Signatures and Beats\nUser's Guide, Chapter 15: Keys and KeySignatures\nUser's Guide, Chapter 16: TinyNotation\nUser's Guide: Chapter 17: Derivations\nUser's Guide: Chapter 18: Intervals\nUser's Guide, Chapter 19: Advanced Durations (Complex and Tuplets)\nUser's Guide, Chapter 20: Examples 2\nUser's Guide, Chapter 21: Ordering and Sorting of Stream Elements\nUser's Guide, Chapter 22: Graphing and plotting\nUser's Guide, Chapter 23: Roman Numeral Analysis\nUser's Guide, Chapter 24: Configuring Environment Settings\nUser's Guide, Chapter 25: Post-Tonal Tools (1)\nUser's Guide, Chapter 26: Stream Iteration and Filtering\nUser's Guide, Chapter 27: Grace Notes\nUser's Guide, Chapter 28: Lyric Searching\nUser's Guide, Chapter 29: Spanners 1 (Slurs)\nUser's Guide, Chapter 30: Examples 3\nUser's Guide, Chapter 31: Clefs, Ties, and Beams\nUser's Guide, Chapter 32: Articulations\nUser's Guide, Chapter 44: Advanced Graphing (Axes, Plots, and Graphs)\nUser's Guide, Chapter 53: Advanced Corpus and Metadata Searching\nUser's Guide, Chapter 54: Extending Converter with New Formats\nUser's Guide, Chapter 55: Advanced Meter Topics\nUser's Guide, Chapter 58: Understanding Sites and Contexts\nUser's Guide, Chapter 61: TimespanTrees and Verticalities",
        "type": "ListItem"
    },
    {
        "text": "Module Reference",
        "type": "ListItem"
    },
    {
        "text": "Installation",
        "type": "ListItem"
    },
    {
        "text": "Developer Reference",
        "type": "ListItem"
    },
    {
        "text": "Documentation and tests in progress",
        "type": "ListItem"
    },
    {
        "text": "Quick search",
        "type": "Title"
    },
    {
        "text": "This Page",
        "type": "Title"
    },
    {
        "text": "Show Source",
        "type": "ListItem"
    },
    {
        "text": "User's Guide, Chapter 6: Streams (II): Hierarchies, Recursion, and Flattening\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "We ended Chapter 4 (Streams (I).) with\na Stream that was contained within another\nStream object. Let's recreate that class:",
        "type": "NarrativeText"
    },
    {
        "text": "from",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "import",
        "type": "Title"
    },
    {
        "text": "note1",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "\"C4\"",
        "type": "UncategorizedText"
    },
    {
        "text": "note1",
        "type": "Title"
    },
    {
        "text": "duration",
        "type": "Title"
    },
    {
        "text": "type",
        "type": "Title"
    },
    {
        "text": "'half'",
        "type": "Title"
    },
    {
        "text": "note2",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "\"F#4\"",
        "type": "UncategorizedText"
    },
    {
        "text": "note3",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "\"B-2\"",
        "type": "UncategorizedText"
    },
    {
        "text": "stream1",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Stream",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "stream1",
        "type": "Title"
    },
    {
        "text": "id",
        "type": "Title"
    },
    {
        "text": "'some notes'",
        "type": "Title"
    },
    {
        "text": "stream1",
        "type": "Title"
    },
    {
        "text": "append",
        "type": "Title"
    },
    {
        "text": "note1",
        "type": "Title"
    },
    {
        "text": "stream1",
        "type": "Title"
    },
    {
        "text": "append",
        "type": "Title"
    },
    {
        "text": "note2",
        "type": "Title"
    },
    {
        "text": "stream1",
        "type": "Title"
    },
    {
        "text": "append",
        "type": "Title"
    },
    {
        "text": "note3",
        "type": "Title"
    },
    {
        "text": "biggerStream",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Stream",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "note2",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "\"D#5\"",
        "type": "UncategorizedText"
    },
    {
        "text": "biggerStream",
        "type": "Title"
    },
    {
        "text": "insert",
        "type": "Title"
    },
    {
        "text": "note2",
        "type": "Title"
    },
    {
        "text": "biggerStream",
        "type": "Title"
    },
    {
        "text": "append",
        "type": "Title"
    },
    {
        "text": "stream1",
        "type": "Title"
    },
    {
        "text": "The only way to find out what was in the contained Stream that we\ndemonstrated so far was the show()\nmethod using the ('text') argument.",
        "type": "NarrativeText"
    },
    {
        "text": "biggerStream",
        "type": "Title"
    },
    {
        "text": "show",
        "type": "Title"
    },
    {
        "text": "'text'",
        "type": "Title"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "#>",
        "type": "UncategorizedText"
    },
    {
        "text": "1.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Stream",
        "type": "Title"
    },
    {
        "text": "some",
        "type": "Title"
    },
    {
        "text": "notes",
        "type": "Title"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "2.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "#>",
        "type": "UncategorizedText"
    },
    {
        "text": "3.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": ">",
        "type": "ListItem"
    },
    {
        "text": "As Chapter 4 noted, there's a way to reach the inner notes such as\nF# via the biggerStream[1][1] format, but there's a better way\nto do that in music21, and for that we need to learn about subclasses of\nStreams and subclasses in general. (Skip this if you already know about\nsuch things from other programming experience)",
        "type": "NarrativeText"
    },
    {
        "text": "Classes and Subclasses\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "An object, such as a note or pitch, is basically a collection of\ninformation along with some actions that can be performed on that\ninformation. A class is something that can make new objects of a certain\ntype (sometimes this is called a factory). We've seen classes such as\nthe note.Note class, where the lowercase note is the \u009cmodule\u009d\nthat the class Note lives in:",
        "type": "NarrativeText"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "module",
        "type": "Title"
    },
    {
        "text": "'music21.note'",
        "type": "Title"
    },
    {
        "text": "from",
        "type": "Title"
    },
    {
        "text": "'/Users/cuthbert/music21/note.py'",
        "type": "Title"
    },
    {
        "text": "print",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "<class 'music21.note.Note'>",
        "type": "Title"
    },
    {
        "text": "We create an object from a class by using the class name with ()\nafter it:",
        "type": "NarrativeText"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "As we've seen, we can sometimes put additional information into the\n(), such as a pitch name in the case of a Note:",
        "type": "NarrativeText"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "'D#5'",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "#>",
        "type": "UncategorizedText"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "help(Class)",
        "type": "Title"
    },
    {
        "text": "help",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "Help",
        "type": "Title"
    },
    {
        "text": "on",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "module",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "NotRest",
        "type": "Title"
    },
    {
        "text": "One",
        "type": "Title"
    },
    {
        "text": "of",
        "type": "Title"
    },
    {
        "text": "the",
        "type": "Title"
    },
    {
        "text": "most",
        "type": "Title"
    },
    {
        "text": "important",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "classes",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "stores",
        "type": "Title"
    },
    {
        "text": "single",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "that",
        "type": "Title"
    },
    {
        "text": "is",
        "type": "NarrativeText"
    },
    {
        "text": "not",
        "type": "Title"
    },
    {
        "text": "rest",
        "type": "Title"
    },
    {
        "text": "or",
        "type": "Title"
    },
    {
        "text": "an",
        "type": "Title"
    },
    {
        "text": "unpitched",
        "type": "Title"
    },
    {
        "text": "element",
        "type": "Title"
    },
    {
        "text": "that",
        "type": "Title"
    },
    {
        "text": "can",
        "type": "Title"
    },
    {
        "text": "be",
        "type": "NarrativeText"
    },
    {
        "text": "represented",
        "type": "NarrativeText"
    },
    {
        "text": "by",
        "type": "Title"
    },
    {
        "text": "one",
        "type": "Title"
    },
    {
        "text": "or",
        "type": "Title"
    },
    {
        "text": "more",
        "type": "Title"
    },
    {
        "text": "notational",
        "type": "Title"
    },
    {
        "text": "units",
        "type": "Title"
    },
    {
        "text": "--",
        "type": "UncategorizedText"
    },
    {
        "text": "so",
        "type": "Title"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "instance",
        "type": "Title"
    },
    {
        "text": "quarter",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "and",
        "type": "Title"
    },
    {
        "text": "# eighth-tied-to-32nd are both",
        "type": "NarrativeText"
    },
    {
        "text": "single",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "object",
        "type": "Title"
    },
    {
        "text": "***",
        "type": "UncategorizedText"
    },
    {
        "text": "............",
        "type": "UncategorizedText"
    },
    {
        "text": "***",
        "type": "UncategorizedText"
    },
    {
        "text": "Method",
        "type": "Title"
    },
    {
        "text": "resolution",
        "type": "Title"
    },
    {
        "text": "order",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "NotRest",
        "type": "Title"
    },
    {
        "text": "GeneralNote",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "base",
        "type": "Title"
    },
    {
        "text": "Music21Object",
        "type": "Title"
    },
    {
        "text": "builtins",
        "type": "Title"
    },
    {
        "text": "object",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "Note(NotRest)",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "NotRest",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "Unpitched",
        "type": "Title"
    },
    {
        "text": "Chord",
        "type": "Title"
    },
    {
        "text": "NotRest",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "NotRest",
        "type": "Title"
    },
    {
        "text": "NotRest",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "NotRest",
        "type": "Title"
    },
    {
        "text": ".beams",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "nr",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "NotRest",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "print",
        "type": "Title"
    },
    {
        "text": "nr",
        "type": "Title"
    },
    {
        "text": "beams",
        "type": "Title"
    },
    {
        "text": "beams",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "beam",
        "type": "Title"
    },
    {
        "text": "Beams",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "beam",
        "type": "Title"
    },
    {
        "text": "Beams",
        "type": "Title"
    },
    {
        "text": "But Rest is not a subclass of NotRest for obvious reasons. So a\nrest doesn't know anything about beams:",
        "type": "NarrativeText"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Rest",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "beams",
        "type": "Title"
    },
    {
        "text": "---------------------------------------------------------------------------",
        "type": "UncategorizedText"
    },
    {
        "text": "AttributeError",
        "type": "Title"
    },
    {
        "text": "Traceback",
        "type": "Title"
    },
    {
        "text": "most",
        "type": "Title"
    },
    {
        "text": "recent",
        "type": "Title"
    },
    {
        "text": "call",
        "type": "Title"
    },
    {
        "text": "last",
        "type": "Title"
    },
    {
        "text": "Input",
        "type": "Title"
    },
    {
        "text": "In",
        "type": "Title"
    },
    {
        "text": "],",
        "type": "UncategorizedText"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "cell",
        "type": "Title"
    },
    {
        "text": "line",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Rest",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "---->",
        "type": "UncategorizedText"
    },
    {
        "text": "beams",
        "type": "Title"
    },
    {
        "text": "AttributeError",
        "type": "Title"
    },
    {
        "text": "'Rest'",
        "type": "Title"
    },
    {
        "text": "object",
        "type": "Title"
    },
    {
        "text": "has",
        "type": "NarrativeText"
    },
    {
        "text": "no",
        "type": "Title"
    },
    {
        "text": "attribute",
        "type": "Title"
    },
    {
        "text": "'beams'",
        "type": "Title"
    },
    {
        "text": "But Note has properties that NotRest does not, such as\n.pitch:",
        "type": "NarrativeText"
    },
    {
        "text": "print",
        "type": "Title"
    },
    {
        "text": "nr",
        "type": "Title"
    },
    {
        "text": "pitch",
        "type": "Title"
    },
    {
        "text": "So classes and subclasses are a great way of making sure that things\nthat are mostly similar have many of the same properties, but that they\ncan have their own distinct information (attributes) and actions\n(methods). Just FYI, here's how we create a subclass. We can create\na Class called Japan and then a subclass called Okinawa (my\nancestral home) which has an additional attribute.",
        "type": "NarrativeText"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "Japan",
        "type": "Title"
    },
    {
        "text": "food",
        "type": "Title"
    },
    {
        "text": "\"sushi\"",
        "type": "Title"
    },
    {
        "text": "drink",
        "type": "Title"
    },
    {
        "text": "\"sake\"",
        "type": "Title"
    },
    {
        "text": "class",
        "type": "Title"
    },
    {
        "text": "Okinawa",
        "type": "Title"
    },
    {
        "text": "Japan",
        "type": "Title"
    },
    {
        "text": "):",
        "type": "UncategorizedText"
    },
    {
        "text": "evenBetterFood",
        "type": "Title"
    },
    {
        "text": "\"spam potstickers\"",
        "type": "Title"
    },
    {
        "text": "The (Japan) in the class definition of Okinawa means that it\ninherits everything that Japan has and more:",
        "type": "NarrativeText"
    },
    {
        "text": "Okinawa",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "print",
        "type": "Title"
    },
    {
        "text": "food",
        "type": "Title"
    },
    {
        "text": "drink",
        "type": "Title"
    },
    {
        "text": "evenBetterFood",
        "type": "Title"
    },
    {
        "text": "sushi",
        "type": "Title"
    },
    {
        "text": "sake",
        "type": "Title"
    },
    {
        "text": "spam",
        "type": "Title"
    },
    {
        "text": "potstickers",
        "type": "Title"
    },
    {
        "text": "But the joy of spam gyoza has not come to the mainland yet:",
        "type": "NarrativeText"
    },
    {
        "text": "Japan",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "print",
        "type": "Title"
    },
    {
        "text": "evenBetterFood",
        "type": "Title"
    },
    {
        "text": "---------------------------------------------------------------------------",
        "type": "UncategorizedText"
    },
    {
        "text": "AttributeError",
        "type": "Title"
    },
    {
        "text": "Traceback",
        "type": "Title"
    },
    {
        "text": "most",
        "type": "Title"
    },
    {
        "text": "recent",
        "type": "Title"
    },
    {
        "text": "call",
        "type": "Title"
    },
    {
        "text": "last",
        "type": "Title"
    },
    {
        "text": "Input",
        "type": "Title"
    },
    {
        "text": "In",
        "type": "Title"
    },
    {
        "text": "12",
        "type": "UncategorizedText"
    },
    {
        "text": "],",
        "type": "UncategorizedText"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "cell",
        "type": "Title"
    },
    {
        "text": "line",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "Japan",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "---->",
        "type": "UncategorizedText"
    },
    {
        "text": "print",
        "type": "Title"
    },
    {
        "text": "evenBetterFood",
        "type": "Title"
    },
    {
        "text": "AttributeError",
        "type": "Title"
    },
    {
        "text": "'Japan'",
        "type": "Title"
    },
    {
        "text": "object",
        "type": "Title"
    },
    {
        "text": "has",
        "type": "NarrativeText"
    },
    {
        "text": "no",
        "type": "Title"
    },
    {
        "text": "attribute",
        "type": "Title"
    },
    {
        "text": "'evenBetterFood'",
        "type": "Title"
    },
    {
        "text": "So this is how subclasses work in a nutshell. The first subclasses we\nwill be working with are the three fundamental subclasses of Stream:\nScore, Part, and Measure.",
        "type": "NarrativeText"
    },
    {
        "text": "Accessing Scores, Parts, Measures, and Notes\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "Streams provide a way to structure and position music21 objects both\nhierarchically and temporally. A Stream, or a Stream subclass such as\nMeasure, can be placed within another Stream.",
        "type": "NarrativeText"
    },
    {
        "text": "A common arrangement of nested Streams is a\nScore Stream containing one or more\nPart Streams, each Part Stream in turn\ncontaining one or more Measure Streams.",
        "type": "NarrativeText"
    },
    {
        "text": "Such an arrangement of Stream objects is the common way musical scores\nare represented in music21. For example, importing a four-part chorale\nby J. S. Bach will provide a Score object with four Part Streams, each\nPart containing multiple Measure objects. Music21 comes with a\nmusic21.corpus module that provides access to a large collection\nof scores, including all the Bach chorales. We can parse the score from\nthe corpus with the parse() function, which we\nwill discuss more in a bit.",
        "type": "NarrativeText"
    },
    {
        "text": "sBach",
        "type": "Title"
    },
    {
        "text": "corpus",
        "type": "Title"
    },
    {
        "text": "parse",
        "type": "Title"
    },
    {
        "text": "'bach/bwv57.8'",
        "type": "Title"
    },
    {
        "text": "We can access and examine elements at each level of this Score by using\nstandard Python syntax for lists within lists. Thus, we can see the\nlength of each component: first the Score which has six elements: a\nMetadata object, a\nStaffGroup object, and four\nPart objects. Then we find the length of\nfirst Part at index three which indicates 14 objects (13 of them are\nmeasures). Then within that part we find an object (a Measure) at index\n1. All of these subprograms can be accessed from looking within the same\nscore object sBach.",
        "type": "NarrativeText"
    },
    {
        "text": "len",
        "type": "Title"
    },
    {
        "text": "sBach",
        "type": "Title"
    },
    {
        "text": "len",
        "type": "Title"
    },
    {
        "text": "sBach",
        "type": "Title"
    },
    {
        "text": "])",
        "type": "UncategorizedText"
    },
    {
        "text": "14",
        "type": "UncategorizedText"
    },
    {
        "text": "len",
        "type": "Title"
    },
    {
        "text": "sBach",
        "type": "Title"
    },
    {
        "text": "][",
        "type": "UncategorizedText"
    },
    {
        "text": "])",
        "type": "UncategorizedText"
    },
    {
        "text": "But how did we know that index [3] would be a Part and index [1][1]\nwould be a measure? As writers of the tutorial, we know this piece well\nenough to know that. But as we noted above, more than just Measures\nmight be stored in a Part object (such as\nInstrument objects), and more than just\nNote and Rest objects might be stored in a Measure (such as\nTimeSignature and\nKeySignature objects). Therefore, it's much\nsafer to filter Stream and Stream subclasses by the class we seek.",
        "type": "NarrativeText"
    },
    {
        "text": "To repeat the count and select specific classes, we can use the\ngetElementsByClass() method that we\ndiscussed in Chapter 4.",
        "type": "NarrativeText"
    },
    {
        "text": "Notice how the counts deviate from the examples above.",
        "type": "NarrativeText"
    },
    {
        "text": "len",
        "type": "Title"
    },
    {
        "text": "sBach",
        "type": "Title"
    },
    {
        "text": "getElementsByClass",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Part",
        "type": "Title"
    },
    {
        "text": "))",
        "type": "UncategorizedText"
    },
    {
        "text": "len",
        "type": "Title"
    },
    {
        "text": "sBach",
        "type": "Title"
    },
    {
        "text": "getElementsByClass",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Part",
        "type": "Title"
    },
    {
        "text": ")[",
        "type": "UncategorizedText"
    },
    {
        "text": "getElementsByClass",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": "))",
        "type": "UncategorizedText"
    },
    {
        "text": "13",
        "type": "UncategorizedText"
    },
    {
        "text": "len",
        "type": "Title"
    },
    {
        "text": "sBach",
        "type": "Title"
    },
    {
        "text": "getElementsByClass",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Part",
        "type": "Title"
    },
    {
        "text": ")[",
        "type": "UncategorizedText"
    },
    {
        "text": "getElementsByClass",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": ")[",
        "type": "UncategorizedText"
    },
    {
        "text": "getElementsByClass",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "))",
        "type": "UncategorizedText"
    },
    {
        "text": "Recall from Chapter 4 that the\ngetElementsByClass() method can also take\na string representation of the last section of the class name. Thus we\ncould've rewritten the first call above as:",
        "type": "NarrativeText"
    },
    {
        "text": "len",
        "type": "Title"
    },
    {
        "text": "sBach",
        "type": "Title"
    },
    {
        "text": "getElementsByClass",
        "type": "Title"
    },
    {
        "text": "'Part'",
        "type": "Title"
    },
    {
        "text": "))",
        "type": "UncategorizedText"
    },
    {
        "text": "This way of doing things is a bit faster to code, but a little less\nsafe. Suppose, for instance there were objects of type\nstream.Measure and tape.Measure; the latter way of writing the\ncode would get both of them. (But this ambiguity is rare enough that\nit's safe enough to use the strings in most code.)",
        "type": "NarrativeText"
    },
    {
        "text": "When we introduced .getElementsByClass() we also introduced the\nconvenience properties .notes and .notesAndRests. There is a\nconvenience property for getting parts out as well:",
        "type": "NarrativeText"
    },
    {
        "text": "len",
        "type": "Title"
    },
    {
        "text": "sBach",
        "type": "Title"
    },
    {
        "text": "parts",
        "type": "Title"
    },
    {
        "text": "You might think that there should be a convenience property\n.measures to get all the measures. But the problem with that is that\nmeasure numbers would be quite different from index numbers. For\ninstance, most pieces (that don't have pickup measures) begin with\nmeasure 1, not zero. Sometimes there are measure discontinuities within\na piece (e.g., some people number first and second endings with the same\nmeasure number). For that reason, gathering Measures is best\naccomplished not with getElementsByClass(stream.Measure) but instead\nwith either the measures() method\n(returning a Stream of Parts or Measures) or the\nmeasure() method (returning a single\nMeasure).",
        "type": "NarrativeText"
    },
    {
        "text": "These are methods, not properties, so they use the () call. Let's\nlook at how we might use them:",
        "type": "NarrativeText"
    },
    {
        "text": "alto",
        "type": "Title"
    },
    {
        "text": "sBach",
        "type": "Title"
    },
    {
        "text": "parts",
        "type": "Title"
    },
    {
        "text": "# parts count from zero, so soprano is 0 and alto is 1",
        "type": "NarrativeText"
    },
    {
        "text": "excerpt",
        "type": "Title"
    },
    {
        "text": "alto",
        "type": "Title"
    },
    {
        "text": "measures",
        "type": "Title"
    },
    {
        "text": "excerpt",
        "type": "Title"
    },
    {
        "text": "show",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "measure2",
        "type": "Title"
    },
    {
        "text": "alto",
        "type": "Title"
    },
    {
        "text": "measure",
        "type": "Title"
    },
    {
        "text": "# measure not measure_s_",
        "type": "NarrativeText"
    },
    {
        "text": "measure2",
        "type": "Title"
    },
    {
        "text": "show",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "What is great about .measure() and .measures() is that they can\nwork on a whole score and not just a single part. Sometimes\ncomputational musicologists and programmers call a collection of\nmeasures across parts a \u009cmeasureStack\u009d. So let's get the measure stack\nconsisting of measure numbers 2 and 3 across all parts:",
        "type": "NarrativeText"
    },
    {
        "text": "measureStack",
        "type": "Title"
    },
    {
        "text": "sBach",
        "type": "Title"
    },
    {
        "text": "measures",
        "type": "Title"
    },
    {
        "text": "measureStack",
        "type": "Title"
    },
    {
        "text": "show",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "Recursion in Streams\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "Streams are hierarchical objects where the contained elements can\nthemselves be Streams. In order to get at each lower layer of the\nstream, a generator method on every stream called\nrecurse() will visit every element in the\nstream, starting from the beginning, and if any of the subelements are\nalso Streams, they will visit every element in that Stream.",
        "type": "NarrativeText"
    },
    {
        "text": "Let's create a simpler Stream to visualize what .recurse() does.",
        "type": "NarrativeText"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Score",
        "type": "Title"
    },
    {
        "text": "id",
        "type": "Title"
    },
    {
        "text": "'mainScore'",
        "type": "Title"
    },
    {
        "text": "p0",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Part",
        "type": "Title"
    },
    {
        "text": "id",
        "type": "Title"
    },
    {
        "text": "'part0'",
        "type": "Title"
    },
    {
        "text": "p1",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Part",
        "type": "Title"
    },
    {
        "text": "id",
        "type": "Title"
    },
    {
        "text": "'part1'",
        "type": "Title"
    },
    {
        "text": "m01",
        "type": "UncategorizedText"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": "number",
        "type": "Title"
    },
    {
        "text": "m01",
        "type": "UncategorizedText"
    },
    {
        "text": "append",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "'C'",
        "type": "UncategorizedText"
    },
    {
        "text": "type",
        "type": "Title"
    },
    {
        "text": "\"whole\"",
        "type": "Title"
    },
    {
        "text": "))",
        "type": "UncategorizedText"
    },
    {
        "text": "m02",
        "type": "UncategorizedText"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": "number",
        "type": "Title"
    },
    {
        "text": "m02",
        "type": "UncategorizedText"
    },
    {
        "text": "append",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "'D'",
        "type": "UncategorizedText"
    },
    {
        "text": "type",
        "type": "Title"
    },
    {
        "text": "\"whole\"",
        "type": "Title"
    },
    {
        "text": "))",
        "type": "UncategorizedText"
    },
    {
        "text": "p0",
        "type": "Title"
    },
    {
        "text": "append",
        "type": "Title"
    },
    {
        "text": "([",
        "type": "UncategorizedText"
    },
    {
        "text": "m01",
        "type": "UncategorizedText"
    },
    {
        "text": "m02",
        "type": "UncategorizedText"
    },
    {
        "text": "])",
        "type": "UncategorizedText"
    },
    {
        "text": "m11",
        "type": "UncategorizedText"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": "number",
        "type": "Title"
    },
    {
        "text": "m11",
        "type": "UncategorizedText"
    },
    {
        "text": "append",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "'E'",
        "type": "UncategorizedText"
    },
    {
        "text": "type",
        "type": "Title"
    },
    {
        "text": "\"whole\"",
        "type": "Title"
    },
    {
        "text": "))",
        "type": "UncategorizedText"
    },
    {
        "text": "m12",
        "type": "UncategorizedText"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": "number",
        "type": "Title"
    },
    {
        "text": "m12",
        "type": "UncategorizedText"
    },
    {
        "text": "append",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "'F'",
        "type": "UncategorizedText"
    },
    {
        "text": "type",
        "type": "Title"
    },
    {
        "text": "\"whole\"",
        "type": "Title"
    },
    {
        "text": "))",
        "type": "UncategorizedText"
    },
    {
        "text": "p1",
        "type": "Title"
    },
    {
        "text": "append",
        "type": "Title"
    },
    {
        "text": "([",
        "type": "UncategorizedText"
    },
    {
        "text": "m11",
        "type": "UncategorizedText"
    },
    {
        "text": "m12",
        "type": "UncategorizedText"
    },
    {
        "text": "])",
        "type": "UncategorizedText"
    },
    {
        "text": "insert",
        "type": "Title"
    },
    {
        "text": "p0",
        "type": "Title"
    },
    {
        "text": "insert",
        "type": "Title"
    },
    {
        "text": "p1",
        "type": "Title"
    },
    {
        "text": "show",
        "type": "Title"
    },
    {
        "text": "'text'",
        "type": "Title"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Part",
        "type": "Title"
    },
    {
        "text": "part0",
        "type": "Title"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "4.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "4.0",
        "type": "UncategorizedText"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Part",
        "type": "Title"
    },
    {
        "text": "part1",
        "type": "Title"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "4.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "4.0",
        "type": "UncategorizedText"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "show",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "Calling .recurse() on its own isn't very useful.",
        "type": "NarrativeText"
    },
    {
        "text": "recurseScore",
        "type": "Title"
    },
    {
        "text": "recurse",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "recurseScore",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "iterator",
        "type": "Title"
    },
    {
        "text": "RecursiveIterator",
        "type": "Title"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "Score",
        "type": "Title"
    },
    {
        "text": "mainScore",
        "type": "Title"
    },
    {
        "text": "Where it becomes useful is in a for loop:",
        "type": "NarrativeText"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "el",
        "type": "Title"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "recurse",
        "type": "Title"
    },
    {
        "text": "():",
        "type": "UncategorizedText"
    },
    {
        "text": "print",
        "type": "Title"
    },
    {
        "text": "el",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "el",
        "type": "Title"
    },
    {
        "text": "el",
        "type": "Title"
    },
    {
        "text": "activeSite",
        "type": "Title"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Part",
        "type": "Title"
    },
    {
        "text": "part0",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Score",
        "type": "Title"
    },
    {
        "text": "mainScore",
        "type": "Title"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Part",
        "type": "Title"
    },
    {
        "text": "part0",
        "type": "Title"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "4.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "4.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Part",
        "type": "Title"
    },
    {
        "text": "part0",
        "type": "Title"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "4.0",
        "type": "UncategorizedText"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Part",
        "type": "Title"
    },
    {
        "text": "part1",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Score",
        "type": "Title"
    },
    {
        "text": "mainScore",
        "type": "Title"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Part",
        "type": "Title"
    },
    {
        "text": "part1",
        "type": "Title"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "4.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "4.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Part",
        "type": "Title"
    },
    {
        "text": "part1",
        "type": "Title"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "4.0",
        "type": "UncategorizedText"
    },
    {
        "text": "This example also introduces the concept of .activeSite, which for\nnow can be thought of as the Stream that the element lives in; though\nwe'll find that Notes and other elements can be in multiple Streams\nsimultaneously, and this is just the one that they are most recently\nassociated with.",
        "type": "NarrativeText"
    },
    {
        "text": "There are a lot of things that we can do with .recurse(), but let's\njust introduce one more thing for now. Most \u009cfiltering\u009d mechanisms, such\nas .notes can also be applied between the () of recurse()\nand the : at the end:",
        "type": "NarrativeText"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "el",
        "type": "Title"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "recurse",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "notes",
        "type": "Title"
    },
    {
        "text": "print",
        "type": "Title"
    },
    {
        "text": "el",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "el",
        "type": "Title"
    },
    {
        "text": "el",
        "type": "Title"
    },
    {
        "text": "activeSite",
        "type": "Title"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "4.0",
        "type": "UncategorizedText"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "4.0",
        "type": "UncategorizedText"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": ".recurse() is a generator in music21. Thus, it can only be used in for loops and other things that\niterate over each member of a list.  To treat the results of .recurse() as a list, you need to wrap it\nwith a list() call like so:",
        "type": "NarrativeText"
    },
    {
        "text": ">>>",
        "type": "UncategorizedText"
    },
    {
        "text": "listRecurse",
        "type": "Title"
    },
    {
        "text": "list",
        "type": "Title"
    },
    {
        "text": "sBach",
        "type": "Title"
    },
    {
        "text": "recurse",
        "type": "Title"
    },
    {
        "text": "())",
        "type": "UncategorizedText"
    },
    {
        "text": "In general, .recurse() is the best way to work through all the\nelements of a Stream, but there is another way that can be handy in some\nsituations, and that is called .flatten().",
        "type": "NarrativeText"
    },
    {
        "text": "Flattening a Stream\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "While nested Streams offer expressive flexibility, it is often useful to\nbe able to flatten all Stream and Stream subclasses into a single Stream\ncontaining only the elements that are not Stream subclasses. The\nflatten() property provides immediate\naccess to such a flat representation of a Stream. For example, doing a\nsimilar count of components, such as that show above, we see that we\ncannot get to all of the Note objects of a complete Score until we\nflatten its Part and Measure objects by accessing the flat\nattribute. Note that for historical reasons, .flat is a property, so\nyou do not use () around it.",
        "type": "NarrativeText"
    },
    {
        "text": "Let's look at what .flatten() does to the example score we created.",
        "type": "NarrativeText"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "el",
        "type": "Title"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "flatten",
        "type": "Title"
    },
    {
        "text": "():",
        "type": "UncategorizedText"
    },
    {
        "text": "print",
        "type": "Title"
    },
    {
        "text": "el",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "el",
        "type": "Title"
    },
    {
        "text": "el",
        "type": "Title"
    },
    {
        "text": "activeSite",
        "type": "Title"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Score",
        "type": "Title"
    },
    {
        "text": "mainScore_flat",
        "type": "Title"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Score",
        "type": "Title"
    },
    {
        "text": "mainScore_flat",
        "type": "Title"
    },
    {
        "text": "4.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Score",
        "type": "Title"
    },
    {
        "text": "mainScore_flat",
        "type": "Title"
    },
    {
        "text": "4.0",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Score",
        "type": "Title"
    },
    {
        "text": "mainScore_flat",
        "type": "Title"
    },
    {
        "text": "A new, temporary Stream with id of \u009cmainScore_flat\u009d has been\ncreated, and all of the Note objects are in there. We didn't filter\nout non-Notes: .flat automatically removes all Stream objects\nand in this case there's nothing else but Notes in there.",
        "type": "NarrativeText"
    },
    {
        "text": "All the Note objects are now in the new temporary mainScore_flat\nobject, and their offsets are no longer all 0.0, but are instead\nmeasured from the start of the score being flattened. So the whole notes\nin measure 2 are given offset 4.0",
        "type": "NarrativeText"
    },
    {
        "text": "Compare what .flatten() lets you do when looking at a larger score.",
        "type": "NarrativeText"
    },
    {
        "text": "There are no Notes in the sBach stream\u2026",
        "type": "NarrativeText"
    },
    {
        "text": "len",
        "type": "Title"
    },
    {
        "text": "sBach",
        "type": "Title"
    },
    {
        "text": "getElementsByClass",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "))",
        "type": "UncategorizedText"
    },
    {
        "text": "\u2026they are all inside Measures inside Parts inside the stream. (in a more\ncomplex score, they may be in Voices inside Measures inside Parts,\netc.). But they are all inside the flat version of the Stream:",
        "type": "NarrativeText"
    },
    {
        "text": "len",
        "type": "Title"
    },
    {
        "text": "sBach",
        "type": "Title"
    },
    {
        "text": "flatten",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "getElementsByClass",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "))",
        "type": "UncategorizedText"
    },
    {
        "text": "150",
        "type": "UncategorizedText"
    },
    {
        "text": "Element offsets are always relative to the Stream that contains them.\nFor example, a Measure, when placed in a Stream, might have an offset of\n16. This offset describes the position of the Measure in the Stream.\nComponents of this Measure, such as Notes, have offset values relative\nonly to their container, the Measure. The first Note of this Measure,\nthen, has an offset of 0. In the following example we find that the\noffset of measure eight (using the\ngetOffsetBySite() method) is 21; the\noffset of the second Note in this Measure (index 1), however, is 1.",
        "type": "NarrativeText"
    },
    {
        "text": "sBach",
        "type": "Title"
    },
    {
        "text": "parts",
        "type": "Title"
    },
    {
        "text": "getElementsByClass",
        "type": "Title"
    },
    {
        "text": "'Measure'",
        "type": "Title"
    },
    {
        "text": ")[",
        "type": "UncategorizedText"
    },
    {
        "text": "getOffsetBySite",
        "type": "Title"
    },
    {
        "text": "sBach",
        "type": "Title"
    },
    {
        "text": "parts",
        "type": "Title"
    },
    {
        "text": "])",
        "type": "UncategorizedText"
    },
    {
        "text": "21.0",
        "type": "UncategorizedText"
    },
    {
        "text": "sBach",
        "type": "Title"
    },
    {
        "text": "parts",
        "type": "Title"
    },
    {
        "text": "measure",
        "type": "Title"
    },
    {
        "text": "notes",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": ">",
        "type": "ListItem"
    },
    {
        "text": "getOffsetBySite",
        "type": "Title"
    },
    {
        "text": "1.0",
        "type": "UncategorizedText"
    },
    {
        "text": "Flattening a structure of nested Streams will set new, shifted offsets\nfor each of the elements on the Stream, reflecting their appropriate\nposition in the context of the Stream from which the flat property\nwas accessed. For example, if a flat version of the first part of the\nBach chorale is obtained, the note defined above has the appropriate\noffset of 22 (the Measure offset of 21 plus the Note offset within this\nMeasure of 1).",
        "type": "NarrativeText"
    },
    {
        "text": "pFlat",
        "type": "Title"
    },
    {
        "text": "sBach",
        "type": "Title"
    },
    {
        "text": "parts",
        "type": "Title"
    },
    {
        "text": "flatten",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "indexN",
        "type": "Title"
    },
    {
        "text": "pFlat",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "Title"
    },
    {
        "text": "pFlat",
        "type": "Title"
    },
    {
        "text": "indexN",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": ">",
        "type": "ListItem"
    },
    {
        "text": "pFlat",
        "type": "Title"
    },
    {
        "text": "indexN",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "22.0",
        "type": "UncategorizedText"
    },
    {
        "text": "As an aside, it is important to recognize that the offset of the Note\nhas not been edited; instead, a Note, as all Music21Objects, can store\nmultiple pairs of sites and offsets. Music21Objects retain an offset\nrelative to all Stream or Stream subclasses they are contained within,\neven if just in passing.",
        "type": "NarrativeText"
    },
    {
        "text": "(Note that if you are on a version of music21 before v.7, instead of\n.flatten() you would write .flat without the parentheses)",
        "type": "NarrativeText"
    },
    {
        "text": "There's still a lot more to learn about Streams, but we can do that\nlater. For now, let's move on to\nChapter 7: Chords.",
        "type": "NarrativeText"
    },
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "User's Guide \u00bb",
        "type": "ListItem"
    },
    {
        "text": "User's Guide, Chapter 6: Streams (II): Hierarchies, Recursion, and Flattening",
        "type": "ListItem"
    },
    {
        "text": "\u00a9 Copyright 2006-2023 Michael Scott Asato Cuthbert.\n      Last updated on Jun 12, 2023.",
        "type": "NarrativeText"
    }
]