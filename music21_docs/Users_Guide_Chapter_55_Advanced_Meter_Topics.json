[
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "User's Guide \u00bb",
        "type": "ListItem"
    },
    {
        "text": "User's Guide, Chapter 55: Advanced Meter Topics",
        "type": "ListItem"
    },
    {
        "text": "Previous topic",
        "type": "Title"
    },
    {
        "text": "User's Guide, Chapter 54: Extending Converter with New Formats",
        "type": "Title"
    },
    {
        "text": "Next topic",
        "type": "Title"
    },
    {
        "text": "User's Guide, Chapter 58: Understanding Sites and Contexts",
        "type": "Title"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "User's Guide, Chapter 55: Advanced Meter Topics\nObjects for Organizing Hierarchical Partitions\nCreating and Editing MeterTerminal Objects\nCreating and Editing MeterSequence Objects\nAdvanced Time Signature Configuration\nConfiguring Display\nConfiguring Beam\nConfiguring Beat\nAnnotating Found Notes with Beat Count\nUsing Beat Depth to Provide Metrical Analysis\nConfiguring Accent\nApplying Articulations Based on Accent",
        "type": "ListItem"
    },
    {
        "text": "Table of Contents",
        "type": "Title"
    },
    {
        "text": "About music21",
        "type": "ListItem"
    },
    {
        "text": "User's Guide\nUser's Guide: Table of Contents\nUser's Guide, Chapter 1: Installing and Getting Started with music21\nUser's Guide, Chapter 2: Notes\nUser's Guide, Chapter 3: Pitches, Durations, and Notes again\nUser's Guide, Chapter 4: Lists, Streams (I) and Output\nUser's Guide, Chapter 5: Lists of Lists, Functions, and Recursion\nUser's Guide, Chapter 6: Streams (II): Hierarchies, Recursion, and Flattening\nUser's Guide, Chapter 7: Chords\nUser's Guide, Chapter 8: Installing MusicXML Readers and File Formats (1)\nUser's Guide, Chapter 9: Chordify\nUser's Guide, Chapter 10: Examples 1\nUser's Guide, Chapter 11: Corpus Searching\nUser's Guide, Chapter 12: Getting Back to Basics: The Music21Object\nUser's Guide, Chapter 13: More Music21Object Attributes and Properties\nUser's Guide: Chapter 14: Time Signatures and Beats\nUser's Guide, Chapter 15: Keys and KeySignatures\nUser's Guide, Chapter 16: TinyNotation\nUser's Guide: Chapter 17: Derivations\nUser's Guide: Chapter 18: Intervals\nUser's Guide, Chapter 19: Advanced Durations (Complex and Tuplets)\nUser's Guide, Chapter 20: Examples 2\nUser's Guide, Chapter 21: Ordering and Sorting of Stream Elements\nUser's Guide, Chapter 22: Graphing and plotting\nUser's Guide, Chapter 23: Roman Numeral Analysis\nUser's Guide, Chapter 24: Configuring Environment Settings\nUser's Guide, Chapter 25: Post-Tonal Tools (1)\nUser's Guide, Chapter 26: Stream Iteration and Filtering\nUser's Guide, Chapter 27: Grace Notes\nUser's Guide, Chapter 28: Lyric Searching\nUser's Guide, Chapter 29: Spanners 1 (Slurs)\nUser's Guide, Chapter 30: Examples 3\nUser's Guide, Chapter 31: Clefs, Ties, and Beams\nUser's Guide, Chapter 32: Articulations\nUser's Guide, Chapter 44: Advanced Graphing (Axes, Plots, and Graphs)\nUser's Guide, Chapter 53: Advanced Corpus and Metadata Searching\nUser's Guide, Chapter 54: Extending Converter with New Formats\nUser's Guide, Chapter 55: Advanced Meter Topics\nUser's Guide, Chapter 58: Understanding Sites and Contexts\nUser's Guide, Chapter 61: TimespanTrees and Verticalities",
        "type": "ListItem"
    },
    {
        "text": "Module Reference",
        "type": "ListItem"
    },
    {
        "text": "Installation",
        "type": "ListItem"
    },
    {
        "text": "Developer Reference",
        "type": "ListItem"
    },
    {
        "text": "Documentation and tests in progress",
        "type": "ListItem"
    },
    {
        "text": "Quick search",
        "type": "Title"
    },
    {
        "text": "This Page",
        "type": "Title"
    },
    {
        "text": "Show Source",
        "type": "ListItem"
    },
    {
        "text": "User's Guide, Chapter 55: Advanced Meter Topics\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "Objects for Organizing Hierarchical Partitions\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "Hierarchical metrical structures can be described as a type of\nfractional, space-preserving tree structure. With such a structure we\npartition and divide a single duration into one or more parts, where\neach part is a fraction of the whole. Each part can, in turn, be\nsimilarly divided. The objects for configuring this structure are the\nMeterTerminal and the MeterSequence objects.",
        "type": "NarrativeText"
    },
    {
        "text": "MeterTerminal and the MeterSequence objects are for advanced\nconfiguration. For basic data access about common meters, see the\ndiscussion of TimeSignature, below.",
        "type": "NarrativeText"
    },
    {
        "text": "Creating and Editing MeterTerminal Objects\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "A MeterTerminal is a node of the metrical tree structure, defined as a\nduration expressed as a fraction of a whole note. Thus, 1/4 is 1 quarter\nlength (QL) duration; 3/8 is 1.5 QL; 3/16 is 0.75 QL. For this model,\ndenominators are limited to n = 2 :superscript:x, for x between\n1 and 7 (e.g.\u00c2\u00a01/1 to 1/128).",
        "type": "NarrativeText"
    },
    {
        "text": "MeterTerminals can additionally store a weight, or a numerical value\nthat can be interpreted in a variety of different ways.",
        "type": "NarrativeText"
    },
    {
        "text": "The following examples in the Python interpreter demonstrate creating a\nMeterTerminal and accessing the\nnumerator and\ndenominator\nattributes. The\nduration attribute\nstores a Duration object.",
        "type": "NarrativeText"
    },
    {
        "text": "from",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "import",
        "type": "Title"
    },
    {
        "text": "mt",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "MeterTerminal",
        "type": "Title"
    },
    {
        "text": "'3/4'",
        "type": "UncategorizedText"
    },
    {
        "text": "mt",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "core",
        "type": "Title"
    },
    {
        "text": "MeterTerminal",
        "type": "Title"
    },
    {
        "text": "mt",
        "type": "Title"
    },
    {
        "text": "numerator",
        "type": "Title"
    },
    {
        "text": "mt",
        "type": "Title"
    },
    {
        "text": "denominator",
        "type": "Title"
    },
    {
        "text": "mt",
        "type": "Title"
    },
    {
        "text": "duration",
        "type": "Title"
    },
    {
        "text": "quarterLength",
        "type": "Title"
    },
    {
        "text": "3.0",
        "type": "UncategorizedText"
    },
    {
        "text": "A MeterTerminal can be broken into an ordered sequence of MeterTerminal\nobjects that sum to the same duration. This new object, to be discussed\nbelow, is the MeterSequence. A MeterTerminal can be broken into these\nduration-preserving components with the\nsubdivide() method. An argument for\nsubdivision can be given as a desired number of equal-valued components,\na list of numerators assuming equal-denominators, or a list of string\nfraction representations.",
        "type": "NarrativeText"
    },
    {
        "text": "mt",
        "type": "Title"
    },
    {
        "text": "subdivide",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "core",
        "type": "Title"
    },
    {
        "text": "MeterSequence",
        "type": "Title"
    },
    {
        "text": "mt",
        "type": "Title"
    },
    {
        "text": "subdivide",
        "type": "Title"
    },
    {
        "text": "([",
        "type": "UncategorizedText"
    },
    {
        "text": "])",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "core",
        "type": "Title"
    },
    {
        "text": "MeterSequence",
        "type": "Title"
    },
    {
        "text": "mt",
        "type": "Title"
    },
    {
        "text": "subdivide",
        "type": "Title"
    },
    {
        "text": "([",
        "type": "UncategorizedText"
    },
    {
        "text": "'1/4'",
        "type": "UncategorizedText"
    },
    {
        "text": "'4/8'",
        "type": "UncategorizedText"
    },
    {
        "text": "])",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "core",
        "type": "Title"
    },
    {
        "text": "MeterSequence",
        "type": "Title"
    },
    {
        "text": "Creating and Editing MeterSequence Objects\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "A MeterSequence object is a sub-class of a MeterTerminal. Like a\nMeterTerminal, a MeterSequence has a\nnumerator, a\ndenominator, and a\nduration attribute. A\nMeterSequence, however, can be a hierarchical tree or sub-tree,\ncontaining an ordered sequence of MeterTerminal and/or MeterSequence\nobjects.",
        "type": "NarrativeText"
    },
    {
        "text": "The ordered collection of MeterTerminal and/or MeterSequence objects can\nbe accessed like Python lists. MeterSequence objects, like MeterTerminal\nobjects, store a weight that by default is the sum of constituent\nweights.",
        "type": "NarrativeText"
    },
    {
        "text": "The partition() and\nsubdivide() methods can be used to\nconfigure the nested hierarchical structure.",
        "type": "NarrativeText"
    },
    {
        "text": "The partition() method replaces\nexisting MeterTerminal or MeterSequence objects in place with a new\narrangement, specified as a desired number of equal-valued components, a\nlist of numerators assuming equal-denominators, or a list of string\nfraction representations.",
        "type": "NarrativeText"
    },
    {
        "text": "The subdivide() method returns a\nnew MeterSequence (leaving the source MeterSequence unchanged) with an\narrangement of MeterTerminals as specified by an argument in the same\nform as for the partition() method.",
        "type": "NarrativeText"
    },
    {
        "text": "Note that MeterTerminal objects cannot be partitioned in place. A common\nway to convert a MeterTerminal into a MeterSequence is to reassign the\nreturned MeterSequence from the\nsubdivide() method to the position\noccupied by the MeterTerminal.",
        "type": "NarrativeText"
    },
    {
        "text": "The following example creates and partitions a MeterSequence by\nre-assigning subdivisions to MeterTerminal objects. The use of Python\nlist-like index access is also demonstrated.",
        "type": "NarrativeText"
    },
    {
        "text": "ms",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "MeterSequence",
        "type": "Title"
    },
    {
        "text": "'3/4'",
        "type": "UncategorizedText"
    },
    {
        "text": "ms",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "core",
        "type": "Title"
    },
    {
        "text": "MeterSequence",
        "type": "Title"
    },
    {
        "text": "ms",
        "type": "Title"
    },
    {
        "text": "partition",
        "type": "Title"
    },
    {
        "text": "([",
        "type": "UncategorizedText"
    },
    {
        "text": "])",
        "type": "UncategorizedText"
    },
    {
        "text": "ms",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "core",
        "type": "Title"
    },
    {
        "text": "MeterSequence",
        "type": "Title"
    },
    {
        "text": "ms",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "core",
        "type": "Title"
    },
    {
        "text": "MeterTerminal",
        "type": "Title"
    },
    {
        "text": "ms",
        "type": "Title"
    },
    {
        "text": "ms",
        "type": "Title"
    },
    {
        "text": "subdivide",
        "type": "Title"
    },
    {
        "text": "([",
        "type": "UncategorizedText"
    },
    {
        "text": "])",
        "type": "UncategorizedText"
    },
    {
        "text": "ms",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "core",
        "type": "Title"
    },
    {
        "text": "MeterSequence",
        "type": "Title"
    },
    {
        "text": "16",
        "type": "UncategorizedText"
    },
    {
        "text": "16",
        "type": "UncategorizedText"
    },
    {
        "text": "ms",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "core",
        "type": "Title"
    },
    {
        "text": "MeterSequence",
        "type": "Title"
    },
    {
        "text": "{{",
        "type": "UncategorizedText"
    },
    {
        "text": "16",
        "type": "UncategorizedText"
    },
    {
        "text": "16",
        "type": "UncategorizedText"
    },
    {
        "text": "ms",
        "type": "Title"
    },
    {
        "text": "ms",
        "type": "Title"
    },
    {
        "text": "subdivide",
        "type": "Title"
    },
    {
        "text": "([",
        "type": "UncategorizedText"
    },
    {
        "text": "])",
        "type": "UncategorizedText"
    },
    {
        "text": "ms",
        "type": "Title"
    },
    {
        "text": "][",
        "type": "UncategorizedText"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "core",
        "type": "Title"
    },
    {
        "text": "MeterTerminal",
        "type": "Title"
    },
    {
        "text": "ms",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "core",
        "type": "Title"
    },
    {
        "text": "MeterSequence",
        "type": "Title"
    },
    {
        "text": "ms",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "core",
        "type": "Title"
    },
    {
        "text": "MeterSequence",
        "type": "Title"
    },
    {
        "text": "{{",
        "type": "UncategorizedText"
    },
    {
        "text": "16",
        "type": "UncategorizedText"
    },
    {
        "text": "16",
        "type": "UncategorizedText"
    },
    {
        "text": "}}",
        "type": "UncategorizedText"
    },
    {
        "text": "The resulting structure can be graphically displayed with the following\ndiagram:",
        "type": "NarrativeText"
    },
    {
        "text": "# 3/8 divisions",
        "type": "Title"
    },
    {
        "text": "Numerous MeterSequence attributes provide convenient ways to access\ninformation about, or new objects from, the nested tree structure. The\ndepth attribute returns\nthe depth count at any node within the tree structure; the\nflat property returns a\nnew, flat MeterSequence constructed from all the lowest-level\nMeterTerminal objects (all leaf nodes).",
        "type": "NarrativeText"
    },
    {
        "text": "ms",
        "type": "Title"
    },
    {
        "text": "depth",
        "type": "Title"
    },
    {
        "text": "ms",
        "type": "Title"
    },
    {
        "text": "depth",
        "type": "Title"
    },
    {
        "text": "ms",
        "type": "Title"
    },
    {
        "text": "flat",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "core",
        "type": "Title"
    },
    {
        "text": "MeterSequence",
        "type": "Title"
    },
    {
        "text": "16",
        "type": "UncategorizedText"
    },
    {
        "text": "16",
        "type": "UncategorizedText"
    },
    {
        "text": "Numerous methods provide ways to access levels (slices) of the\nhierarchical structure, or all nodes found at a desired hierarchical\nlevel. As all components preserve the duration of their container, all\nlevels have the same total duration. The\ngetLevel() method returns, for a\ngiven depth, a new, flat MeterSequence. The\ngetLevelSpan() method returns, for\na given depth, the time span of each node as a list of start and end\nvalues.",
        "type": "NarrativeText"
    },
    {
        "text": "ms",
        "type": "Title"
    },
    {
        "text": "getLevel",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "core",
        "type": "Title"
    },
    {
        "text": "MeterSequence",
        "type": "Title"
    },
    {
        "text": "ms",
        "type": "Title"
    },
    {
        "text": "getLevel",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "core",
        "type": "Title"
    },
    {
        "text": "MeterSequence",
        "type": "Title"
    },
    {
        "text": "16",
        "type": "UncategorizedText"
    },
    {
        "text": "16",
        "type": "UncategorizedText"
    },
    {
        "text": "ms",
        "type": "Title"
    },
    {
        "text": "getLevelSpan",
        "type": "Title"
    },
    {
        "text": "[(",
        "type": "UncategorizedText"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "0.75",
        "type": "UncategorizedText"
    },
    {
        "text": "),",
        "type": "UncategorizedText"
    },
    {
        "text": "0.75",
        "type": "UncategorizedText"
    },
    {
        "text": "1.5",
        "type": "UncategorizedText"
    },
    {
        "text": "),",
        "type": "UncategorizedText"
    },
    {
        "text": "1.5",
        "type": "UncategorizedText"
    },
    {
        "text": "2.0",
        "type": "UncategorizedText"
    },
    {
        "text": "),",
        "type": "UncategorizedText"
    },
    {
        "text": "2.0",
        "type": "UncategorizedText"
    },
    {
        "text": "2.5",
        "type": "UncategorizedText"
    },
    {
        "text": "),",
        "type": "UncategorizedText"
    },
    {
        "text": "2.5",
        "type": "UncategorizedText"
    },
    {
        "text": "3.0",
        "type": "UncategorizedText"
    },
    {
        "text": ")]",
        "type": "UncategorizedText"
    },
    {
        "text": "ms",
        "type": "Title"
    },
    {
        "text": "getLevelSpan",
        "type": "Title"
    },
    {
        "text": "[(",
        "type": "UncategorizedText"
    },
    {
        "text": "0.0",
        "type": "UncategorizedText"
    },
    {
        "text": "0.5",
        "type": "UncategorizedText"
    },
    {
        "text": "),",
        "type": "UncategorizedText"
    },
    {
        "text": "0.5",
        "type": "UncategorizedText"
    },
    {
        "text": "1.0",
        "type": "UncategorizedText"
    },
    {
        "text": "),",
        "type": "UncategorizedText"
    },
    {
        "text": "1.0",
        "type": "UncategorizedText"
    },
    {
        "text": "1.5",
        "type": "UncategorizedText"
    },
    {
        "text": ")]",
        "type": "UncategorizedText"
    },
    {
        "text": "Finally, numerous methods provide ways to find and access the relevant\nnodes (the MeterTerminal or MeterSequence objects) active given a\nquarter length position into the tree structure. The\noffsetToIndex() method returns, for\na given QL, the index of the active node. The\noffsetToSpan() method returns, for\na given QL, the span of the active node. The\noffsetToDepth() method returns, for\na given QL, the maximum depth at this position.",
        "type": "NarrativeText"
    },
    {
        "text": "ms",
        "type": "Title"
    },
    {
        "text": "offsetToIndex",
        "type": "Title"
    },
    {
        "text": "2.5",
        "type": "UncategorizedText"
    },
    {
        "text": "ms",
        "type": "Title"
    },
    {
        "text": "offsetToSpan",
        "type": "Title"
    },
    {
        "text": "2.5",
        "type": "UncategorizedText"
    },
    {
        "text": "1.5",
        "type": "UncategorizedText"
    },
    {
        "text": "3.0",
        "type": "UncategorizedText"
    },
    {
        "text": "ms",
        "type": "Title"
    },
    {
        "text": "offsetToDepth",
        "type": "Title"
    },
    {
        "text": ".5",
        "type": "UncategorizedText"
    },
    {
        "text": "ms",
        "type": "Title"
    },
    {
        "text": "offsetToDepth",
        "type": "Title"
    },
    {
        "text": ".5",
        "type": "UncategorizedText"
    },
    {
        "text": "ms",
        "type": "Title"
    },
    {
        "text": "getLevel",
        "type": "Title"
    },
    {
        "text": "offsetToSpan",
        "type": "Title"
    },
    {
        "text": ".5",
        "type": "UncategorizedText"
    },
    {
        "text": "0.75",
        "type": "UncategorizedText"
    },
    {
        "text": "Advanced Time Signature Configuration\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "The music21 TimeSignature object contains four\nparallel MeterSequence objects, each assigned to the attributes\ndisplaySequence,\nbeatSequence,\nbeamSequence,\naccentSequence.\nThe following displays a graphical realization of these four\nMeterSequence objects.",
        "type": "NarrativeText"
    },
    {
        "text": "# four MeterSequence objects",
        "type": "Title"
    },
    {
        "text": "The TimeSignature provides a model of all common hierarchical structures\ncontained within a bar. Common meters are initialized with expected\ndefaults; however, full MeterSequence customization is available.",
        "type": "NarrativeText"
    },
    {
        "text": "Configuring Display\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "The TimeSignature\ndisplaySequence\nMeterSequence employs the highest-level partitions to configure the\ndisplayed time signature symbol. If more than one partition is given,\nthose partitions will be interpreted as additive meter components. If\npartitions have a common denominator, a summed numerator (over a single\ndenominator) can be displayed by setting the TimeSignature\nsummedNumerator\nattribute to True. Lower-level subdivisions of the TimeSignature\nMeterSequence are not employed.",
        "type": "NarrativeText"
    },
    {
        "text": "Note that a new MeterSequence instance can be assigned to the\ndisplaySequence\nattribute with a duration and/or partitioning completely independent\nfrom the\nbeatSequence,\nbeamSequence, and\naccentSequence\nMeterSequences.",
        "type": "NarrativeText"
    },
    {
        "text": "The following example demonstrates setting the display MeterSequence for\na TimeSignature. NOTE that there is currently a bug in the first one\nthat is showing 5/16 instead of 5/8. We hope to fix this soon.",
        "type": "NarrativeText"
    },
    {
        "text": "from",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "import",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "ts1",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "TimeSignature",
        "type": "Title"
    },
    {
        "text": "'5/8'",
        "type": "UncategorizedText"
    },
    {
        "text": "# assumes two partitions",
        "type": "NarrativeText"
    },
    {
        "text": "ts1",
        "type": "Title"
    },
    {
        "text": "displaySequence",
        "type": "Title"
    },
    {
        "text": "partition",
        "type": "Title"
    },
    {
        "text": "([",
        "type": "UncategorizedText"
    },
    {
        "text": "'3/16'",
        "type": "UncategorizedText"
    },
    {
        "text": "'1/8'",
        "type": "UncategorizedText"
    },
    {
        "text": "'5/16'",
        "type": "UncategorizedText"
    },
    {
        "text": "])",
        "type": "UncategorizedText"
    },
    {
        "text": "ts2",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "TimeSignature",
        "type": "Title"
    },
    {
        "text": "'5/8'",
        "type": "UncategorizedText"
    },
    {
        "text": "# assumes two partitions",
        "type": "NarrativeText"
    },
    {
        "text": "ts2",
        "type": "Title"
    },
    {
        "text": "displaySequence",
        "type": "Title"
    },
    {
        "text": "partition",
        "type": "Title"
    },
    {
        "text": "([",
        "type": "UncategorizedText"
    },
    {
        "text": "'2/8'",
        "type": "UncategorizedText"
    },
    {
        "text": "'3/8'",
        "type": "UncategorizedText"
    },
    {
        "text": "])",
        "type": "UncategorizedText"
    },
    {
        "text": "ts2",
        "type": "Title"
    },
    {
        "text": "summedNumerator",
        "type": "Title"
    },
    {
        "text": "True",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Stream",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "ts1",
        "type": "Title"
    },
    {
        "text": "ts2",
        "type": "Title"
    },
    {
        "text": "]:",
        "type": "UncategorizedText"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "timeSignature",
        "type": "Title"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "'b'",
        "type": "UncategorizedText"
    },
    {
        "text": "quarterLength",
        "type": "Title"
    },
    {
        "text": "0.5",
        "type": "UncategorizedText"
    },
    {
        "text": "repeatAppend",
        "type": "Title"
    },
    {
        "text": "append",
        "type": "Title"
    },
    {
        "text": "show",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "Configuring Beam\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "The TimeSignature\nbeamSequence\nMeterSequence employs the complete hierarchical structure to configure\nthe single or multi-level beaming of a bar. The outer-most partitions\ncan specify one or more top-level partitions. Lower-level partitions\nsubdivide beam-groups, providing the appropriate beam-breaks when\nsufficiently small durations are employed.",
        "type": "NarrativeText"
    },
    {
        "text": "beamSequence",
        "type": "Title"
    },
    {
        "text": "Beams",
        "type": "Title"
    },
    {
        "text": "Note objects. The TimeSignature",
        "type": "Title"
    },
    {
        "text": "getBeams()",
        "type": "Title"
    },
    {
        "text": "Duration objects, returns a list of",
        "type": "NarrativeText"
    },
    {
        "text": "Beams",
        "type": "Title"
    },
    {
        "text": "beamSequence",
        "type": "Title"
    },
    {
        "text": "Many users may find the Stream\nmakeBeams() method the most convenient\nway to apply beams to a Measure or Stream of Note objects. This method\nreturns a new Stream with created and configured Beams.",
        "type": "NarrativeText"
    },
    {
        "text": "The following example beams a bar of 3/4 in four different ways. The\ndiversity and complexity of beaming is offered here to illustrate the\nflexibility of this model.",
        "type": "NarrativeText"
    },
    {
        "text": "ts1",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "TimeSignature",
        "type": "Title"
    },
    {
        "text": "'3/4'",
        "type": "UncategorizedText"
    },
    {
        "text": "ts1",
        "type": "Title"
    },
    {
        "text": "beamSequence",
        "type": "Title"
    },
    {
        "text": "partition",
        "type": "Title"
    },
    {
        "text": "ts1",
        "type": "Title"
    },
    {
        "text": "beamSequence",
        "type": "Title"
    },
    {
        "text": "ts1",
        "type": "Title"
    },
    {
        "text": "beamSequence",
        "type": "Title"
    },
    {
        "text": "subdivide",
        "type": "Title"
    },
    {
        "text": "([",
        "type": "UncategorizedText"
    },
    {
        "text": "'3/8'",
        "type": "UncategorizedText"
    },
    {
        "text": "'5/32'",
        "type": "UncategorizedText"
    },
    {
        "text": "'4/32'",
        "type": "UncategorizedText"
    },
    {
        "text": "'3/32'",
        "type": "UncategorizedText"
    },
    {
        "text": "])",
        "type": "UncategorizedText"
    },
    {
        "text": "ts2",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "TimeSignature",
        "type": "Title"
    },
    {
        "text": "'3/4'",
        "type": "UncategorizedText"
    },
    {
        "text": "ts2",
        "type": "Title"
    },
    {
        "text": "beamSequence",
        "type": "Title"
    },
    {
        "text": "partition",
        "type": "Title"
    },
    {
        "text": "ts3",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "TimeSignature",
        "type": "Title"
    },
    {
        "text": "'3/4'",
        "type": "UncategorizedText"
    },
    {
        "text": "ts3",
        "type": "Title"
    },
    {
        "text": "beamSequence",
        "type": "Title"
    },
    {
        "text": "partition",
        "type": "Title"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "range",
        "type": "Title"
    },
    {
        "text": "len",
        "type": "Title"
    },
    {
        "text": "ts3",
        "type": "Title"
    },
    {
        "text": "beamSequence",
        "type": "Title"
    },
    {
        "text": ")):",
        "type": "UncategorizedText"
    },
    {
        "text": "ts3",
        "type": "Title"
    },
    {
        "text": "beamSequence",
        "type": "Title"
    },
    {
        "text": "ts3",
        "type": "Title"
    },
    {
        "text": "beamSequence",
        "type": "Title"
    },
    {
        "text": "subdivide",
        "type": "Title"
    },
    {
        "text": "ts4",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "TimeSignature",
        "type": "Title"
    },
    {
        "text": "'3/4'",
        "type": "UncategorizedText"
    },
    {
        "text": "ts4",
        "type": "Title"
    },
    {
        "text": "beamSequence",
        "type": "Title"
    },
    {
        "text": "partition",
        "type": "Title"
    },
    {
        "text": "([",
        "type": "UncategorizedText"
    },
    {
        "text": "'3/8'",
        "type": "UncategorizedText"
    },
    {
        "text": "'3/8'",
        "type": "UncategorizedText"
    },
    {
        "text": "])",
        "type": "UncategorizedText"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "range",
        "type": "Title"
    },
    {
        "text": "len",
        "type": "Title"
    },
    {
        "text": "ts4",
        "type": "Title"
    },
    {
        "text": "beamSequence",
        "type": "Title"
    },
    {
        "text": ")):",
        "type": "UncategorizedText"
    },
    {
        "text": "ts4",
        "type": "Title"
    },
    {
        "text": "beamSequence",
        "type": "Title"
    },
    {
        "text": "ts4",
        "type": "Title"
    },
    {
        "text": "beamSequence",
        "type": "Title"
    },
    {
        "text": "subdivide",
        "type": "Title"
    },
    {
        "text": "([",
        "type": "UncategorizedText"
    },
    {
        "text": "'6/32'",
        "type": "UncategorizedText"
    },
    {
        "text": "'6/32'",
        "type": "UncategorizedText"
    },
    {
        "text": "])",
        "type": "UncategorizedText"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "range",
        "type": "Title"
    },
    {
        "text": "len",
        "type": "Title"
    },
    {
        "text": "ts4",
        "type": "Title"
    },
    {
        "text": "beamSequence",
        "type": "Title"
    },
    {
        "text": "])):",
        "type": "UncategorizedText"
    },
    {
        "text": "ts4",
        "type": "Title"
    },
    {
        "text": "beamSequence",
        "type": "Title"
    },
    {
        "text": "][",
        "type": "UncategorizedText"
    },
    {
        "text": "ts4",
        "type": "Title"
    },
    {
        "text": "beamSequence",
        "type": "Title"
    },
    {
        "text": "][",
        "type": "UncategorizedText"
    },
    {
        "text": "subdivide",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Stream",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "ts1",
        "type": "Title"
    },
    {
        "text": "ts2",
        "type": "Title"
    },
    {
        "text": "ts3",
        "type": "Title"
    },
    {
        "text": "ts4",
        "type": "Title"
    },
    {
        "text": "]:",
        "type": "UncategorizedText"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "timeSignature",
        "type": "Title"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "note",
        "type": "Title"
    },
    {
        "text": "Note",
        "type": "Title"
    },
    {
        "text": "'b'",
        "type": "UncategorizedText"
    },
    {
        "text": "quarterLength",
        "type": "Title"
    },
    {
        "text": "0.125",
        "type": "UncategorizedText"
    },
    {
        "text": "repeatAppend",
        "type": "Title"
    },
    {
        "text": "24",
        "type": "UncategorizedText"
    },
    {
        "text": "append",
        "type": "Title"
    },
    {
        "text": "makeBeams",
        "type": "Title"
    },
    {
        "text": "())",
        "type": "UncategorizedText"
    },
    {
        "text": "show",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "The following is a fractional grid representation of the four beam\npartitions created.",
        "type": "NarrativeText"
    },
    {
        "text": "# four beam partitions",
        "type": "Title"
    },
    {
        "text": "Configuring Beat\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "The TimeSignature\nbeatSequence\nMeterSequence employs the hierarchical structure to define the beats and\nbeat divisions of a bar. The outer-most partitions can specify one or\nmore top level beats. Inner partitions can specify the beat division\npartitions. For most common meters, beats and beat divisions are\npre-configured by default.",
        "type": "NarrativeText"
    },
    {
        "text": "getLevel()",
        "type": "Title"
    },
    {
        "text": "beatDuration",
        "type": "Title"
    },
    {
        "text": "beat",
        "type": "Title"
    },
    {
        "text": "beatCountName",
        "type": "Title"
    },
    {
        "text": "beatDivisionCount",
        "type": "Title"
    },
    {
        "text": "beatDivisionCountName",
        "type": "Title"
    },
    {
        "text": "classification",
        "type": "Title"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "TimeSignature",
        "type": "Title"
    },
    {
        "text": "'3/4'",
        "type": "UncategorizedText"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "beatSequence",
        "type": "Title"
    },
    {
        "text": "getLevel",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "core",
        "type": "Title"
    },
    {
        "text": "MeterSequence",
        "type": "Title"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "beatSequence",
        "type": "Title"
    },
    {
        "text": "getLevel",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "core",
        "type": "Title"
    },
    {
        "text": "MeterSequence",
        "type": "Title"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "beatDuration",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "duration",
        "type": "Title"
    },
    {
        "text": "Duration",
        "type": "Title"
    },
    {
        "text": "1.0",
        "type": "UncategorizedText"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "beatCount",
        "type": "Title"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "beatCountName",
        "type": "Title"
    },
    {
        "text": "'Triple'",
        "type": "Title"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "beatDivisionCount",
        "type": "Title"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "beatDivisionCountName",
        "type": "Title"
    },
    {
        "text": "'Simple'",
        "type": "Title"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "classification",
        "type": "Title"
    },
    {
        "text": "'Simple Triple'",
        "type": "Title"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "TimeSignature",
        "type": "Title"
    },
    {
        "text": "'12/16'",
        "type": "UncategorizedText"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "beatSequence",
        "type": "Title"
    },
    {
        "text": "getLevel",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "core",
        "type": "Title"
    },
    {
        "text": "MeterSequence",
        "type": "Title"
    },
    {
        "text": "16",
        "type": "UncategorizedText"
    },
    {
        "text": "16",
        "type": "UncategorizedText"
    },
    {
        "text": "16",
        "type": "UncategorizedText"
    },
    {
        "text": "16",
        "type": "UncategorizedText"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "beatSequence",
        "type": "Title"
    },
    {
        "text": "getLevel",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "core",
        "type": "Title"
    },
    {
        "text": "MeterSequence",
        "type": "Title"
    },
    {
        "text": "16",
        "type": "UncategorizedText"
    },
    {
        "text": "16",
        "type": "UncategorizedText"
    },
    {
        "text": "16",
        "type": "UncategorizedText"
    },
    {
        "text": "16",
        "type": "UncategorizedText"
    },
    {
        "text": "16",
        "type": "UncategorizedText"
    },
    {
        "text": "16",
        "type": "UncategorizedText"
    },
    {
        "text": "16",
        "type": "UncategorizedText"
    },
    {
        "text": "16",
        "type": "UncategorizedText"
    },
    {
        "text": "16",
        "type": "UncategorizedText"
    },
    {
        "text": "16",
        "type": "UncategorizedText"
    },
    {
        "text": "16",
        "type": "UncategorizedText"
    },
    {
        "text": "16",
        "type": "UncategorizedText"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "beatDuration",
        "type": "Title"
    },
    {
        "text": "music21",
        "type": "Title"
    },
    {
        "text": "duration",
        "type": "Title"
    },
    {
        "text": "Duration",
        "type": "Title"
    },
    {
        "text": "0.75",
        "type": "UncategorizedText"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "beatCount",
        "type": "Title"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "beatCountName",
        "type": "Title"
    },
    {
        "text": "'Quadruple'",
        "type": "Title"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "beatDivisionCount",
        "type": "Title"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "beatDivisionCountName",
        "type": "Title"
    },
    {
        "text": "'Compound'",
        "type": "Title"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "classification",
        "type": "Title"
    },
    {
        "text": "'Compound Quadruple'",
        "type": "Title"
    },
    {
        "text": "Annotating Found Notes with Beat Count\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "The getBeat() method returns the\ncurrently active beat given a quarter length position into the\nTimeSignature.",
        "type": "NarrativeText"
    },
    {
        "text": "In the following example, all leading tones, or C#s, are collected into\na new Stream and displayed with annotations for part, measure, and beat.",
        "type": "NarrativeText"
    },
    {
        "text": "score",
        "type": "Title"
    },
    {
        "text": "corpus",
        "type": "Title"
    },
    {
        "text": "parse",
        "type": "Title"
    },
    {
        "text": "'bach/bwv366.xml'",
        "type": "Title"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "score",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "TimeSignature",
        "type": "Title"
    },
    {
        "text": "first",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "beatSequence",
        "type": "Title"
    },
    {
        "text": "partition",
        "type": "Title"
    },
    {
        "text": "found",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Stream",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "offsetQL",
        "type": "Title"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "part",
        "type": "Title"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "score",
        "type": "Title"
    },
    {
        "text": "parts",
        "type": "Title"
    },
    {
        "text": "found",
        "type": "Title"
    },
    {
        "text": "insert",
        "type": "Title"
    },
    {
        "text": "offsetQL",
        "type": "Title"
    },
    {
        "text": "part",
        "type": "Title"
    },
    {
        "text": "clef",
        "type": "Title"
    },
    {
        "text": "Clef",
        "type": "Title"
    },
    {
        "text": "first",
        "type": "Title"
    },
    {
        "text": "())",
        "type": "UncategorizedText"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "range",
        "type": "Title"
    },
    {
        "text": "len",
        "type": "Title"
    },
    {
        "text": "part",
        "type": "Title"
    },
    {
        "text": "getElementsByClass",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": "))):",
        "type": "UncategorizedText"
    },
    {
        "text": "part",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": "][",
        "type": "UncategorizedText"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "notesAndRests",
        "type": "Title"
    },
    {
        "text": "if",
        "type": "Title"
    },
    {
        "text": "name",
        "type": "Title"
    },
    {
        "text": "==",
        "type": "UncategorizedText"
    },
    {
        "text": "'C#'",
        "type": "UncategorizedText"
    },
    {
        "text": "addLyric",
        "type": "Title"
    },
    {
        "text": "part",
        "type": "Title"
    },
    {
        "text": "id",
        "type": "Title"
    },
    {
        "text": ", m.",
        "type": "UncategorizedText"
    },
    {
        "text": "number",
        "type": "Title"
    },
    {
        "text": "addLyric",
        "type": "Title"
    },
    {
        "text": "'beat",
        "type": "Title"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "getBeat",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "found",
        "type": "Title"
    },
    {
        "text": "insert",
        "type": "Title"
    },
    {
        "text": "offsetQL",
        "type": "Title"
    },
    {
        "text": "offsetQL",
        "type": "Title"
    },
    {
        "text": "+=",
        "type": "UncategorizedText"
    },
    {
        "text": "found",
        "type": "Title"
    },
    {
        "text": "show",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "Using Beat Depth to Provide Metrical Analysis\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "Another application of the\nbeatSequence\nMeterSequence is to define the hierarchical depth active for a given\nnote found within the TimeSignature.",
        "type": "NarrativeText"
    },
    {
        "text": "The getBeatDepth() method, when set\nwith the optional parameter align to \u009cquantize\u009d, shows the number of\nhierarchical levels that start at or before that point. This value is\ndescribed by Lerdahl and Jackendoff as metrical analysis.",
        "type": "NarrativeText"
    },
    {
        "text": "In the following example,\nbeatSequence\nMeterSequence is partitioned first into one subdivision, and then each\nsubsequent subdivision into two, down to four layers of partitioning.",
        "type": "NarrativeText"
    },
    {
        "text": "The number of hierarchical levels, found with the\ngetBeatDepth() method, is appended\nto each note with the addLyric()\nmethod.",
        "type": "NarrativeText"
    },
    {
        "text": "score",
        "type": "Title"
    },
    {
        "text": "corpus",
        "type": "Title"
    },
    {
        "text": "parse",
        "type": "Title"
    },
    {
        "text": "'bach/bwv281.xml'",
        "type": "Title"
    },
    {
        "text": "partBass",
        "type": "Title"
    },
    {
        "text": "score",
        "type": "Title"
    },
    {
        "text": "getElementById",
        "type": "Title"
    },
    {
        "text": "'Bass'",
        "type": "Title"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "partBass",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "TimeSignature",
        "type": "Title"
    },
    {
        "text": "first",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "beatSequence",
        "type": "Title"
    },
    {
        "text": "partition",
        "type": "Title"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "range",
        "type": "Title"
    },
    {
        "text": "len",
        "type": "Title"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "beatSequence",
        "type": "Title"
    },
    {
        "text": ")):",
        "type": "UncategorizedText"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "beatSequence",
        "type": "Title"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "beatSequence",
        "type": "Title"
    },
    {
        "text": "subdivide",
        "type": "Title"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "range",
        "type": "Title"
    },
    {
        "text": "len",
        "type": "Title"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "beatSequence",
        "type": "Title"
    },
    {
        "text": "])):",
        "type": "UncategorizedText"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "beatSequence",
        "type": "Title"
    },
    {
        "text": "][",
        "type": "UncategorizedText"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "beatSequence",
        "type": "Title"
    },
    {
        "text": "][",
        "type": "UncategorizedText"
    },
    {
        "text": "subdivide",
        "type": "Title"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "range",
        "type": "Title"
    },
    {
        "text": "len",
        "type": "Title"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "beatSequence",
        "type": "Title"
    },
    {
        "text": "][",
        "type": "UncategorizedText"
    },
    {
        "text": "])):",
        "type": "UncategorizedText"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "beatSequence",
        "type": "Title"
    },
    {
        "text": "][",
        "type": "UncategorizedText"
    },
    {
        "text": "][",
        "type": "UncategorizedText"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "beatSequence",
        "type": "Title"
    },
    {
        "text": "][",
        "type": "UncategorizedText"
    },
    {
        "text": "][",
        "type": "UncategorizedText"
    },
    {
        "text": "subdivide",
        "type": "Title"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "partBass",
        "type": "Title"
    },
    {
        "text": "getElementsByClass",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": "):",
        "type": "UncategorizedText"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "notesAndRests",
        "type": "Title"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "range",
        "type": "Title"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "getBeatDepth",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": ")):",
        "type": "UncategorizedText"
    },
    {
        "text": "addLyric",
        "type": "Title"
    },
    {
        "text": "'*'",
        "type": "UncategorizedText"
    },
    {
        "text": "partBass",
        "type": "Title"
    },
    {
        "text": "measures",
        "type": "Title"
    },
    {
        "text": "show",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "Alternatively, this type of annotation can be applied to a Stream using\nthe labelBeatDepth() function.",
        "type": "NarrativeText"
    },
    {
        "text": "Configuring Accent\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "The TimeSignature\naccentSequence\nMeterSequence defines one or more levels of hierarchical accent levels,\nwhere quantitative accent value is encoded in MeterTerminal or\nMeterSequence with a number assigned to the\nweight attribute.",
        "type": "NarrativeText"
    },
    {
        "text": "Applying Articulations Based on Accent\u00c2\u00b6",
        "type": "Title"
    },
    {
        "text": "The getAccentWeight() method\nreturns the currently active accent weight given a quarter length\nposition into the TimeSignature. Combined with the\ngetBeatProgress() method, Notes\nthat start on particular beat can be isolated and examined.",
        "type": "NarrativeText"
    },
    {
        "text": "The following example extracts the Bass line of a Bach chorale in 3/4\nand, after repartitioning the beat and accent attributes, applies\naccents to reflect a meter of 6/8.",
        "type": "NarrativeText"
    },
    {
        "text": "score",
        "type": "Title"
    },
    {
        "text": "corpus",
        "type": "Title"
    },
    {
        "text": "parse",
        "type": "Title"
    },
    {
        "text": "'bach/bwv366.xml'",
        "type": "Title"
    },
    {
        "text": "partBass",
        "type": "Title"
    },
    {
        "text": "score",
        "type": "Title"
    },
    {
        "text": "getElementById",
        "type": "Title"
    },
    {
        "text": "'Bass'",
        "type": "Title"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "partBass",
        "type": "Title"
    },
    {
        "text": "meter",
        "type": "Title"
    },
    {
        "text": "TimeSignature",
        "type": "Title"
    },
    {
        "text": "first",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "beatSequence",
        "type": "Title"
    },
    {
        "text": "partition",
        "type": "Title"
    },
    {
        "text": "([",
        "type": "UncategorizedText"
    },
    {
        "text": "'3/8'",
        "type": "UncategorizedText"
    },
    {
        "text": "'3/8'",
        "type": "UncategorizedText"
    },
    {
        "text": "])",
        "type": "UncategorizedText"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "accentSequence",
        "type": "Title"
    },
    {
        "text": "partition",
        "type": "Title"
    },
    {
        "text": "([",
        "type": "UncategorizedText"
    },
    {
        "text": "'3/8'",
        "type": "UncategorizedText"
    },
    {
        "text": "'3/8'",
        "type": "UncategorizedText"
    },
    {
        "text": "])",
        "type": "UncategorizedText"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "setAccentWeight",
        "type": "Title"
    },
    {
        "text": "([",
        "type": "UncategorizedText"
    },
    {
        "text": ".5",
        "type": "UncategorizedText"
    },
    {
        "text": "])",
        "type": "UncategorizedText"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "partBass",
        "type": "Title"
    },
    {
        "text": "stream",
        "type": "Title"
    },
    {
        "text": "Measure",
        "type": "Title"
    },
    {
        "text": "]:",
        "type": "UncategorizedText"
    },
    {
        "text": "lastBeat",
        "type": "Title"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "for",
        "type": "Title"
    },
    {
        "text": "in",
        "type": "Title"
    },
    {
        "text": "notesAndRests",
        "type": "Title"
    },
    {
        "text": "beat",
        "type": "Title"
    },
    {
        "text": "progress",
        "type": "Title"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "getBeatProgress",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "if",
        "type": "Title"
    },
    {
        "text": "beat",
        "type": "Title"
    },
    {
        "text": "!=",
        "type": "UncategorizedText"
    },
    {
        "text": "lastBeat",
        "type": "Title"
    },
    {
        "text": "and",
        "type": "Title"
    },
    {
        "text": "progress",
        "type": "Title"
    },
    {
        "text": "==",
        "type": "UncategorizedText"
    },
    {
        "text": "if",
        "type": "Title"
    },
    {
        "text": "tie",
        "type": "Title"
    },
    {
        "text": "!=",
        "type": "UncategorizedText"
    },
    {
        "text": "None",
        "type": "Title"
    },
    {
        "text": "and",
        "type": "Title"
    },
    {
        "text": "tie",
        "type": "Title"
    },
    {
        "text": "type",
        "type": "Title"
    },
    {
        "text": "==",
        "type": "UncategorizedText"
    },
    {
        "text": "'stop'",
        "type": "Title"
    },
    {
        "text": "continue",
        "type": "Title"
    },
    {
        "text": "if",
        "type": "Title"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "getAccentWeight",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "==",
        "type": "UncategorizedText"
    },
    {
        "text": "mark",
        "type": "Title"
    },
    {
        "text": "articulations",
        "type": "Title"
    },
    {
        "text": "StrongAccent",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "elif",
        "type": "Title"
    },
    {
        "text": "ts",
        "type": "Title"
    },
    {
        "text": "getAccentWeight",
        "type": "Title"
    },
    {
        "text": "offset",
        "type": "Title"
    },
    {
        "text": "==",
        "type": "UncategorizedText"
    },
    {
        "text": ".5",
        "type": "UncategorizedText"
    },
    {
        "text": "mark",
        "type": "Title"
    },
    {
        "text": "articulations",
        "type": "Title"
    },
    {
        "text": "Accent",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "articulations",
        "type": "Title"
    },
    {
        "text": "append",
        "type": "Title"
    },
    {
        "text": "mark",
        "type": "Title"
    },
    {
        "text": "lastBeat",
        "type": "Title"
    },
    {
        "text": "beat",
        "type": "Title"
    },
    {
        "text": "sorted",
        "type": "NarrativeText"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "partBass",
        "type": "Title"
    },
    {
        "text": "measures",
        "type": "Title"
    },
    {
        "text": "show",
        "type": "Title"
    },
    {
        "text": "()",
        "type": "UncategorizedText"
    },
    {
        "text": "This is probably more depth to the concept of meter than anyone would\never want! But hope that it has whetted your appetite for jucier\nconcepts still to come!",
        "type": "NarrativeText"
    },
    {
        "text": "The next chapters are not yet complete, so let's jump head to\nChapter 58: Understanding Sites and Contexts",
        "type": "NarrativeText"
    },
    {
        "text": "Navigation",
        "type": "Title"
    },
    {
        "text": "index",
        "type": "ListItem"
    },
    {
        "text": "modules |",
        "type": "ListItem"
    },
    {
        "text": "next |",
        "type": "ListItem"
    },
    {
        "text": "previous |",
        "type": "ListItem"
    },
    {
        "text": "music21 \u00bb",
        "type": "ListItem"
    },
    {
        "text": "User's Guide \u00bb",
        "type": "ListItem"
    },
    {
        "text": "User's Guide, Chapter 55: Advanced Meter Topics",
        "type": "ListItem"
    },
    {
        "text": "\u00a9 Copyright 2006-2023 Michael Scott Asato Cuthbert.\n      Last updated on Jun 12, 2023.",
        "type": "NarrativeText"
    }
]